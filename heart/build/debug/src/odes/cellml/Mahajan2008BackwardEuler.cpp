//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: mahajan_shiferaw_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:42:37 2016
//! 
//! <autogenerated>

#include "Mahajan2008BackwardEuler.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellMahajan2008FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellMahajan2008FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellMahajan2008FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<75; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellMahajan2008FromCellMLBackwardEuler_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellMahajan2008FromCellMLBackwardEuler_LookupTables(const CellMahajan2008FromCellMLBackwardEuler_LookupTables&);
    CellMahajan2008FromCellMLBackwardEuler_LookupTables& operator= (const CellMahajan2008FromCellMLBackwardEuler_LookupTables&);
    CellMahajan2008FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 75;
        mTableMins[0] = -120.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 289.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellMahajan2008FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][75];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 50.0)) * 0.13333333333333333))) / (1.0 / (((fabs(var_chaste_interface__cell__V + 7.0) > 0.001) ? (((var_chaste_interface__cell__V + 7.0) * 0.0013799999999999999) / (1.0 - exp( -0.123 * (var_chaste_interface__cell__V + 7.0)))) : 0.011219512195121951) + ((fabs(var_chaste_interface__cell__V + 10.0) > 0.001) ? (((var_chaste_interface__cell__V + 10.0) * 0.00060999999999999997) / (exp(0.14499999999999999 * (var_chaste_interface__cell__V + 10.0)) - 1.0)) : 0.0042068965517241376)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] =  -1.0 / (1.0 / (((fabs(var_chaste_interface__cell__V + 7.0) > 0.001) ? (((var_chaste_interface__cell__V + 7.0) * 0.0013799999999999999) / (1.0 - exp( -0.123 * (var_chaste_interface__cell__V + 7.0)))) : 0.011219512195121951) + ((fabs(var_chaste_interface__cell__V + 10.0) > 0.001) ? (((var_chaste_interface__cell__V + 10.0) * 0.00060999999999999997) / (exp(0.14499999999999999 * (var_chaste_interface__cell__V + 10.0)) - 1.0)) : 0.0042068965517241376)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 1.5)) * 0.059880239520958084))) / ((fabs(var_chaste_interface__cell__V + 30.0) < 0.014556040756914121) ? 417.94625266107982 : (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__cell__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__cell__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__cell__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__cell__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] =  -1.0 / ((fabs(var_chaste_interface__cell__V + 30.0) < 0.014556040756914121) ? 417.94625266107982 : (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__cell__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__cell__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__cell__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__cell__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 1.5)) * 0.059880239520958084))) / (4.0 * ((fabs(var_chaste_interface__cell__V + 30.0) < 0.014556040756914121) ? 417.94625266107982 : (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__cell__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__cell__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__cell__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__cell__V + 30.0)) - 1.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] =  -1.0 / (4.0 * ((fabs(var_chaste_interface__cell__V + 30.0) < 0.014556040756914121) ? 417.94625266107982 : (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__cell__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__cell__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__cell__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__cell__V + 30.0)) - 1.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = ((var_chaste_interface__cell__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__cell__V) *  -0.14705882352941177)) : 0.0) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = (((var_chaste_interface__cell__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__cell__V) *  -0.14705882352941177)) : 0.0) *  -1.0) - (((var_chaste_interface__cell__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V))) : (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__cell__V + 10.66) *  -0.0900900900900901))))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = ((var_chaste_interface__cell__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__cell__V))) * 1.0 * (var_chaste_interface__cell__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__V + 79.230000000000004)))) : 0.0) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = (((var_chaste_interface__cell__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__cell__V))) * 1.0 * (var_chaste_interface__cell__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__V + 79.230000000000004)))) : 0.0) *  -1.0) - (((var_chaste_interface__cell__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__cell__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 32.0))))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = ((fabs(var_chaste_interface__cell__V + 47.130000000000003) > 0.001) ? (((var_chaste_interface__cell__V + 47.130000000000003) * 0.32000000000000001) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)))) : 3.2000000000000002) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = (((fabs(var_chaste_interface__cell__V + 47.130000000000003) > 0.001) ? (((var_chaste_interface__cell__V + 47.130000000000003) * 0.32000000000000001) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)))) : 3.2000000000000002) *  -1.0) - ((0.080000000000000002 * exp((-var_chaste_interface__cell__V) * 0.090909090909090912)) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 3.0)) * 0.066666666666666666))) / ((3.5 * exp((((-var_chaste_interface__cell__V) * 0.033333333333333333) * var_chaste_interface__cell__V) * 0.033333333333333333)) + 1.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] =  -1.0 / ((3.5 * exp((((-var_chaste_interface__cell__V) * 0.033333333333333333) * var_chaste_interface__cell__V) * 0.033333333333333333)) + 1.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 3.0)) * 0.066666666666666666))) / ((9.0 / (1.0 + exp(-((-(var_chaste_interface__cell__V + 3.0)) * 0.066666666666666666)))) + 0.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] =  -1.0 / ((9.0 / (1.0 + exp(-((-(var_chaste_interface__cell__V + 3.0)) * 0.066666666666666666)))) + 0.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001))) / ((20.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001))) + 20.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] =  -1.0 / ((20.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001))) + 20.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001))) / ((3000.0 / (1.0 + exp((var_chaste_interface__cell__V + 60.0) * 0.10000000000000001))) + 30.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] =  -1.0 / ((3000.0 / (1.0 + exp((var_chaste_interface__cell__V + 60.0) * 0.10000000000000001))) + 30.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = exp(0.34999999999999998 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = exp( -0.65000000000000002 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = 1.0 / (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) * (1.0 / (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = pow(exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 1.0 + (0.1245 * exp( -0.10000000000000001 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = exp(-((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 1.0 / (1.0 + (0.20000000000000001 * exp( -0.65000000000000002 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 9.9000000000000004 + (4954.0 * exp(0.064102564099999995 * var_chaste_interface__cell__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.25)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = 1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = 1.0 / (1.0 + exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = 0.00039049421860501144 * (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) * (1.0 / (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0)) * (1.0 / (1.0 + exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = ((2.0 * fabs((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) < 0.001) ? (0.00010420416882000002 * exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144))) : ((0.0040000000000000001 * ((0.00054000000000000001 * var_chaste_interface__cell__V) * 9309.4211243716236)) * (0.00039049421860501144 * (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) * (1.0 / (exp(2.0 * ((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = (( -3.0 - ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125)))) * 1.0)) - 0.29999999999999999) - 0.00413;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = ((1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))) * 1.0) - 3.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993))) * (1.0 / ((( -440.0 + (4954.0 * exp(0.064102564099999995 * var_chaste_interface__cell__V))) * (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.25))))) + 450.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) * (1.0 / ((( -440.0 + (4954.0 * exp(0.064102564099999995 * var_chaste_interface__cell__V))) * (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.25))))) + 450.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = (( -0.0019499999999999999 - ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.33333333333333331)))) * 0.33333333333333331)) - 0.0022399999999999998) - 0.00010576271186440676;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = (((((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.33333333333333331)))) * 0.33333333333333331) * ((1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))) * (1.0 / (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))))))) * 1.84375) * ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) * (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) - 0.0019499999999999999;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.33333333333333331)))) * 0.33333333333333331;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = (((0.024167999999999999 * ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.33333333333333331)))) * 0.33333333333333331)) * (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125)))) * ((1.0 / (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))))) * 9651.1122906915025)) * ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) * (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = (-((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) * (1.0 / ((( -440.0 + (4954.0 * exp(0.064102564099999995 * var_chaste_interface__cell__V))) * (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.25))))) + 450.0)))) - (((((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.33333333333333331)))) * 0.33333333333333331) * ((1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))) * (1.0 / (1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) + 0.0) * 0.125))))))) * 1.84375) * ((1.0 - (1.0 / (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993)))) * (1.0 + exp(((-var_chaste_interface__cell__V) +  -40.0) * 0.088339222614840993))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0)) * (1.0 / (1.0 + exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = 1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.0) * 0.044642857142857144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = 0.5 * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = exp(var_chaste_interface__cell__V * 0.075353936071760372);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = exp(var_chaste_interface__cell__V * 0.075353936071760372) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][54] = 10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][55] = 1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][56] = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][57] = 1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][58] = (((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331) * ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125))) * 1.0)) / ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125)))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][59] = 0.1245 * exp(var_chaste_interface__cell__V *  -0.0037676968035880187);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][60] = exp((-var_chaste_interface__cell__V) * 0.037676968035880186);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][61] = exp(var_chaste_interface__cell__V * 0.013186938812558065);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][62] = exp(var_chaste_interface__cell__V *  -0.024490029223322121);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][63] = 1.0 + (0.20000000000000001 * exp(var_chaste_interface__cell__V *  -0.024490029223322121));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][64] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][65] = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][66] = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][67] = (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][68] = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][69] = (((((((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331) * ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125))) * 1.0)) / ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125)))) * 1.0)) * 0.00413) * 446.42857142857144) * ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0))) / ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][70] = ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331) + 0.0023457627118644068;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][71] = ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0)) + ((((((((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331) * ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125))) * 1.0)) / ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125)))) * 1.0)) * 0.00413) * 446.42857142857144) * ((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0))) / ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993))) / ((((10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111))) - 450.0) * (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))))) + 450.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][72] = exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0)) / (1.0 + exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][73] = exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][74] = 1.0 + exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellMahajan2008FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[75];
    
    // Lookup tables
    double (*_lookup_table_0)[75];
    
};

std::auto_ptr<CellMahajan2008FromCellMLBackwardEuler_LookupTables> CellMahajan2008FromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellMahajan2008FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 400.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_amplitude =  -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellMahajan2008FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[22];
    }
    
    CellMahajan2008FromCellMLBackwardEuler::CellMahajan2008FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<15>(
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellMahajan2008FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 1.0; // (c,IKr__ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (c,IKs__ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 1.0; // (c,Ito__ScaleFactorIto) [dimensionless]
        this->mParameters[3] = 1.8; // (c,Environment__Ca_o) [mM]
        this->mParameters[4] = 5.4; // (c,Environment__K_o) [mM]
        this->mParameters[5] = 136; // (c,Environment__Na_o) [mM]
    }
    
    CellMahajan2008FromCellMLBackwardEuler::~CellMahajan2008FromCellMLBackwardEuler()
    {
    }
    
    AbstractLookupTableCollection* CellMahajan2008FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double CellMahajan2008FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[4];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[5];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[6];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[7];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[8];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[9];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[10];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[11];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[12];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[13];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[14];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[15];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[16];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[19];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[21];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_i = rY[22];
        // Units: uM; Initial value: 0.256752008084
        
        // Lookup table indexing
        const bool _oob_0 = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
        
        const double var_reversal_potentials__ek = 26.541413816729868 * log(mParameters[4] * 0.0071428571428571426); // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 59.215000000000003))); // per_ms
        const double var_INaK__xiNaK = (((1.5 * (1.0 / (1.0 + _lt_0_row[59] + (0.036499999999999998 * ((exp(mParameters[5] * 0.01485884101040119) - 1.0) * 0.14285714285714285) * _lt_0_row[60]))) * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 12.0)) * mParameters[4]) / (mParameters[4] + 1.5); // nA_per_nF
        const double var_Ca__csm = var_chaste_interface__Ca__Ca_submem * 0.001; // mM
        const double var_INaCa__jNaCa = (0.83999999999999997 * (1.0 / (1.0 + pow(0.29999999999999999 / var_chaste_interface__Ca__Ca_submem, 3.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3] * _lt_0_row[61]) - (pow(mParameters[5], 3.0) * var_Ca__csm * _lt_0_row[62]))) / (_lt_0_row[63] * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_Ca__csm)) + (1860.8670000000004 * mParameters[3] * (1.0 + (var_Ca__csm * 277.77777777777777))) + (0.0035999999999999999 * pow(mParameters[5], 3.0) * (1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0))) + ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3]) + (pow(mParameters[5], 3.0) * var_Ca__csm)))); // uM_per_ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__rxa = (fabs(var_chaste_interface__cell__V * 0.075353936071760372) < 0.001) ? ((((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) * 13.270706908364934) : ((var_chaste_interface__cell__V * ((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) / _lt_0_row[53]); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_INa__xina = var_INa__gna * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * (var_chaste_interface__cell__V - (26.541413816729868 * log(mParameters[5] / var_chaste_interface__Na__Na_i))); // nA_per_nF
        const double var_cell__Itotal = -(var_INa__xina + (0.29999999999999999 * sqrt(mParameters[4] * 0.18518518518518517) * (var_IK1__aki / (var_IK1__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[0] * var_IKr__gkr * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__IKr__xr * _lt_0_row[50] * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[1] * 0.1386 * (1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_chaste_interface__Ca__Ca_i, 3.0)))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (26.541413816729868 * log((mParameters[4] + (0.018329999999999999 * mParameters[5])) / (140.0 + (0.018329999999999999 * var_chaste_interface__Na__Na_i)))))) + ((mParameters[2] * 0.11 * var_chaste_interface__Ito__xtos * (var_chaste_interface__Ito__ytos + _lt_0_row[51]) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (0.040000000000000001 * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof * (var_chaste_interface__cell__V - var_reversal_potentials__ek))) + var_INaCa__xiNaCa + (var_ICaL__jca * 16.0) + var_INaK__xiNaK + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // nA_per_nF
        const double var_chaste_interface__i_ionic = (var_cell__Itotal) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = -(var_chaste_interface__i_ionic);
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellMahajan2008FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__Environment__time, const double rCurrentGuess[15], double rResidual[15])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        
        double var_chaste_interface__Ca__Ca_NSR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_dyad = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_submem = rCurrentGuess[3];
        double var_chaste_interface__Ca__tropi = rCurrentGuess[4];
        double var_chaste_interface__Ca__trops = rCurrentGuess[5];
        double var_chaste_interface__ICaL__c1 = rCurrentGuess[6];
        double var_chaste_interface__ICaL__c2 = rCurrentGuess[7];
        double var_chaste_interface__ICaL__xi1ba = rCurrentGuess[8];
        double var_chaste_interface__ICaL__xi1ca = rCurrentGuess[9];
        double var_chaste_interface__ICaL__xi2ba = rCurrentGuess[10];
        double var_chaste_interface__ICaL__xi2ca = rCurrentGuess[11];
        double var_chaste_interface__Irel__Ca_JSR = rCurrentGuess[12];
        double var_chaste_interface__Irel__xir = rCurrentGuess[13];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[14];
        
        // Lookup table indexing
        const bool _oob_0 = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__Environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
        
        const double var_INaK__xiNaK = (((1.5 * (1.0 / (1.0 + _lt_0_row[59] + (0.036499999999999998 * ((exp(mParameters[5] * 0.01485884101040119) - 1.0) * 0.14285714285714285) * _lt_0_row[60]))) * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 12.0)) * mParameters[4]) / (mParameters[4] + 1.5); // nA_per_nF
        const double var_Ca__csm = var_chaste_interface__Ca__Ca_submem * 0.001; // mM
        const double var_INaCa__jNaCa = (0.83999999999999997 * (1.0 / (1.0 + pow(0.29999999999999999 / var_chaste_interface__Ca__Ca_submem, 3.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3] * _lt_0_row[61]) - (pow(mParameters[5], 3.0) * var_Ca__csm * _lt_0_row[62]))) / (_lt_0_row[63] * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_Ca__csm)) + (1860.8670000000004 * mParameters[3] * (1.0 + (var_Ca__csm * 277.77777777777777))) + (0.0035999999999999999 * pow(mParameters[5], 3.0) * (1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0))) + ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3]) + (pow(mParameters[5], 3.0) * var_Ca__csm)))); // uM_per_ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__rxa = (fabs(var_chaste_interface__cell__V * 0.075353936071760372) < 0.001) ? ((((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) * 13.270706908364934) : ((var_chaste_interface__cell__V * ((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) / _lt_0_row[53]); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_INa__xina = var_INa__gna * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * (var_chaste_interface__cell__V - (26.541413816729868 * log(mParameters[5] / var_chaste_interface__Na__Na_i))); // nA_per_nF
        const double var_ICaL__fca = 1.0 / (1.0 + pow(3.0 / var_chaste_interface__Ca__Ca_dyad, 3.0)); // dimensionless
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__tau_ca = (78.032899999999998 / (1.0 + pow(var_chaste_interface__Ca__Ca_dyad * 0.16410525711191157, 4.0))) + 0.10000000000000001; // ms
        const double var_ICaL__tauca = ((_lt_0_row[54] - var_ICaL__tau_ca) * _lt_0_row[55]) + var_ICaL__tau_ca; // ms
        const double var_ICaL__k6 = (var_ICaL__fca * _lt_0_row[56]) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k5 = _lt_0_row[57] / var_ICaL__tauca; // per_ms
        const double var_ICaL__k4 = (((_lt_0_row[58] * var_ICaL__k1) * 9651.1122906915025) * var_ICaL__k5) / var_ICaL__k6; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_Ileak_Iup_Ixfer__jleak = ((2.069e-05 * var_chaste_interface__Ca__Ca_NSR * var_chaste_interface__Ca__Ca_NSR) / ((var_chaste_interface__Ca__Ca_NSR * var_chaste_interface__Ca__Ca_NSR) + 2500.0)) * ((var_chaste_interface__Ca__Ca_NSR * 16.667000000000002) - var_chaste_interface__Ca__Ca_i); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = (0.40000000000000002 * var_chaste_interface__Ca__Ca_i * var_chaste_interface__Ca__Ca_i) / ((var_chaste_interface__Ca__Ca_i * var_chaste_interface__Ca__Ca_i) + 0.25); // uM_per_ms
        const double var_Ca__dCa_JSR = ((-var_chaste_interface__Irel__xir) + var_Ileak_Iup_Ixfer__jup) - var_Ileak_Iup_Ixfer__jleak; // uM_per_ms
        const double var_Irel__Qr = (var_chaste_interface__Ca__Ca_NSR * (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0)) ? ((var_chaste_interface__Irel__Ca_JSR - 50.0) * 1.0) : (var_chaste_interface__Irel__Ca_JSR >= 90.0) ? ((11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) +  -977.00000000000011) : 0.0)) * 0.011111111111111112; // uM_per_ms
        const double var_Ca__xbi = (0.0327 * var_chaste_interface__Ca__Ca_i * (70.0 - var_chaste_interface__Ca__tropi)) - (0.019599999999999999 * var_chaste_interface__Ca__tropi); // uM_per_ms
        const double var_Ca__xbs = (0.0327 * var_chaste_interface__Ca__Ca_submem * (70.0 - var_chaste_interface__Ca__trops)) - (0.019599999999999999 * var_chaste_interface__Ca__trops); // uM_per_ms
        const double var_Ca__jd = (var_chaste_interface__Ca__Ca_submem - var_chaste_interface__Ca__Ca_i) * 0.25; // uM_per_ms
        const double d_dt_chaste_interface__ICaL__c1 = ((_lt_0_row[64] * var_chaste_interface__ICaL__c2) + (0.000103615 * var_chaste_interface__ICaL__xi1ca) + (0.0022399999999999998 * var_chaste_interface__ICaL__xi1ba) + (3.0 * var_ICaL__po)) - ((_lt_0_row[65] + var_ICaL__k1 + 0.30413000000000001) * var_chaste_interface__ICaL__c1); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__c2 = ((_lt_0_row[65] * var_chaste_interface__ICaL__c1) + (var_ICaL__k5 * var_chaste_interface__ICaL__xi2ca) + (_lt_0_row[66] * var_chaste_interface__ICaL__xi2ba)) - ((var_ICaL__k6 + _lt_0_row[67] + _lt_0_row[64]) * var_chaste_interface__ICaL__c2); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ca = ((var_ICaL__k1 * var_chaste_interface__ICaL__c1) + (var_ICaL__k4 * var_chaste_interface__ICaL__xi2ca) + (var_ICaL__s1 * var_ICaL__po)) - ((_lt_0_row[68] + 0.000103615 + ((((var_ICaL__s1 * 0.29999999999999999) * 0.33333333333333331) * 0.000103615) / var_ICaL__k1)) * var_chaste_interface__ICaL__xi1ca); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ba = ((0.00413 * var_chaste_interface__ICaL__c1) + (_lt_0_row[69] * var_chaste_interface__ICaL__xi2ba) + (0.0019499999999999999 * var_ICaL__po)) - (_lt_0_row[70] * var_chaste_interface__ICaL__xi1ba); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ca = ((_lt_0_row[68] * var_chaste_interface__ICaL__xi1ca) + (var_ICaL__k6 * var_chaste_interface__ICaL__c2)) - ((var_ICaL__k5 + var_ICaL__k4) * var_chaste_interface__ICaL__xi2ca); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ba = ((_lt_0_row[68] * var_chaste_interface__ICaL__xi1ba) + (_lt_0_row[67] * var_chaste_interface__ICaL__c2)) - (_lt_0_row[71] * var_chaste_interface__ICaL__xi2ba); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Ca_JSR = (var_chaste_interface__Ca__Ca_NSR - var_chaste_interface__Irel__Ca_JSR) * 0.01; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Irel__xir = ((2.5807899999999999 * var_ICaL__po * fabs(var_ICaL__rxa) * _lt_0_row[72]) * var_Irel__Qr) - ((var_chaste_interface__Irel__xir * (1.0 - ((30.0 * var_Ca__dCa_JSR) / var_chaste_interface__Ca__Ca_NSR))) * 0.033333333333333333); // 'micromolar per_ms per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = (-(var_INa__xina + (3.0 * var_INaK__xiNaK) + (3.0 * var_INaCa__xiNaCa))) * 0.000125; // 'millimolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_dyad = (((((var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * 26841.799999999999) * 1.0) * _lt_0_row[73]) / _lt_0_row[74]) + (var_ICaL__po * 9000.0 * fabs(var_ICaL__rxa))) - ((var_chaste_interface__Ca__Ca_dyad - var_chaste_interface__Ca__Ca_submem) * 2.0); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_submem = (1.0 / (1.0 + (168.0 / ((7.0 + var_chaste_interface__Ca__Ca_submem) * (7.0 + var_chaste_interface__Ca__Ca_submem))) + (28.199999999999999 / ((0.59999999999999998 + var_chaste_interface__Ca__Ca_submem) * (0.59999999999999998 + var_chaste_interface__Ca__Ca_submem))) + (4.5 / ((0.29999999999999999 + var_chaste_interface__Ca__Ca_submem) * (0.29999999999999999 + var_chaste_interface__Ca__Ca_submem))) + (546.0 / ((13.0 + var_chaste_interface__Ca__Ca_submem) * (13.0 + var_chaste_interface__Ca__Ca_submem))))) * ((50.0 * (((var_chaste_interface__Irel__xir - var_Ca__jd) - var_ICaL__jca) + var_INaCa__jNaCa)) - var_Ca__xbs); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (168.0 / ((7.0 + var_chaste_interface__Ca__Ca_i) * (7.0 + var_chaste_interface__Ca__Ca_i))) + (28.199999999999999 / ((0.59999999999999998 + var_chaste_interface__Ca__Ca_i) * (0.59999999999999998 + var_chaste_interface__Ca__Ca_i))) + (4.5 / ((0.29999999999999999 + var_chaste_interface__Ca__Ca_i) * (0.29999999999999999 + var_chaste_interface__Ca__Ca_i))) + (546.0 / ((13.0 + var_chaste_interface__Ca__Ca_i) * (13.0 + var_chaste_interface__Ca__Ca_i))))) * (((var_Ca__jd - var_Ileak_Iup_Ixfer__jup) + var_Ileak_Iup_Ixfer__jleak) - var_Ca__xbi); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_Ca__dCa_JSR; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__tropi = var_Ca__xbi; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__trops = var_Ca__xbs; // 'micromolar per millisecond'
        
        rResidual[6] = rCurrentGuess[6] - rY[4] - mDt*d_dt_chaste_interface__ICaL__c1;
        rResidual[7] = rCurrentGuess[7] - rY[5] - mDt*d_dt_chaste_interface__ICaL__c2;
        rResidual[9] = rCurrentGuess[9] - rY[6] - mDt*d_dt_chaste_interface__ICaL__xi1ca;
        rResidual[8] = rCurrentGuess[8] - rY[7] - mDt*d_dt_chaste_interface__ICaL__xi1ba;
        rResidual[11] = rCurrentGuess[11] - rY[8] - mDt*d_dt_chaste_interface__ICaL__xi2ca;
        rResidual[10] = rCurrentGuess[10] - rY[9] - mDt*d_dt_chaste_interface__ICaL__xi2ba;
        rResidual[12] = rCurrentGuess[12] - rY[17] - mDt*d_dt_chaste_interface__Irel__Ca_JSR;
        rResidual[13] = rCurrentGuess[13] - rY[18] - mDt*d_dt_chaste_interface__Irel__xir;
        rResidual[14] = rCurrentGuess[14] - rY[19] - mDt*d_dt_chaste_interface__Na__Na_i;
        rResidual[1] = rCurrentGuess[1] - rY[20] - mDt*d_dt_chaste_interface__Ca__Ca_dyad;
        rResidual[3] = rCurrentGuess[3] - rY[21] - mDt*d_dt_chaste_interface__Ca__Ca_submem;
        rResidual[2] = rCurrentGuess[2] - rY[22] - mDt*d_dt_chaste_interface__Ca__Ca_i;
        rResidual[0] = rCurrentGuess[0] - rY[23] - mDt*d_dt_chaste_interface__Ca__Ca_NSR;
        rResidual[4] = rCurrentGuess[4] - rY[24] - mDt*d_dt_chaste_interface__Ca__tropi;
        rResidual[5] = rCurrentGuess[5] - rY[25] - mDt*d_dt_chaste_interface__Ca__trops;
    }
    
    void CellMahajan2008FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__Environment__time, const double rCurrentGuess[15], double rJacobian[15][15])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        
        double var_chaste_interface__Ca__Ca_NSR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_dyad = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_submem = rCurrentGuess[3];
        double var_chaste_interface__Ca__tropi = rCurrentGuess[4];
        double var_chaste_interface__Ca__trops = rCurrentGuess[5];
        double var_chaste_interface__ICaL__c1 = rCurrentGuess[6];
        double var_chaste_interface__ICaL__c2 = rCurrentGuess[7];
        double var_chaste_interface__ICaL__xi1ba = rCurrentGuess[8];
        double var_chaste_interface__ICaL__xi1ca = rCurrentGuess[9];
        double var_chaste_interface__ICaL__xi2ba = rCurrentGuess[10];
        double var_chaste_interface__ICaL__xi2ca = rCurrentGuess[11];
        double var_chaste_interface__Irel__Ca_JSR = rCurrentGuess[12];
        double var_chaste_interface__Irel__xir = rCurrentGuess[13];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[14];
        
        const double var_chaste_interface__Environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__Environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
        
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_t3 = pow(var_chaste_interface__INa__xm, 2.0) * var_chaste_interface__INa__xm; // dimensionless
        const double var_t5 = ((var_INa__gna * var_chaste_interface__INa__xh) * var_chaste_interface__INa__xj) * var_t3; // dimensionless
        const double var_t90 = pow(var_chaste_interface__Ca__Ca_i, 2.0); // dimensionless
        const double var_t91 = var_t90 * var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t123 = pow(var_chaste_interface__Ca__Ca_submem, 2.0); // dimensionless
        const double var_t127 = 1.0 + ((0.027 / var_t123) / var_chaste_interface__Ca__Ca_submem); // dimensionless
        const double var_t128 = 1.0 / var_t127; // dimensionless
        const double var_t129 = 6.7199999999999998 * var_t128; // dimensionless
        const double var_t130 = pow(var_chaste_interface__Na__Na_i, 2.0); // dimensionless
        const double var_t131 = var_t130 * var_chaste_interface__Na__Na_i; // dimensionless
        const double var_t132 = var_t131 * mParameters[3]; // dimensionless
        const double var_t145 = pow(mParameters[5], 2.0) * mParameters[5]; // dimensionless
        const double var_t146 = var_t145 * var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t165 = 1860.8670000000004 * mParameters[3]; // dimensionless
        const double var_t171 = 0.0035999999999999999 * var_t145; // dimensionless
        const double var_t177 = (((((1.3 * var_t131) + (669.921875 * var_chaste_interface__Ca__Ca_submem)) + (var_t165 * (1.0 + ((0.001 * var_chaste_interface__Ca__Ca_submem) * 277.77777777777777)))) + (var_t171 * (1.0 + (var_t131 * 0.00053738391835633597)))) + var_t132) + (0.001 * var_t146); // dimensionless
        const double var_t178 = 1.0 / var_t177; // dimensionless
        const double var_t184 = (var_t132 * _lt_0_row[20]) - ((0.001 * var_t146) * _lt_0_row[21]); // dimensionless
        const double var_t195 = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_t211 = ((0.001 * var_chaste_interface__Ca__Ca_submem) * _lt_0_row[22]) - (0.34100000000000003 * mParameters[3]); // dimensionless
        const double var_t248 = exp(0.01485884101 * mParameters[5]) - 1.0; // dimensionless
        const double var_t252 = _lt_0_row[26] + ((0.0052142857139999997 * var_t248) * _lt_0_row[27]); // dimensionless
        const double var_t257 = var_chaste_interface__Na__Na_i + 12.0; // dimensionless
        const double var_t259 = (1.0 / var_t257) * mParameters[4]; // dimensionless
        const double var_t261 = 1.0 / (mParameters[4] + 1.5); // dimensionless
        const double var_t276 = 1.0 / var_chaste_interface__Na__Na_i; // dimensionless
        const double var_t290 = 0.052102084410000006 * var_t211; // dimensionless
        const double var_t295 = ((((0.00054000000000000001 * var_chaste_interface__cell__V) * 9309.4211243716236) * 0.00039049421860501144) * var_t211) * _lt_0_row[23]; // dimensionless
        const double var_t297 = ((2.0 * fabs((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) < 0.001) ? (2.0 * var_t290) : (4.0 * var_t295); // dimensionless
        const double var_t336 = _lt_0_row[28] * var_t178; // dimensionless
        const double var_t337 = (mParameters[3] * _lt_0_row[20]) * var_t336; // dimensionless
        const double var_t340 = var_t184 * _lt_0_row[28]; // dimensionless
        const double var_t342 = 1.0 / pow(var_t177, 2.0); // dimensionless
        const double var_t347 = ((1.3 * var_t130) + ((var_t171 * var_t130) * 0.00053738391835633597)) + (var_t130 * mParameters[3]); // dimensionless
        const double var_t352 = 1.5 / var_t252; // dimensionless
        const double var_t363 = 1.0 / pow(var_t127, 2.0); // dimensionless
        const double var_t369 = (var_t336 * 0.027) / pow(var_t123, 2.0); // dimensionless
        const double var_t377 = (669921.875 + (var_t165 * 277.77777777777777)) + var_t145; // dimensionless
        const double var_t603 = pow(var_chaste_interface__Ca__Ca_dyad, 2.0); // dimensionless
        const double var_t604 = var_t603 * var_chaste_interface__Ca__Ca_dyad; // dimensionless
        const double var_t607 = 1.0 + (27.0 / var_t604); // dimensionless
        const double var_t608 = 1.0 / var_t607; // dimensionless
        const double var_t616 = 1.0 / pow(var_t607, 2.0); // dimensionless
        const double var_t618 = pow(var_t603, 2.0); // dimensionless
        const double var_t619 = 1.0 / var_t618; // dimensionless
        const double var_t622 = (((0.072503999999999999 * var_t616) * 27.0) * var_t619) * var_chaste_interface__ICaL__c1; // dimensionless
        const double var_t638 = 1.0 + (var_t618 * 0.00072525373756441517); // dimensionless
        const double var_t640 = 78.032899999999998 / var_t638; // dimensionless
        const double var_t641 = _lt_0_row[29] - var_t640; // dimensionless
        const double var_t650 = ((var_t641 * _lt_0_row[30]) + var_t640) + 0.10000000000000001; // dimensionless
        const double var_t651 = 1.0 / var_t650; // dimensionless
        const double var_t658 = 1.0 / pow(var_t650, 2.0); // dimensionless
        const double var_t689 = var_t608 * _lt_0_row[31]; // dimensionless
        const double var_t701 = var_t689 * var_t651; // dimensionless
        const double var_t704 = _lt_0_row[32] * var_t651; // dimensionless
        const double var_t708 = 78.032899999999998 / pow(var_t638, 2.0); // dimensionless
        const double var_t709 = var_t604 * 0.00072525373756441517; // dimensionless
        const double var_t713 = ((var_t708 * var_t709) * _lt_0_row[30]) - (var_t708 * var_t709); // dimensionless
        const double var_t715 = ((4.0 * (_lt_0_row[32] * var_t658)) * var_chaste_interface__ICaL__xi2ca) * var_t713; // dimensionless
        const double var_t716 = var_t616 * _lt_0_row[31]; // dimensionless
        const double var_t781 = 0.018268800000000002 * var_t608; // dimensionless
        const double var_t1131 = 2.5807899999999999 * var_t195; // dimensionless
        const double var_t1133 = Signum(var_t290) * 0.00054000000000000001; // dimensionless
        const double var_t1140 = Signum(var_t295); // dimensionless
        const double var_t1153 = _lt_0_row[33] * var_chaste_interface__Ca__Ca_NSR; // dimensionless
        const double var_t1156 = (50.0 < var_chaste_interface__Irel__Ca_JSR) && (var_chaste_interface__Irel__Ca_JSR < 90.0); // dimensionless
        const double var_t1158 = 90.0 <= var_chaste_interface__Irel__Ca_JSR; // dimensionless
        const double var_t1163 = var_t1156 ? (var_chaste_interface__Irel__Ca_JSR - 50.0) : var_t1158 ? (((11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) +  -927.00000000000011) - 50.0) : 0.0; // dimensionless
        const double var_t1165 = var_t1163 * 0.011111111111111112; // dimensionless
        const double var_t1166 = var_t1153 * var_t1165; // dimensionless
        const double var_t1172 = ((2.0 * fabs((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) < 0.001) ? (2.0 * fabs(var_t290)) : (4.0 * fabs(var_t295)); // dimensionless
        const double var_t1192 = ((2.5807899999999999 * var_t1172) * _lt_0_row[34]) * var_t1166; // dimensionless
        const double var_t1196 = (var_t1156 ? 1.0 : var_t1158 ? 11.300000000000001 : 0.0) * 0.011111111111111112; // dimensionless
        const double var_t1201 = var_t90 + 0.25; // dimensionless
        const double var_t1202 = 1.0 / var_t1201; // dimensionless
        const double var_t1203 = (0.40000000000000002 * var_t90) * var_t1202; // dimensionless
        const double var_t1204 = pow(var_chaste_interface__Ca__Ca_NSR, 2.0); // dimensionless
        const double var_t1205 = 2.069e-05 * var_t1204; // dimensionless
        const double var_t1207 = var_t1204 + 2500.0; // dimensionless
        const double var_t1208 = 1.0 / var_t1207; // dimensionless
        const double var_t1210 = (16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) - var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1211 = var_t1208 * var_t1210; // dimensionless
        const double var_t1212 = var_t1205 * var_t1211; // dimensionless
        const double var_t1214 = 30.0 * (((-var_chaste_interface__Irel__xir) + var_t1203) - var_t1212); // dimensionless
        const double var_t1215 = 1.0 / var_chaste_interface__Ca__Ca_NSR; // dimensionless
        const double var_t1230 = ((2.0 * fabs((var_chaste_interface__cell__V * 96.485341500000004) * 0.00039049421860501144)) < 0.001) ? (((0.002 * var_t1133) * 96.485341500000004) * _lt_0_row[22]) : (((((0.0040000000000000001 * var_t1140) * 0.00054000000000000001) * var_chaste_interface__cell__V) * 9309.4211243716236) * _lt_0_row[35]); // dimensionless
        const double var_t1236 = (0.80000000000000004 * var_chaste_interface__Ca__Ca_i) * var_t1202; // dimensionless
        const double var_t1241 = (0.80000000000000004 * var_t91) / pow(var_t1201, 2.0); // dimensionless
        const double var_t1242 = var_t1205 * var_t1208; // dimensionless
        const double var_t1243 = (var_t1236 - var_t1241) + var_t1242; // dimensionless
        const double var_t1260 = ((( -4.138e-05 * var_chaste_interface__Ca__Ca_NSR) * var_t1211) + ((((4.138e-05 * var_t1204) * var_chaste_interface__Ca__Ca_NSR) / pow(var_t1207, 2.0)) * var_t1210)) - (16.667000000000002 * var_t1242); // dimensionless
        const double var_t1299 = var_t195 * var_chaste_interface__Ca__Ca_NSR; // dimensionless
        const double var_t1324 = (var_t1172 * 26841.799999999999) * _lt_0_row[36]; // dimensionless
        const double var_t1327 = ((-((var_chaste_interface__Ca__Ca_NSR * var_t1163) * 0.011111111111111112)) * var_t1324) - (9000.0 * var_t1172); // dimensionless
        const double var_t1340 = 7.0 + var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t1341 = pow(var_t1340, 2.0); // dimensionless
        const double var_t1345 = 0.59999999999999998 + var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t1346 = pow(var_t1345, 2.0); // dimensionless
        const double var_t1350 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t1351 = pow(var_t1350, 2.0); // dimensionless
        const double var_t1355 = 13.0 + var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t1356 = pow(var_t1355, 2.0); // dimensionless
        const double var_t1359 = (((1.0 + (168.0 / var_t1341)) + (28.199999999999999 / var_t1346)) + (4.5 / var_t1351)) + (546.0 / var_t1356); // dimensionless
        const double var_t1360 = 1.0 / var_t1359; // dimensionless
        const double var_t1361 = var_ICaL__gca * var_t195; // dimensionless
        const double var_t1364 = 0.83999999999999997 * var_t128; // dimensionless
        const double var_t1375 = ((50.0 * var_t1360) * var_ICaL__gca) * var_t297; // dimensionless
        const double var_t1380 = var_t1364 * var_t184; // dimensionless
        const double var_t1381 = _lt_0_row[28] * var_t342; // dimensionless
        const double var_t1392 = (var_chaste_interface__Ca__Ca_submem - var_chaste_interface__Ca__Ca_i) * 0.25; // dimensionless
        const double var_t1399 = 0.0327 * var_chaste_interface__Ca__Ca_submem; // dimensionless
        const double var_t1400 = 70.0 - var_chaste_interface__Ca__trops; // dimensionless
        const double var_t1434 = 0.0327 * var_t1400; // dimensionless
        const double var_t1440 = var_t1399 + 0.019599999999999999; // dimensionless
        const double var_t1442 = 7.0 + var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1443 = pow(var_t1442, 2.0); // dimensionless
        const double var_t1446 = 0.59999999999999998 + var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1447 = pow(var_t1446, 2.0); // dimensionless
        const double var_t1450 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1451 = pow(var_t1450, 2.0); // dimensionless
        const double var_t1454 = 13.0 + var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1455 = pow(var_t1454, 2.0); // dimensionless
        const double var_t1458 = (((1.0 + (168.0 / var_t1443)) + (28.199999999999999 / var_t1447)) + (4.5 / var_t1451)) + (546.0 / var_t1455); // dimensionless
        const double var_t1459 = 1.0 / var_t1458; // dimensionless
        const double var_t1463 = 0.0327 * var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t1464 = 70.0 - var_chaste_interface__Ca__tropi; // dimensionless
        const double var_t1483 = 0.0327 * var_t1464; // dimensionless
        const double var_t1488 = var_t1463 + 0.019599999999999999; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__Environment__dt * var_t1260);
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = -(var_chaste_interface__Environment__dt * var_t1243);
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = 0.0;
        rJacobian[0][13] = -(var_chaste_interface__Environment__dt *  -1.0);
        rJacobian[0][14] = 0.0;
        rJacobian[1][0] = -(var_chaste_interface__Environment__dt * (((var_t195 * var_t1163) * 0.011111111111111112) * var_t1324));
        rJacobian[1][1] = 1.0 - (var_chaste_interface__Environment__dt *  -2.0);
        rJacobian[1][2] = 0.0;
        rJacobian[1][3] = -(var_chaste_interface__Environment__dt * ((((((var_t1299 * var_t1165) * var_t1230) * 26841.799999999999) * _lt_0_row[36]) + ((var_t195 * 9000.0) * var_t1230)) + 2.0));
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][7] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][8] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][9] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][10] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][11] = -(var_chaste_interface__Environment__dt * var_t1327);
        rJacobian[1][12] = -(var_chaste_interface__Environment__dt * ((var_t1299 * var_t1196) * var_t1324));
        rJacobian[1][13] = 0.0;
        rJacobian[1][14] = 0.0;
        rJacobian[2][0] = -(var_chaste_interface__Environment__dt * ((-var_t1459) * var_t1260));
        rJacobian[2][1] = 0.0;
        rJacobian[2][2] = 1.0 - (var_chaste_interface__Environment__dt * (((( -2.0 / pow(var_t1458, 2.0)) * ((((var_t1392 - var_t1203) + var_t1212) - (var_t1463 * var_t1464)) + (0.019599999999999999 * var_chaste_interface__Ca__tropi))) * ((((( -168.0 / var_t1443) / var_t1442) - ((28.199999999999999 / var_t1447) / var_t1446)) - ((4.5 / var_t1451) / var_t1450)) - ((546.0 / var_t1455) / var_t1454))) + (var_t1459 * (((( -0.25 - var_t1236) + var_t1241) - var_t1242) - var_t1483))));
        rJacobian[2][3] = -(var_chaste_interface__Environment__dt * (var_t1459 * 0.25));
        rJacobian[2][4] = -(var_chaste_interface__Environment__dt * (var_t1459 * var_t1488));
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[2][13] = 0.0;
        rJacobian[2][14] = 0.0;
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(var_chaste_interface__Environment__dt * ((50.0 * var_t1360) * 0.25));
        rJacobian[3][3] = 1.0 - (var_chaste_interface__Environment__dt * (((( -2.0 / pow(var_t1359, 2.0)) * ((((((50.0 * var_chaste_interface__Irel__xir) - (50.0 * var_t1392)) - ((50.0 * var_t1361) * var_t297)) + (((50.0 * var_t1364) * var_t340) * var_t178)) - (var_t1399 * var_t1400)) + (0.019599999999999999 * var_chaste_interface__Ca__trops))) * ((((( -168.0 / var_t1341) / var_t1340) - ((28.199999999999999 / var_t1346) / var_t1345)) - ((4.5 / var_t1351) / var_t1350)) - ((546.0 / var_t1356) / var_t1355))) + (var_t1360 * ((((( -12.5 - ((50.0 * var_t1361) * _lt_0_row[37])) + (((126.0 * var_t363) * var_t184) * var_t369)) - (((((0.050000000000000003 * var_t1364) * var_t145) * _lt_0_row[21]) * _lt_0_row[28]) * var_t178)) - (((0.050000000000000003 * var_t1380) * var_t1381) * var_t377)) - var_t1434))));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = -(var_chaste_interface__Environment__dt * (var_t1360 * var_t1440));
        rJacobian[3][6] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][7] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][8] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][9] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][10] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][11] = -(var_chaste_interface__Environment__dt * var_t1375);
        rJacobian[3][12] = 0.0;
        rJacobian[3][13] = -(var_chaste_interface__Environment__dt * (50.0 * var_t1360));
        rJacobian[3][14] = -(var_chaste_interface__Environment__dt * (var_t1360 * ((((150.0 * var_t1364) * var_t130) * var_t337) - (((150.0 * var_t1380) * var_t1381) * var_t347))));
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = -(var_chaste_interface__Environment__dt * var_t1483);
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t1488));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = 0.0;
        rJacobian[4][12] = 0.0;
        rJacobian[4][13] = 0.0;
        rJacobian[4][14] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = -(var_chaste_interface__Environment__dt * var_t1434);
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t1440));
        rJacobian[5][6] = 0.0;
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[5][13] = 0.0;
        rJacobian[5][14] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = -(var_chaste_interface__Environment__dt * (-var_t622));
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (var_chaste_interface__Environment__dt * (_lt_0_row[38] - (0.024167999999999999 * var_t608)));
        rJacobian[6][7] = -(var_chaste_interface__Environment__dt * _lt_0_row[39]);
        rJacobian[6][8] = -(var_chaste_interface__Environment__dt *  -2.99776);
        rJacobian[6][9] = -(var_chaste_interface__Environment__dt *  -2.999896385);
        rJacobian[6][10] = -(var_chaste_interface__Environment__dt *  -3.0);
        rJacobian[6][11] = -(var_chaste_interface__Environment__dt *  -3.0);
        rJacobian[6][12] = 0.0;
        rJacobian[6][13] = 0.0;
        rJacobian[6][14] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = -(var_chaste_interface__Environment__dt * ((-var_t715) - ((((((3.0 * var_t716) * var_t651) * 27.0) * var_t619) - (((4.0 * var_t689) * var_t658) * var_t713)) * var_chaste_interface__ICaL__c2)));
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = -(var_chaste_interface__Environment__dt * _lt_0_row[40]);
        rJacobian[7][7] = 1.0 - (var_chaste_interface__Environment__dt * (((-var_t701) - _lt_0_row[41]) - _lt_0_row[42]));
        rJacobian[7][8] = 0.0;
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = -(var_chaste_interface__Environment__dt * _lt_0_row[43]);
        rJacobian[7][11] = -(var_chaste_interface__Environment__dt * var_t704);
        rJacobian[7][12] = 0.0;
        rJacobian[7][13] = 0.0;
        rJacobian[7][14] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = -(var_chaste_interface__Environment__dt * 0.0021800000000000001);
        rJacobian[8][7] = -(var_chaste_interface__Environment__dt *  -0.0019499999999999999);
        rJacobian[8][8] = 1.0 - (var_chaste_interface__Environment__dt * _lt_0_row[44]);
        rJacobian[8][9] = -(var_chaste_interface__Environment__dt *  -0.0019499999999999999);
        rJacobian[8][10] = -(var_chaste_interface__Environment__dt * _lt_0_row[45]);
        rJacobian[8][11] = -(var_chaste_interface__Environment__dt *  -0.0019499999999999999);
        rJacobian[8][12] = 0.0;
        rJacobian[8][13] = 0.0;
        rJacobian[8][14] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = -(var_chaste_interface__Environment__dt * (var_t622 + ((((0.054806399999999998 * var_t616) * var_t195) * 27.0) * var_t619)));
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = 0.0;
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = -(var_chaste_interface__Environment__dt * (0.0058992000000000003 * var_t608));
        rJacobian[9][7] = -(var_chaste_interface__Environment__dt * (-var_t781));
        rJacobian[9][8] = -(var_chaste_interface__Environment__dt * (-var_t781));
        rJacobian[9][9] = 1.0 - (var_chaste_interface__Environment__dt * ((((-var_t781) - _lt_0_row[46]) - 0.000103615) - 7.8323473681792485e-06));
        rJacobian[9][10] = -(var_chaste_interface__Environment__dt * (-var_t781));
        rJacobian[9][11] = -(var_chaste_interface__Environment__dt * (_lt_0_row[47] - var_t781));
        rJacobian[9][12] = 0.0;
        rJacobian[9][13] = 0.0;
        rJacobian[9][14] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = -(var_chaste_interface__Environment__dt * _lt_0_row[41]);
        rJacobian[10][8] = -(var_chaste_interface__Environment__dt * _lt_0_row[46]);
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (var_chaste_interface__Environment__dt * _lt_0_row[48]);
        rJacobian[10][11] = 0.0;
        rJacobian[10][12] = 0.0;
        rJacobian[10][13] = 0.0;
        rJacobian[10][14] = 0.0;
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = -(var_chaste_interface__Environment__dt * (((((((3.0 * var_t716) * var_t651) * var_chaste_interface__ICaL__c2) * 27.0) * var_t619) - (((4.0 * var_t689) * (var_t658 * var_chaste_interface__ICaL__c2)) * var_t713)) + var_t715));
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = -(var_chaste_interface__Environment__dt * var_t701);
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = -(var_chaste_interface__Environment__dt * _lt_0_row[46]);
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (var_chaste_interface__Environment__dt * ((-var_t704) - _lt_0_row[47]));
        rJacobian[11][12] = 0.0;
        rJacobian[11][13] = 0.0;
        rJacobian[11][14] = 0.0;
        rJacobian[12][0] = -(var_chaste_interface__Environment__dt * 0.01);
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = 0.0;
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (var_chaste_interface__Environment__dt *  -0.01);
        rJacobian[12][13] = 0.0;
        rJacobian[12][14] = 0.0;
        rJacobian[13][0] = -(var_chaste_interface__Environment__dt * ((((var_t1131 * var_t1172) * _lt_0_row[49]) * var_t1165) - ((var_chaste_interface__Irel__xir * ((( -30.0 * var_t1260) * var_t1215) + (var_t1214 / var_t1204))) * 0.033333333333333333)));
        rJacobian[13][1] = 0.0;
        rJacobian[13][2] = -(var_chaste_interface__Environment__dt * ((var_chaste_interface__Irel__xir * var_t1243) * var_t1215));
        rJacobian[13][3] = -(var_chaste_interface__Environment__dt * (((var_t1131 * var_t1230) * _lt_0_row[34]) * var_t1166));
        rJacobian[13][4] = 0.0;
        rJacobian[13][5] = 0.0;
        rJacobian[13][6] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][7] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][8] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][9] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][10] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][11] = -(var_chaste_interface__Environment__dt * (-var_t1192));
        rJacobian[13][12] = -(var_chaste_interface__Environment__dt * ((((var_t1131 * var_t1172) * _lt_0_row[34]) * var_t1153) * var_t1196));
        rJacobian[13][13] = 1.0 - (var_chaste_interface__Environment__dt * (((-(1.0 - (var_t1214 * var_t1215))) * 0.033333333333333333) - (var_chaste_interface__Irel__xir * var_t1215)));
        rJacobian[13][14] = 0.0;
        rJacobian[14][0] = 0.0;
        rJacobian[14][1] = 0.0;
        rJacobian[14][2] = 0.0;
        rJacobian[14][3] = -(var_chaste_interface__Environment__dt * ((0.001 * ((( -9.0 * (((6.7199999999999998 * var_t363) * var_t184) * var_t369)) + (0.0030000000000000001 * (((var_t129 * var_t145) * _lt_0_row[21]) * var_t336))) + (3.0 * ((((0.001 * var_t129) * var_t340) * var_t342) * var_t377)))) * 0.125));
        rJacobian[14][4] = 0.0;
        rJacobian[14][5] = 0.0;
        rJacobian[14][6] = 0.0;
        rJacobian[14][7] = 0.0;
        rJacobian[14][8] = 0.0;
        rJacobian[14][9] = 0.0;
        rJacobian[14][10] = 0.0;
        rJacobian[14][11] = 0.0;
        rJacobian[14][12] = 0.0;
        rJacobian[14][13] = 0.0;
        rJacobian[14][14] = 1.0 - (var_chaste_interface__Environment__dt * ((0.001 * (((((-(((var_t5 * 0.086173421482889187) * 308.0) * var_t276)) - (3.0 * ((var_t352 * var_t259) * var_t261))) + (3.0 * ((((var_t352 * var_chaste_interface__Na__Na_i) / pow(var_t257, 2.0)) * mParameters[4]) * var_t261))) - (9.0 * (((6.7199999999999998 * var_t128) * var_t130) * var_t337))) + (3.0 * ((((3.0 * var_t129) * var_t340) * var_t342) * var_t347)))) * 0.125));
    }
    
    void CellMahajan2008FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[4];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[5];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[6];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[7];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[8];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[9];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[10];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[11];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[12];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[13];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[14];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[15];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[16];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[19];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[21];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_i = rY[22];
        // Units: uM; Initial value: 0.256752008084
        
        // Lookup table indexing
        const bool _oob_0 = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__Environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
        
        const double var_reversal_potentials__ek = 26.541413816729868 * log(mParameters[4] * 0.0071428571428571426); // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 59.215000000000003))); // per_ms
        const double var_INaK__xiNaK = (((1.5 * (1.0 / (1.0 + _lt_0_row[59] + (0.036499999999999998 * ((exp(mParameters[5] * 0.01485884101040119) - 1.0) * 0.14285714285714285) * _lt_0_row[60]))) * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 12.0)) * mParameters[4]) / (mParameters[4] + 1.5); // nA_per_nF
        const double var_Ca__csm = var_chaste_interface__Ca__Ca_submem * 0.001; // mM
        const double var_INaCa__jNaCa = (0.83999999999999997 * (1.0 / (1.0 + pow(0.29999999999999999 / var_chaste_interface__Ca__Ca_submem, 3.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3] * _lt_0_row[61]) - (pow(mParameters[5], 3.0) * var_Ca__csm * _lt_0_row[62]))) / (_lt_0_row[63] * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_Ca__csm)) + (1860.8670000000004 * mParameters[3] * (1.0 + (var_Ca__csm * 277.77777777777777))) + (0.0035999999999999999 * pow(mParameters[5], 3.0) * (1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0))) + ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3]) + (pow(mParameters[5], 3.0) * var_Ca__csm)))); // uM_per_ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__rxa = (fabs(var_chaste_interface__cell__V * 0.075353936071760372) < 0.001) ? ((((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) * 13.270706908364934) : ((var_chaste_interface__cell__V * ((var_Ca__csm * _lt_0_row[52]) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) / _lt_0_row[53]); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_INa__xina = var_INa__gna * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * (var_chaste_interface__cell__V - (26.541413816729868 * log(mParameters[5] / var_chaste_interface__Na__Na_i))); // nA_per_nF
        const double var_cell__Itotal = -(var_INa__xina + (0.29999999999999999 * sqrt(mParameters[4] * 0.18518518518518517) * (var_IK1__aki / (var_IK1__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[0] * var_IKr__gkr * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__IKr__xr * _lt_0_row[50] * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[1] * 0.1386 * (1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_chaste_interface__Ca__Ca_i, 3.0)))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (26.541413816729868 * log((mParameters[4] + (0.018329999999999999 * mParameters[5])) / (140.0 + (0.018329999999999999 * var_chaste_interface__Na__Na_i)))))) + ((mParameters[2] * 0.11 * var_chaste_interface__Ito__xtos * (var_chaste_interface__Ito__ytos + _lt_0_row[51]) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (0.040000000000000001 * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof * (var_chaste_interface__cell__V - var_reversal_potentials__ek))) + var_INaCa__xiNaCa + (var_ICaL__jca * 16.0) + var_INaK__xiNaK + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // nA_per_nF
        const double d_dt_chaste_interface__cell__V = var_cell__Itotal; // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__cell__V;
    }
    
    void CellMahajan2008FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__IKr__xr = rY[10];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[11];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[12];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[13];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[14];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[15];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[16];
        // Units: dimensionless; Initial value: 0.993331326442
        
        const double var_chaste_interface__Environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__Environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellMahajan2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
        
        
        rY[10] = (var_chaste_interface__IKr__xr + (_lt_0_row[0] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[1] * var_chaste_interface__Environment__dt));
        rY[11] = (var_chaste_interface__IKs__xs1 + (_lt_0_row[2] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[3] * var_chaste_interface__Environment__dt));
        rY[12] = (var_chaste_interface__IKs__xs2 + (_lt_0_row[4] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[5] * var_chaste_interface__Environment__dt));
        rY[2] = (var_chaste_interface__INa__xh + (_lt_0_row[6] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[7] * var_chaste_interface__Environment__dt));
        rY[3] = (var_chaste_interface__INa__xj + (_lt_0_row[8] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[9] * var_chaste_interface__Environment__dt));
        rY[1] = (var_chaste_interface__INa__xm + (_lt_0_row[10] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[11] * var_chaste_interface__Environment__dt));
        rY[15] = (var_chaste_interface__Ito__xtof + (_lt_0_row[12] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[13] * var_chaste_interface__Environment__dt));
        rY[13] = (var_chaste_interface__Ito__xtos + (_lt_0_row[14] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[15] * var_chaste_interface__Environment__dt));
        rY[16] = (var_chaste_interface__Ito__ytof + (_lt_0_row[16] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[17] * var_chaste_interface__Environment__dt));
        rY[14] = (var_chaste_interface__Ito__ytos + (_lt_0_row[18] * var_chaste_interface__Environment__dt)) / (1.0 - (_lt_0_row[19] * var_chaste_interface__Environment__dt));
        
        double _guess[15] = {rY[23],rY[20],rY[22],rY[21],rY[24],rY[25],rY[4],rY[5],rY[7],rY[6],rY[9],rY[8],rY[17],rY[18],rY[19]};
        CardiacNewtonSolver<15,CellMahajan2008FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<15,CellMahajan2008FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__Environment__time, _guess);
        rY[23] = _guess[0];
        rY[20] = _guess[1];
        rY[22] = _guess[2];
        rY[21] = _guess[3];
        rY[24] = _guess[4];
        rY[25] = _guess[5];
        rY[4] = _guess[6];
        rY[5] = _guess[7];
        rY[7] = _guess[8];
        rY[6] = _guess[9];
        rY[9] = _guess[10];
        rY[8] = _guess[11];
        rY[17] = _guess[12];
        rY[18] = _guess[13];
        rY[19] = _guess[14];
    }
    
template<>
void OdeSystemInformation<CellMahajan2008FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "mahajan_shiferaw_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.169816169406);

    this->mVariableNames.push_back("INa__xm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    this->mVariableNames.push_back("INa__xh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    this->mVariableNames.push_back("INa__xj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000018211252);

    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000033616596);

    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    this->mVariableNames.push_back("Irel__Ca_JSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    this->mVariableNames.push_back("Ca__Ca_dyad");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    this->mVariableNames.push_back("Ca__Ca_submem");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.256752008084);

    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellMahajan2008FromCellMLBackwardEuler)
