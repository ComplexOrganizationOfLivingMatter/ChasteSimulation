//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hodgkin_huxley_squid_axon_model_1952_modified
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:16:03 2016
//! 
//! <autogenerated>

#include "HodgkinHuxley1952Opt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellHodgkinHuxley1952FromCellMLOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellHodgkinHuxley1952FromCellMLOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellHodgkinHuxley1952FromCellMLOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<6; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellHodgkinHuxley1952FromCellMLOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellHodgkinHuxley1952FromCellMLOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellHodgkinHuxley1952FromCellMLOpt_LookupTables(const CellHodgkinHuxley1952FromCellMLOpt_LookupTables&);
    CellHodgkinHuxley1952FromCellMLOpt_LookupTables& operator= (const CellHodgkinHuxley1952FromCellMLOpt_LookupTables&);
    CellHodgkinHuxley1952FromCellMLOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 6;
        mTableMins[0] = -100.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 99.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellHodgkinHuxley1952FromCellMLOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][6];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = ((var_chaste_interface__membrane__V <  -49.999989999999997) && (var_chaste_interface__membrane__V >  -50.000010000000003)) ? 1.0 : (( -0.10000000000000001 * (var_chaste_interface__membrane__V + 50.0)) / (exp((-(var_chaste_interface__membrane__V + 50.0)) * 0.10000000000000001) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 4.0 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.055555555555555552);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = 0.070000000000000007 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.050000000000000003);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = 1.0 / (exp((-(var_chaste_interface__membrane__V + 45.0)) * 0.10000000000000001) + 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = ((var_chaste_interface__membrane__V <  -64.999899999999997) && (var_chaste_interface__membrane__V >  -65.000100000000003)) ? 0.10000000000000001 : (( -0.01 * (var_chaste_interface__membrane__V + 65.0)) / (exp((-(var_chaste_interface__membrane__V + 65.0)) * 0.10000000000000001) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 0.125 * exp((var_chaste_interface__membrane__V + 75.0) * 0.012500000000000001);
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellHodgkinHuxley1952FromCellMLOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[6];
    
    // Lookup tables
    double (*_lookup_table_0)[6];
    
};

std::auto_ptr<CellHodgkinHuxley1952FromCellMLOpt_LookupTables> CellHodgkinHuxley1952FromCellMLOpt_LookupTables::mpInstance;

    CellHodgkinHuxley1952FromCellMLOpt::CellHodgkinHuxley1952FromCellMLOpt(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                4,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellHodgkinHuxley1952FromCellMLOpt>::Instance();
        Init();

    }
    
    CellHodgkinHuxley1952FromCellMLOpt::~CellHodgkinHuxley1952FromCellMLOpt()
    {
    }
    
    AbstractLookupTableCollection* CellHodgkinHuxley1952FromCellMLOpt::GetLookupTableCollection()
    {
        return CellHodgkinHuxley1952FromCellMLOpt_LookupTables::Instance();
    }
    
    double CellHodgkinHuxley1952FromCellMLOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        
        const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
        const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
        const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_sodium_channel__i_Na + var_potassium_channel__i_K + (0.29999999999999999 * (var_chaste_interface__membrane__V -  -64.387)); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellHodgkinHuxley1952FromCellMLOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        
        // Lookup table indexing
        const bool _oob_0 = CellHodgkinHuxley1952FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellHodgkinHuxley1952FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double d_dt_chaste_interface__sodium_channel_m_gate__m = (_lt_0_row[0] * (1.0 - var_chaste_interface__sodium_channel_m_gate__m)) - (_lt_0_row[1] * var_chaste_interface__sodium_channel_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_h_gate__h = (_lt_0_row[2] * (1.0 - var_chaste_interface__sodium_channel_h_gate__h)) - (_lt_0_row[3] * var_chaste_interface__sodium_channel_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__potassium_channel_n_gate__n = (_lt_0_row[4] * (1.0 - var_chaste_interface__potassium_channel_n_gate__n)) - (_lt_0_row[5] * var_chaste_interface__potassium_channel_n_gate__n); // per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__Cm = 1.0; // microF_per_cm2
            const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
            const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
            const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = (-(var_chaste_interface__membrane__i_Stim + var_sodium_channel__i_Na + var_potassium_channel__i_K + (0.29999999999999999 * (var_chaste_interface__membrane__V -  -64.387)))) / var_membrane__Cm; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__sodium_channel_m_gate__m;
        rDY[2] = d_dt_chaste_interface__sodium_channel_h_gate__h;
        rDY[3] = d_dt_chaste_interface__potassium_channel_n_gate__n;
    }
    
template<>
void OdeSystemInformation<CellHodgkinHuxley1952FromCellMLOpt>::Initialise(void)
{
    this->mSystemName = "hodgkin_huxley_squid_axon_model_1952_modified";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-75);

    this->mVariableNames.push_back("sodium_channel_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05);

    this->mVariableNames.push_back("sodium_channel_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6);

    this->mVariableNames.push_back("potassium_channel_n_gate__n");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.325);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellHodgkinHuxley1952FromCellMLOpt)
