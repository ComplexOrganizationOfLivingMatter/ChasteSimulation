#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: tentusscher_model_2006_epi
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:13:04 2016
//! 
//! <autogenerated>

#include "TenTusscher2006EpiCvodeOpt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<106; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables(const CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables&);
    CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables& operator= (const CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables&);
    CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane__V";
        mNumberOfTables[0] = 106;
        mTableMins[0] = -250.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 549.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][106];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 1.0 / (exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = pow((1.0 + (0.1245 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07)))) + (0.035299999999999998 * exp(-((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = ( -0.00046605194074318104 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07))) - (0.0013214163460429152 * exp(-((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 1.0 / (1.0 + (0.10000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 0.013101861787960915 * exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = pow(1.0 + (0.10000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = pow(1.0 + exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = 1000.0 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = 1.0 / ((1.0 + (0.1245 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07)))) + (0.035299999999999998 * exp(-((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 1000.0 * exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = 1.0 / (1.0 + exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = 1.0 / (1.0 + exp( -3.7142857142857144 - (0.14285714285714285 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = 1.0 / (1.0 + exp((0.041666666666666664 * var_chaste_interface__membrane__V) + 3.6666666666666665));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = 1.0 / pow(1.0 + exp( -6.2967884820000002 - (0.1107419712 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) * (1.0 / (exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = -(1.0 / (((1.3999999999999999 * ((1.3999999999999999 / (1.0 + exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)))) + 0.25)) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0)))) + (1.0 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = ((0.1333333333 / pow(1.0 + exp( -1.0666666659999999 - (0.1333333333 * var_chaste_interface__membrane__V)), 2.0)) * exp( -1.0666666659999999 - (0.1333333333 * var_chaste_interface__membrane__V))) * (1.0 / (((1.3999999999999999 * ((1.3999999999999999 / (1.0 + exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)))) + 0.25)) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0)))) + (1.0 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 1.0 / (1.0 + exp( -1.0666666659999999 - (0.1333333333 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = pow(((1.3999999999999999 * ((1.3999999999999999 / (1.0 + exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)))) + 0.25)) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0)))) + (1.0 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V)))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = ((((0.15076923079999999 / pow(1.0 + exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)), 2.0)) * exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V))) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0)))) - (((0.28000000000000003 * ((1.3999999999999999 / (1.0 + exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)))) + 0.25)) / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0), 2.0)) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 1.0))) + ((0.050000000000000003 / pow(1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V)), 2.0)) * exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = -(1.0 / (((562.0 * exp( -0.0041666666666666666 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (31.0 / (1.0 + exp(2.5 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (80.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = (( -0.09571428572 / pow(1.0 + exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 5.0), 2.0)) * exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 5.0)) * (1.0 / (((562.0 * exp( -0.0041666666666666666 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (31.0 / (1.0 + exp(2.5 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (80.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = (0.67000000000000004 / (1.0 + exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 5.0))) + 0.33000000000000002;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = pow(((562.0 * exp( -0.0041666666666666666 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (31.0 / (1.0 + exp(2.5 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (80.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0)))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = (((562.0 * (( -0.0083333333333333332 * var_chaste_interface__membrane__V) - 0.22500000000000001)) * exp( -0.0041666666666666666 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + ((3.1000000000000001 / pow(1.0 + exp(2.5 - (0.10000000000000001 * var_chaste_interface__membrane__V)), 2.0)) * exp(2.5 - (0.10000000000000001 * var_chaste_interface__membrane__V)))) - (8.0 * ((1.0 / pow(1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0), 2.0)) * exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = -(1.0 / ((((1102.5 * exp( -0.0044444444444444444 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (200.0 / (1.0 + exp(1.3 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (180.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0))))) + 20.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = (( -0.14285714285714285 / pow(1.0 + exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 2.8571428571428572), 2.0)) * exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 2.8571428571428572)) * (1.0 / ((((1102.5 * exp( -0.0044444444444444444 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (200.0 / (1.0 + exp(1.3 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (180.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0))))) + 20.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / (1.0 + exp((0.14285714285714285 * var_chaste_interface__membrane__V) + 2.8571428571428572));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = pow((((1102.5 * exp( -0.0044444444444444444 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + (200.0 / (1.0 + exp(1.3 - (0.10000000000000001 * var_chaste_interface__membrane__V))))) + (180.0 * (1.0 / (1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0))))) + 20.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = (((1102.5 * (( -0.0088888888888888889 * var_chaste_interface__membrane__V) - 0.23999999999999999)) * exp( -0.0044444444444444444 * pow(var_chaste_interface__membrane__V + 27.0, 2.0))) + ((20.0 / pow(1.0 + exp(1.3 - (0.10000000000000001 * var_chaste_interface__membrane__V)), 2.0)) * exp(1.3 - (0.10000000000000001 * var_chaste_interface__membrane__V)))) - (18.0 * ((1.0 / pow(1.0 + exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0), 2.0)) * exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 3.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = 1.0 / pow(exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = -(((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = ( -0.269179004 * (((1.0 / pow(1.0 + exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005), 2.0)) / (1.0 + exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005))) * exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005))) * (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = 1.0 / pow(1.0 + exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = ((var_chaste_interface__membrane__V <  -40.0) ? ( -0.0083823529409999993 * exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999)) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) + ((var_chaste_interface__membrane__V <=  -40.0) ? ((0.21329999999999999 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (108035.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : ( -40.0 < var_chaste_interface__membrane__V) ? ((0.009018018018 / pow(0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)), 2.0)) * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)) : NAN);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = -(((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = ( -0.269179004 * (((1.0 / pow(1.0 + exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005), 2.0)) / (1.0 + exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005))) * exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005))) * (((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = ((var_chaste_interface__membrane__V <  -40.0) ? (((((( -6214.6031999999996 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (3.0508668000000001e-07 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999)))) + ((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999))))) - ((((0.311 * (( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / pow(1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999), 2.0)) * exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999))) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) + ((var_chaste_interface__membrane__V <=  -40.0) ? ((( -0.00025500479999999997 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001))) + (((0.003340272 * exp( -0.01052 * var_chaste_interface__membrane__V)) / pow(1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001), 2.0)) * exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001))) : ( -40.0 < var_chaste_interface__membrane__V) ? (((0.034200000000000001 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002))) + (((0.059999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / pow(1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002), 2.0)) * exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002))) : NAN);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = -((1.0 + exp( -12.0 - (0.20000000000000001 * var_chaste_interface__membrane__V))) * (1.0 / ((0.10000000000000001 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0))) + (0.10000000000000001 / (1.0 + exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = (((0.22148394239999999 / pow(1.0 + exp( -6.2967884820000002 - (0.1107419712 * var_chaste_interface__membrane__V)), 2.0)) / (1.0 + exp( -6.2967884820000002 - (0.1107419712 * var_chaste_interface__membrane__V)))) * exp( -6.2967884820000002 - (0.1107419712 * var_chaste_interface__membrane__V))) * ((1.0 + exp( -12.0 - (0.20000000000000001 * var_chaste_interface__membrane__V))) * (1.0 / ((0.10000000000000001 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0))) + (0.10000000000000001 / (1.0 + exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = exp( -12.0 - (0.20000000000000001 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = 1.0 / ((0.10000000000000001 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0))) + (0.10000000000000001 / (1.0 + exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = 1.0 + exp( -12.0 - (0.20000000000000001 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = pow((0.10000000000000001 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0))) + (0.10000000000000001 / (1.0 + exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = (( -0.02 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0), 2.0)) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 7.0)) - ((0.00050000000000000001 / pow(1.0 + exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25), 2.0)) * exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = 0.0146 * (1.0 / (1.0 + exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = ((5.2910052910052912e-05 / pow(1.0 + exp( -3.7142857142857144 - (0.14285714285714285 * var_chaste_interface__membrane__V)), 2.0)) * exp( -3.7142857142857144 - (0.14285714285714285 * var_chaste_interface__membrane__V))) * ((1.0 + exp( -4.5 - (0.10000000000000001 * var_chaste_interface__membrane__V))) * (1.0 + exp((0.086956521740000001 * var_chaste_interface__membrane__V) + 2.6086956520000002)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = exp( -4.5 - (0.10000000000000001 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = 1.0 + exp((0.086956521740000001 * var_chaste_interface__membrane__V) + 2.6086956520000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = 1.0 + exp( -4.5 - (0.10000000000000001 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][54] = exp((0.086956521740000001 * var_chaste_interface__membrane__V) + 2.6086956520000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][55] =  -0.00037037037037037035 * ((1.0 + exp( -4.5 - (0.10000000000000001 * var_chaste_interface__membrane__V))) * (1.0 + exp((0.086956521740000001 * var_chaste_interface__membrane__V) + 2.6086956520000002)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][56] = (( -0.01240079365 / pow(1.0 + exp((0.041666666666666664 * var_chaste_interface__membrane__V) + 3.6666666666666665), 2.0)) * exp((0.041666666666666664 * var_chaste_interface__membrane__V) + 3.6666666666666665)) * ((1.0 + exp( -3.0 - (0.050000000000000003 * var_chaste_interface__membrane__V))) * (1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) - 3.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][57] = exp( -3.0 - (0.050000000000000003 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][58] = 1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) - 3.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][59] = 1.0 + exp( -3.0 - (0.050000000000000003 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][60] = exp((0.050000000000000003 * var_chaste_interface__membrane__V) - 3.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][61] =  -0.29761904760000002 * ((1.0 + exp( -3.0 - (0.050000000000000003 * var_chaste_interface__membrane__V))) * (1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) - 3.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][62] = ((0.071428571428571425 / pow(1.0 + exp( -0.35714285714285715 - (0.071428571428571425 * var_chaste_interface__membrane__V)), 2.0)) * exp( -0.35714285714285715 - (0.071428571428571425 * var_chaste_interface__membrane__V))) * (1.0 / (((1400.0 * (1.0 / pow(1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 0.5))) * (1.0 / (1.0 + exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335)))) + 80.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][63] = 1.0 / (1.0 + exp( -0.35714285714285715 - (0.071428571428571425 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][64] = pow(((1400.0 * (1.0 / pow(1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 0.5))) * (1.0 / (1.0 + exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335)))) + 80.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][65] = ((((116.66666666666667 / pow(1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 0.5)) / (1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)))) * (1.0 / (1.0 + exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335)))) * exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V))) - (((93.333333333333329 * (1.0 / pow(1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 0.5))) / pow(1.0 + exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335), 2.0)) * exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][66] = -(1.0 / (((1400.0 * (1.0 / pow(1.0 + exp(0.83333333333333337 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 0.5))) * (1.0 / (1.0 + exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335)))) + 80.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][67] = 3.0 * (1000.0 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][68] = ((0.16666666666666666 / pow(1.0 + exp(3.3333333333333335 - (0.16666666666666666 * var_chaste_interface__membrane__V)), 2.0)) * exp(3.3333333333333335 - (0.16666666666666666 * var_chaste_interface__membrane__V))) * (1.0 / ((9.5 * exp( -0.00055555555555555556 * pow(40.0 + var_chaste_interface__membrane__V, 2.0))) + 0.80000000000000004));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][69] = 1.0 / (1.0 + exp(3.3333333333333335 - (0.16666666666666666 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][70] = pow((9.5 * exp( -0.00055555555555555556 * pow(40.0 + var_chaste_interface__membrane__V, 2.0))) + 0.80000000000000004, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][71] = exp( -0.00055555555555555556 * pow(40.0 + var_chaste_interface__membrane__V, 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][72] = -(1.0 / ((9.5 * exp( -0.00055555555555555556 * pow(40.0 + var_chaste_interface__membrane__V, 2.0))) + 0.80000000000000004));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][73] = (( -0.20000000000000001 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 4.0), 2.0)) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 4.0)) * (1.0 / (((85.0 * exp( -0.0031250000000000002 * pow(var_chaste_interface__membrane__V + 45.0, 2.0))) + (5.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) - 4.0)))) + 3.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][74] = 1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 4.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][75] = pow(((85.0 * exp( -0.0031250000000000002 * pow(var_chaste_interface__membrane__V + 45.0, 2.0))) + (5.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) - 4.0)))) + 3.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][76] = ((85.0 * (( -0.0062500000000000003 * var_chaste_interface__membrane__V) - 0.28125)) * exp( -0.0031250000000000002 * pow(var_chaste_interface__membrane__V + 45.0, 2.0))) - ((1.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) - 4.0), 2.0)) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) - 4.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][77] = -(1.0 / (((85.0 * exp( -0.0031250000000000002 * pow(var_chaste_interface__membrane__V + 45.0, 2.0))) + (5.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) - 4.0)))) + 3.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][78] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][79] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][80] = 1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][81] = exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][82] = exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][83] = 1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][84] = 1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][85] = 1.0 / (1.0 + exp(( -26.0 - var_chaste_interface__membrane__V) * 0.14285714285714285));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][86] = (450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][87] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 88.0) * 0.041666666666666664));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][88] = (3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][89] = 1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.071428571428571425));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][90] = ((1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][91] = 1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__membrane__V) * 0.11074197120708749), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][92] = (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][93] = 1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][94] = 1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp((-(var_chaste_interface__membrane__V + 80.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][95] = 1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][96] = 1.0 / (1.0 + exp(( -8.0 - var_chaste_interface__membrane__V) * 0.13333333333333333));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][97] = (((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][98] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.14285714285714285));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][99] = (1102.5 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))) + 20.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][100] = (0.67000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.14285714285714285))) + 0.33000000000000002;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][101] = (562.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][102] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.20000000000000001));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][103] = (85.0 * exp((-pow(var_chaste_interface__membrane__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__membrane__V - 20.0) * 0.20000000000000001))) + 3.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][104] = 1.0 / (1.0 + exp((20.0 - var_chaste_interface__membrane__V) * 0.16666666666666666));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][105] = (9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004;
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[106];
    
    // Lookup tables
    double (*_lookup_table_0)[106];
    
};

std::auto_ptr<CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables> CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellTenTusscher2006EpiFromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                0.0
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellTenTusscher2006EpiFromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 13);
    }
    
    CellTenTusscher2006EpiFromCellMLCvodeOpt::CellTenTusscher2006EpiFromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                19,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellTenTusscher2006EpiFromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        NV_Ith_S(this->mParameters, 0) = 1.0; // (c,rapid_time_dependent_potassium_current__ScaleFactorGkr) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (c,slow_time_dependent_potassium_current__ScaleFactorGks) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 1.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
        NV_Ith_S(this->mParameters, 3) = 2; // (c,calcium_dynamics__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 5.4; // (c,potassium_dynamics__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 140; // (c,sodium_dynamics__Na_o) [millimolar]
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellTenTusscher2006EpiFromCellMLCvodeOpt::~CellTenTusscher2006EpiFromCellMLCvodeOpt()
    {
    }
    
    AbstractLookupTableCollection* CellTenTusscher2006EpiFromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double CellTenTusscher2006EpiFromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = NV_Ith_S(mParameters, 2) * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = NV_Ith_S(mParameters, 0) * 0.153 * sqrt(NV_Ith_S(mParameters, 4) * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = NV_Ith_S(mParameters, 1) * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[78]) - NV_Ith_S(mParameters, 3))) / _lt_0_row[79]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * NV_Ith_S(mParameters, 4)) / (NV_Ith_S(mParameters, 4) + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[80]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((_lt_0_row[81] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * NV_Ith_S(mParameters, 3)) - (_lt_0_row[82] * pow(NV_Ith_S(mParameters, 5), 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(NV_Ith_S(mParameters, 5), 3.0)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3)) * _lt_0_row[83]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[84]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__i_ionic = (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellTenTusscher2006EpiFromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = NV_Ith_S(mParameters, 2) * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = NV_Ith_S(mParameters, 0) * 0.153 * sqrt(NV_Ith_S(mParameters, 4) * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = NV_Ith_S(mParameters, 1) * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[78]) - NV_Ith_S(mParameters, 3))) / _lt_0_row[79]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * NV_Ith_S(mParameters, 4)) / (NV_Ith_S(mParameters, 4) + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[80]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((_lt_0_row[81] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * NV_Ith_S(mParameters, 3)) - (_lt_0_row[82] * pow(NV_Ith_S(mParameters, 5), 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(NV_Ith_S(mParameters, 5), 3.0)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3)) * _lt_0_row[83]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[84]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_calcium_dynamics__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__calcium_dynamics__Ca_SR, 2.0))); // dimensionless
        const double var_calcium_dynamics__k1 = 0.14999999999999999 / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__i_rel = 0.10199999999999999 * ((var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0) * var_chaste_interface__calcium_dynamics__R_prime) / (0.059999999999999998 + (var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0)))) * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = 0.0063749999999999996 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_leak = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        const double d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = (_lt_0_row[85] - var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1) / _lt_0_row[86]; // per_millisecond
        const double d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = (_lt_0_row[87] - var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) / _lt_0_row[88]; // per_millisecond
        const double d_dt_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = (_lt_0_row[89] - var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) / _lt_0_row[90]; // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (_lt_0_row[91] - var_chaste_interface__fast_sodium_current_m_gate__m) / _lt_0_row[92]; // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = (_lt_0_row[93] - var_chaste_interface__fast_sodium_current_h_gate__h) / _lt_0_row[94]; // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (_lt_0_row[93] - var_chaste_interface__fast_sodium_current_j_gate__j) / _lt_0_row[95]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_d_gate__d = (_lt_0_row[96] - var_chaste_interface__L_type_Ca_current_d_gate__d) / _lt_0_row[97]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_gate__f = (_lt_0_row[98] - var_chaste_interface__L_type_Ca_current_f_gate__f) / _lt_0_row[99]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f2_gate__f2 = (_lt_0_row[100] - var_chaste_interface__L_type_Ca_current_f2_gate__f2) / _lt_0_row[101]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass = (((0.59999999999999998 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) / ((80.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 2.0); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_current_s_gate__s = (_lt_0_row[102] - var_chaste_interface__transient_outward_current_s_gate__s) / _lt_0_row[103]; // per_millisecond
        const double d_dt_chaste_interface__transient_outward_current_r_gate__r = (_lt_0_row[104] - var_chaste_interface__transient_outward_current_r_gate__r) / _lt_0_row[105]; // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__calcium_dynamics__Ca_i + 0.001, 2.0)))) * (((((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_calcium_dynamics__i_xfer) - ((((var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) - (2.0 * var_sodium_calcium_exchanger_current__i_NaCa)) * var_membrane__Cm) * 0.00031590674984870111)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999, 2.0)))) * (var_calcium_dynamics__i_up - (var_calcium_dynamics__i_rel + var_calcium_dynamics__i_leak)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001, 2.0)))) * (((((-var_L_type_Ca_current__i_CaL) * var_membrane__Cm) * 0.094772024954610345) + ((var_calcium_dynamics__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_calcium_dynamics__i_xfer * 0.016403999999999998) * 18288.2223847842)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__R_prime = ((-(0.044999999999999998 * var_calcium_dynamics__kcasr)) * var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__calcium_dynamics__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__sodium_dynamics__Na_i = ((-(var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + (3.0 * var_sodium_potassium_pump_current__i_NaK) + (3.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00063181349969740222) * var_membrane__Cm; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__potassium_dynamics__K_i = ((-((var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_potassium_pump_current__i_p_K + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_sodium_potassium_pump_current__i_NaK))) / (0.016403999999999998 * var_potassium_dynamics__F)) * var_membrane__Cm; // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface__membrane__V =  -1.0 * (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__L_type_Ca_current_f2_gate__f2;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__transient_outward_current_s_gate__s;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__transient_outward_current_r_gate__r;
        NV_Ith_S(rDY, 13) = d_dt_chaste_interface__calcium_dynamics__Ca_i;
        NV_Ith_S(rDY, 14) = d_dt_chaste_interface__calcium_dynamics__Ca_SR;
        NV_Ith_S(rDY, 15) = d_dt_chaste_interface__calcium_dynamics__Ca_ss;
        NV_Ith_S(rDY, 16) = d_dt_chaste_interface__calcium_dynamics__R_prime;
        NV_Ith_S(rDY, 17) = d_dt_chaste_interface__sodium_dynamics__Na_i;
        NV_Ith_S(rDY, 18) = d_dt_chaste_interface__potassium_dynamics__K_i;
    }
    
    void CellTenTusscher2006EpiFromCellMLCvodeOpt::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_t4 = 1.0 / var_chaste_interface__potassium_dynamics__K_i; // dimensionless
        const double var_t8 = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) * var_t4); // dimensionless
        const double var_t11 = exp(((0.059999999999999998 * var_chaste_interface__membrane__V) - (0.059999999999999998 * var_t8)) - 12.0); // dimensionless
        const double var_t12 = 1.0 + var_t11; // dimensionless
        const double var_t14 = 1.0 / pow(var_t12, 2.0); // dimensionless
        const double var_t15 = 5.4050000000000002 * var_t14; // dimensionless
        const double var_t16 = 1.0 / var_t12; // dimensionless
        const double var_t21 = exp(((0.00020000000000000001 * var_chaste_interface__membrane__V) - (0.00020000000000000001 * var_t8)) + 0.02); // dimensionless
        const double var_t26 = exp(((0.10000000000000001 * var_chaste_interface__membrane__V) - (0.10000000000000001 * var_t8)) - 1.0); // dimensionless
        const double var_t27 = (3.0 * var_t21) + var_t26; // dimensionless
        const double var_t31 = exp(( -0.5 * var_chaste_interface__membrane__V) + (0.5 * var_t8)); // dimensionless
        const double var_t32 = 1.0 + var_t31; // dimensionless
        const double var_t33 = 1.0 / var_t32; // dimensionless
        const double var_t35 = (0.10000000000000001 * var_t16) + (var_t27 * var_t33); // dimensionless
        const double var_t36 = 1.0 / var_t35; // dimensionless
        const double var_t37 = var_chaste_interface__membrane__V - var_t8; // dimensionless
        const double var_t38 = var_t36 * var_t37; // dimensionless
        const double var_t41 = ((0.0060000000000000001 * var_t15) * var_t38) * var_t11; // dimensionless
        const double var_t42 = 5.4050000000000002 * var_t16; // dimensionless
        const double var_t45 = (1.0 / pow(var_t35, 2.0)) * var_t37; // dimensionless
        const double var_t54 = var_t27 / pow(var_t32, 2.0); // dimensionless
        const double var_t60 = ((0.10000000000000001 * var_t42) * var_t45) * (((( -0.0060000000000000001 * var_t14) * var_t11) + (((0.00059999999999999995 * var_t21) + (0.10000000000000001 * var_t26)) * var_t33)) + ((0.5 * var_t54) * var_t31)); // dimensionless
        const double var_t61 = var_t42 * var_t36; // dimensionless
        const double var_t62 = 0.10000000000000001 * var_t61; // dimensionless
        const double var_t63 = NV_Ith_S(mParameters, 2) * 0.29399999999999998; // dimensionless
        const double var_t65 = (var_t63 * var_chaste_interface__transient_outward_current_r_gate__r) * var_chaste_interface__transient_outward_current_s_gate__s; // dimensionless
        const double var_t66 = NV_Ith_S(mParameters, 0) * 0.153; // dimensionless
        const double var_t67 = pow(NV_Ith_S(mParameters, 4), 0.5); // dimensionless
        const double var_t68 = var_t67 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1; // dimensionless
        const double var_t71 = ((0.43033148290000001 * var_t66) * var_t68) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t72 = NV_Ith_S(mParameters, 1) * 0.39200000000000002; // dimensionless
        const double var_t73 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0); // dimensionless
        const double var_t74 = var_t72 * var_t73; // dimensionless
        const double var_t75 = 3.9799999999999998e-05 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t76 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2; // dimensionless
        const double var_t78 = (var_t75 * var_t76) * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t89 = var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[0]; // dimensionless
        const double var_t91 = (0.25 * var_t89) - NV_Ith_S(mParameters, 3); // dimensionless
        const double var_t96 = (3611.8217397063131 * var_t91) * _lt_0_row[1]; // dimensionless
        const double var_t99 = var_t75 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t100 = var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t101 = var_t100 * (var_chaste_interface__membrane__V - 15.0); // dimensionless
        const double var_t102 = var_t99 * var_t101; // dimensionless
        const double var_t121 = 2.7240000000000002 * NV_Ith_S(mParameters, 4); // dimensionless
        const double var_t123 = 1.0 / (NV_Ith_S(mParameters, 4) + 1.0); // dimensionless
        const double var_t124 = var_t121 * var_t123; // dimensionless
        const double var_t125 = var_chaste_interface__sodium_dynamics__Na_i + 40.0; // dimensionless
        const double var_t126 = 1.0 / var_t125; // dimensionless
        const double var_t148 = (((var_t124 * var_chaste_interface__sodium_dynamics__Na_i) * var_t126) / _lt_0_row[2]) * _lt_0_row[3]; // dimensionless
        const double var_t149 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t151 = (14.837999999999999 * var_t149) * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t152 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t153 = var_t151 * var_t152; // dimensionless
        const double var_t161 = pow(var_chaste_interface__sodium_dynamics__Na_i, 2.0); // dimensionless
        const double var_t162 = var_t161 * var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t173 = pow(NV_Ith_S(mParameters, 5), 2.0) * NV_Ith_S(mParameters, 5); // dimensionless
        const double var_t176 = ((_lt_0_row[4] * var_t173) * var_chaste_interface__calcium_dynamics__Ca_i) * 2.5; // dimensionless
        const double var_t183 = 1.0 / (669921.875 + var_t173); // dimensionless
        const double var_t185 = 1.0 / (1.3799999999999999 + NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_t186 = var_t183 * var_t185; // dimensionless
        const double var_t190 = var_t186 * _lt_0_row[5]; // dimensionless
        const double var_t191 = (1000.0 * (((_lt_0_row[6] * var_t162) * NV_Ith_S(mParameters, 3)) - ( -0.024332029034784559 * var_t176))) * var_t190; // dimensionless
        const double var_t195 = 1000.0 * (((_lt_0_row[7] * var_t162) * NV_Ith_S(mParameters, 3)) - var_t176); // dimensionless
        const double var_t204 = ((((((var_t195 * var_t186) / _lt_0_row[8]) * 0.10000000000000001) *  -0.65000000000000002) * 96485.341499999995) * 3.8797490106562429e-07) * _lt_0_row[4]; // dimensionless
        const double var_t216 = ((0.0024414715723799999 * var_t37) / _lt_0_row[9]) * _lt_0_row[10]; // dimensionless
        const double var_t218 = var_t67 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t229 = 1.0 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i)); // dimensionless
        const double var_t234 = var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) * var_t229)); // dimensionless
        const double var_t238 = 14.837999999999999 * var_t149; // dimensionless
        const double var_t239 = 1.0 / var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t244 = var_chaste_interface__membrane__V - (26.713760659695648 * log(NV_Ith_S(mParameters, 5) * var_t239)); // dimensionless
        const double var_t260 = (var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) * (var_chaste_interface__membrane__V - 15.0); // dimensionless
        const double var_t264 = var_t76 * (var_chaste_interface__membrane__V - 15.0); // dimensionless
        const double var_t275 = var_t185 * _lt_0_row[5]; // dimensionless
        const double var_t277 = (((_lt_0_row[11] * var_t173) * 2.5) * var_t183) * var_t275; // dimensionless
        const double var_t280 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t283 = 0.0079072731552699109 * var_t280; // dimensionless
        const double var_t284 = var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t285 = 1.0 / var_t284; // dimensionless
        const double var_t286 = 0.12379999999999999 * var_t285; // dimensionless
        const double var_t287 = 0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t290 = var_t287 / pow(var_t284, 2.0); // dimensionless
        const double var_t303 = ((((var_t72 * var_t73) * 8314.4719999999998) * 0.0032129232812012176) * var_t229) * 0.029999999999999999; // dimensionless
        const double var_t307 = ((var_t121 * var_t123) * var_t126) * _lt_0_row[12]; // dimensionless
        const double var_t312 = ((var_t124 * var_chaste_interface__sodium_dynamics__Na_i) / pow(var_t125, 2.0)) * _lt_0_row[12]; // dimensionless
        const double var_t315 = ((var_t153 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t239; // dimensionless
        const double var_t318 = 0.0077469905913117379 * var_t239; // dimensionless
        const double var_t323 = (((_lt_0_row[13] * var_t161) * NV_Ith_S(mParameters, 3)) * var_t183) * var_t275; // dimensionless
        const double var_t327 = 1.0364268649036186e-05 * var_t4; // dimensionless
        const double var_t328 = var_t327 * var_t11; // dimensionless
        const double var_t353 = 2577486.3199999998 * var_t327; // dimensionless
        const double var_t357 = var_t66 * var_t68; // dimensionless
        const double var_t370 = (((((((((0.0060000000000000001 * var_t15) * var_t38) * 2577486.3199999998) * var_t328) + (((0.10000000000000001 * var_t42) * var_t45) * (((((( -0.0060000000000000001 * var_t14) * 8314.4719999999998) * 310.0) * var_t328) + ((((1546.4917919999998 * var_t327) * var_t21) + ((257748.63199999998 * var_t327) * var_t26)) * var_t33)) + (((((0.5 * var_t54) * 8314.4719999999998) * 0.0032129232812012176) * var_t4) * var_t31)))) - ((0.10000000000000001 * var_t61) * var_t353)) - (var_t65 * var_t353)) - (((((0.43033148290000001 * var_t357) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) * 8314.4719999999998) * 0.0032129232812012176) * var_t4)) - (((var_t74 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t229)) - ((37631.300272 * var_t327) * _lt_0_row[14]); // dimensionless
        const double var_t390 = _lt_0_row[15] - var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1; // dimensionless
        const double var_t417 = _lt_0_row[16] - var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t497 = _lt_0_row[17] - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t803 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0); // dimensionless
        const double var_t805 = 1.0 + (400.0 * var_t803); // dimensionless
        const double var_t806 = 1.0 / var_t805; // dimensionless
        const double var_t808 = (80.0 * var_t806) + 2.0; // dimensionless
        const double var_t809 = 1.0 / var_t808; // dimensionless
        const double var_t812 = (1.0 / pow(var_t805, 2.0)) * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t885 = var_chaste_interface__calcium_dynamics__Ca_i + 0.001; // dimensionless
        const double var_t886 = pow(var_t885, 2.0); // dimensionless
        const double var_t889 = 1.0 + (0.00020000000000000001 / var_t886); // dimensionless
        const double var_t890 = 1.0 / var_t889; // dimensionless
        const double var_t897 = (var_membrane__Cm * 60.960741282614002) * 1.0364268649036186e-05; // dimensionless
        const double var_t903 = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t905 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t908 = 1.0 + (6.2499999999999997e-08 / var_t905); // dimensionless
        const double var_t910 = 0.0063749999999999996 / var_t908; // dimensionless
        const double var_t915 = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t946 =  -0.00036000000000000002 - ((((0.012749999999999999 / pow(var_t908, 2.0)) * 6.2499999999999997e-08) / var_t905) / var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t969 = var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t970 = pow(var_t969, 2.0); // dimensionless
        const double var_t973 = 1.0 + (3.0 / var_t970); // dimensionless
        const double var_t974 = 1.0 / var_t973; // dimensionless
        const double var_t981 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0); // dimensionless
        const double var_t984 = 1.0 + (2.25 / var_t981); // dimensionless
        const double var_t987 = 2.5 - (1.5 / var_t984); // dimensionless
        const double var_t988 = 1.0 / var_t987; // dimensionless
        const double var_t989 = 0.015299999999999998 * var_t988; // dimensionless
        const double var_t990 = var_t803 * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t991 = 0.14999999999999999 * var_t988; // dimensionless
        const double var_t993 = 0.059999999999999998 + (var_t991 * var_t803); // dimensionless
        const double var_t994 = 1.0 / var_t993; // dimensionless
        const double var_t995 = var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t996 = var_t994 * var_t995; // dimensionless
        const double var_t1006 = pow(var_t987, 2.0); // dimensionless
        const double var_t1007 = 1.0 / var_t1006; // dimensionless
        const double var_t1013 = 1.0 / pow(var_t984, 2.0); // dimensionless
        const double var_t1016 = (1.0 / var_t981) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t1017 = (var_t1013 * 2.25) * var_t1016; // dimensionless
        const double var_t1024 = (1.0 / var_t1006) / var_t987; // dimensionless
        const double var_t1025 = pow(var_t803, 2.0); // dimensionless
        const double var_t1030 = 1.0 / pow(var_t993, 2.0); // dimensionless
        const double var_t1031 = var_t1030 * var_t995; // dimensionless
        const double var_t1036 = var_t990 * var_t994; // dimensionless
        const double var_t1037 = var_t989 * var_t1036; // dimensionless
        const double var_t1041 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t1046 = var_t803 * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t1055 = var_t988 * var_t803; // dimensionless
        const double var_t1059 = var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001; // dimensionless
        const double var_t1060 = pow(var_t1059, 2.0); // dimensionless
        const double var_t1063 = 1.0 + (0.0001 / var_t1060); // dimensionless
        const double var_t1064 = 1.0 / var_t1063; // dimensionless
        const double var_t1075 = (var_t99 * var_t100) * ((var_chaste_interface__membrane__V - 15.0) * 9309421124.3716221); // dimensionless
        const double var_t1079 = var_membrane__Cm * 18288.2223847842; // dimensionless
        const double var_t1080 = _lt_0_row[18] * var_t1079; // dimensionless
        const double var_t1093 = var_t1064 * 3.9799999999999998e-05; // dimensionless
        const double var_t1098 = ((0.037433890822745473 * var_t91) * _lt_0_row[1]) * var_t1079; // dimensionless
        const double var_t1101 = var_t1093 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t1117 = (var_t995 * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1119 = 2.25 * var_t1016; // dimensionless
        const double var_t1121 = ((var_t1117 * 1.5) * var_t1013) * var_t1119; // dimensionless
        const double var_t1130 = 0.015299999999999998 * var_t1055; // dimensionless
        const double var_t1131 = var_chaste_interface__calcium_dynamics__R_prime * var_t994; // dimensionless
        const double var_t1134 = ((var_t1130 * var_t1131) * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1141 = var_t1131 * var_t1117; // dimensionless
        const double var_t1179 = 0.044999999999999998 * var_t987; // dimensionless
        const double var_t1188 = 1.0364268649036186e-05 * var_membrane__Cm; // dimensionless
        const double var_t1192 = (var_t244 * 60.960741282614002) * var_t1188; // dimensionless
        const double var_t1217 = (var_t37 * 60.960741282614002) * var_t1188; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((((((var_t41 + var_t60) - var_t62) - var_t65) - var_t71) - var_t74) - ((4.0 * var_t78) * var_t96)) - ((((2.0 * var_t102) * 135.20454067538475) * var_t89) * _lt_0_row[1])) + (((((8.0 * var_t102) * 135.20454067538475) * var_t91) * _lt_0_row[34]) * _lt_0_row[0])) + var_t148) - var_t153) - 0.00029) - var_t191) + var_t204) - 0.00059199999999999997) - _lt_0_row[49]) - var_t216));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[50] - (((3.7037037037037037e-05 * var_t390) * _lt_0_row[51]) * _lt_0_row[52])) + (((3.2206119159999999e-05 * var_t390) * _lt_0_row[53]) * _lt_0_row[54]));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[56] - (((0.01488095238 * var_t417) * _lt_0_row[57]) * _lt_0_row[58])) + (((0.01488095238 * var_t417) * _lt_0_row[59]) * _lt_0_row[60]));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[62] - (((_lt_0_row[63] - var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) / _lt_0_row[64]) * _lt_0_row[65]));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[43] - (((0.20000000000000001 * var_t497) * _lt_0_row[44]) * _lt_0_row[45])) - (((var_t497 * _lt_0_row[46]) / _lt_0_row[47]) * _lt_0_row[48]));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[36] + ((_lt_0_row[37] - var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[38]));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[40] + ((_lt_0_row[37] - var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[41]));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[20] - (((_lt_0_row[21] - var_chaste_interface__L_type_Ca_current_d_gate__d) / _lt_0_row[22]) * _lt_0_row[23]));
        DENSE_ELEM(rJacobian, 8, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[30] - (((_lt_0_row[31] - var_chaste_interface__L_type_Ca_current_f_gate__f) / _lt_0_row[32]) * _lt_0_row[33]));
        DENSE_ELEM(rJacobian, 9, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[25] - (((_lt_0_row[26] - var_chaste_interface__L_type_Ca_current_f2_gate__f2) / _lt_0_row[27]) * _lt_0_row[28]));
        DENSE_ELEM(rJacobian, 11, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[73] - (((_lt_0_row[74] - var_chaste_interface__transient_outward_current_s_gate__s) / _lt_0_row[75]) * _lt_0_row[76]));
        DENSE_ELEM(rJacobian, 12, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[68] - ((((9.5 * (_lt_0_row[69] - var_chaste_interface__transient_outward_current_r_gate__r)) / _lt_0_row[70]) * ( -0.044444444444444446 - (0.0011111111111111111 * var_chaste_interface__membrane__V))) * _lt_0_row[71]));
        DENSE_ELEM(rJacobian, 13, 0) = var_chaste_interface__environment__fake_dt * ((( -0.5 * var_t890) * ((0.00059199999999999997 - (2.0 * var_t191)) + (2.0 * var_t204))) * var_t897);
        DENSE_ELEM(rJacobian, 15, 0) = var_chaste_interface__environment__fake_dt * (var_t1064 * (((((((((( -2.0 * var_t99) * var_t100) * 96485.341499999995) * 3.8797490106562429e-07) * var_t91) * _lt_0_row[1]) * var_membrane__Cm) * 18288.2223847842) - ((((1.0 * var_t1075) * 1.5052452385688096e-13) * var_chaste_interface__calcium_dynamics__Ca_ss) * var_t1080)) + (((((((4.0 * var_t1075) * 1.5052452385688096e-13) * var_t91) * _lt_0_row[34]) * var_membrane__Cm) * 18288.2223847842) * _lt_0_row[0])));
        DENSE_ELEM(rJacobian, 17, 0) = var_chaste_interface__environment__fake_dt * (((((((-var_t153) - 0.00029) + (3.0 * var_t148)) - (3.0 * var_t191)) + (3.0 * var_t204)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 18, 0) = var_chaste_interface__environment__fake_dt * ((((((((((var_t41 + var_t60) - var_t62) - var_t65) - var_t71) - var_t74) - _lt_0_row[49]) - var_t216) - (2.0 * var_t148)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.43033148290000001 * var_t66) * var_t218) * var_t37));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * (_lt_0_row[55]);
        DENSE_ELEM(rJacobian, 18, 1) = var_chaste_interface__environment__fake_dt * ((( -0.43033148290000001 * var_t66) * var_t218) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.43033148290000001 * var_t66) * var_t68) * var_t37));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (_lt_0_row[61]);
        DENSE_ELEM(rJacobian, 18, 2) = var_chaste_interface__environment__fake_dt * (( -0.43033148290000001 * var_t357) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -2.0 * var_t72) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) * var_t234));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (_lt_0_row[66]);
        DENSE_ELEM(rJacobian, 18, 3) = var_chaste_interface__environment__fake_dt * ((((( -2.0 * var_t72) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) * var_t234) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -3.0 * var_t238) * var_t152) * var_t244));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (_lt_0_row[42]);
        DENSE_ELEM(rJacobian, 17, 4) = var_chaste_interface__environment__fake_dt * ((( -3.0 * var_t238) * var_t152) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t151) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t244));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (_lt_0_row[35]);
        DENSE_ELEM(rJacobian, 17, 5) = var_chaste_interface__environment__fake_dt * (((-var_t151) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t151) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t244));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (_lt_0_row[39]);
        DENSE_ELEM(rJacobian, 17, 6) = var_chaste_interface__environment__fake_dt * (((-var_t151) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.00015919999999999999 * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t101) * var_t96));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (_lt_0_row[19]);
        DENSE_ELEM(rJacobian, 15, 7) = var_chaste_interface__environment__fake_dt * (((( -2.0 * var_t1093) * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t101) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 8) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t101) * var_t96));
        DENSE_ELEM(rJacobian, 8, 8) = var_chaste_interface__environment__fake_dt * (_lt_0_row[29]);
        DENSE_ELEM(rJacobian, 15, 8) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t101) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 9) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t260) * var_t96));
        DENSE_ELEM(rJacobian, 9, 9) = var_chaste_interface__environment__fake_dt * (_lt_0_row[24]);
        DENSE_ELEM(rJacobian, 15, 9) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t260) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 10) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t264) * var_t96));
        DENSE_ELEM(rJacobian, 10, 10) = var_chaste_interface__environment__fake_dt * (-var_t809);
        DENSE_ELEM(rJacobian, 15, 10) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t264) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 11) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t63) * var_chaste_interface__transient_outward_current_r_gate__r) * var_t37));
        DENSE_ELEM(rJacobian, 11, 11) = var_chaste_interface__environment__fake_dt * (_lt_0_row[77]);
        DENSE_ELEM(rJacobian, 18, 11) = var_chaste_interface__environment__fake_dt * (((-var_t63) * var_chaste_interface__transient_outward_current_r_gate__r) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 12) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t63) * var_chaste_interface__transient_outward_current_s_gate__s) * var_t37));
        DENSE_ELEM(rJacobian, 12, 12) = var_chaste_interface__environment__fake_dt * (_lt_0_row[72]);
        DENSE_ELEM(rJacobian, 18, 12) = var_chaste_interface__environment__fake_dt * (((-var_t63) * var_chaste_interface__transient_outward_current_s_gate__s) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 13) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((var_t277 - var_t283) - var_t286) + var_t290));
        DENSE_ELEM(rJacobian, 13, 13) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t889, 2.0)) * (((((var_t903 - var_t910) * 0.0010939999999999999) * 60.960741282614002) + var_t915) - (((0.5 * (((0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) * var_t280)))) + (var_t287 * var_t285)) - ((2.0 * var_t195) * var_t190))) * var_membrane__Cm) * 0.00063181349969740233))) * 0.00020000000000000001) / var_t886) / var_t885) + (var_t890 * ((((var_t946 * 0.0010939999999999999) * 60.960741282614002) - 0.0038) - (((0.5 * (((var_t283 + var_t286) - var_t290) + (2.0 * var_t277))) * var_membrane__Cm) * 0.00063181349969740233))));
        DENSE_ELEM(rJacobian, 14, 13) = var_chaste_interface__environment__fake_dt * ((-var_t974) * var_t946);
        DENSE_ELEM(rJacobian, 15, 13) = var_chaste_interface__environment__fake_dt * ((var_t1064 * 0.0038) * 300.0);
        DENSE_ELEM(rJacobian, 17, 13) = var_chaste_interface__environment__fake_dt * (((((_lt_0_row[67] * var_t173) * 2.5) * var_t183) * var_t275) * var_t897);
        DENSE_ELEM(rJacobian, 13, 14) = var_chaste_interface__environment__fake_dt * (((var_t890 * 0.00036000000000000002) * 0.0010939999999999999) * 60.960741282614002);
        DENSE_ELEM(rJacobian, 14, 14) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t973, 2.0)) * ((var_t910 - ((var_t989 * var_t990) * var_t996)) - var_t903)) * 3.0) / var_t970) / var_t969) + (var_t974 * ((((((((( -0.030599999999999995 * var_t1007) * var_t803) * var_chaste_interface__calcium_dynamics__R_prime) * var_t996) * 1.5) * var_t1017) + ((((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031) * 1.5) * var_t1017)) - var_t1037) - 0.00036000000000000002)));
        DENSE_ELEM(rJacobian, 15, 14) = var_chaste_interface__environment__fake_dt * (var_t1064 * (((((0.030599999999999995 * var_t1007) * var_t1036) * var_t1121) - (((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1121)) + var_t1134));
        DENSE_ELEM(rJacobian, 16, 14) = var_chaste_interface__environment__fake_dt * (((0.13500000000000001 * var_t1013) * var_t1119) * var_t1041);
        DENSE_ELEM(rJacobian, 0, 15) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((((( -1.0 * var_t78) * ((var_chaste_interface__membrane__V - 15.0) * 9309421124.3716221)) * 0.00012027221933034354) * 0.0032258064516129032) * _lt_0_row[0]) * _lt_0_row[1]));
        DENSE_ELEM(rJacobian, 10, 15) = var_chaste_interface__environment__fake_dt * ((( -480.0 * var_t812) * var_t809) + (((64000.0 * (((0.59999999999999998 * var_t806) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass)) / pow(var_t808, 2.0)) * var_t812));
        DENSE_ELEM(rJacobian, 13, 15) = var_chaste_interface__environment__fake_dt * (var_t890 * 0.0038);
        DENSE_ELEM(rJacobian, 14, 15) = var_chaste_interface__environment__fake_dt * (var_t974 * ((((( -2.0 * var_t989) * var_t1041) * var_t996) + ((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031)) + var_t1037));
        DENSE_ELEM(rJacobian, 15, 15) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t1063, 2.0)) * (((( -2.0 * var_t102) * var_t1098) + (var_t1130 * var_t1141)) - (var_t915 * 300.0))) * 0.0001) / var_t1060) / var_t1059) + (var_t1064 * ((((((( -0.5 * var_t102) * 0.037433890822745473) * var_t1080) + (((0.030599999999999995 * var_t988) * var_chaste_interface__calcium_dynamics__Ca_ss) * var_t1141)) - (((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1117)) - var_t1134) - 1.1399999999999999)));
        DENSE_ELEM(rJacobian, 16, 15) = var_chaste_interface__environment__fake_dt * ((-var_t1179) * var_chaste_interface__calcium_dynamics__R_prime);
        DENSE_ELEM(rJacobian, 14, 16) = var_chaste_interface__environment__fake_dt * (((((-var_t974) * 0.10199999999999999) * 0.14999999999999999) * var_t1055) * var_t996);
        DENSE_ELEM(rJacobian, 15, 16) = var_chaste_interface__environment__fake_dt * (((((var_t1064 * 0.10199999999999999) * var_t991) * var_t803) * var_t994) * var_t1117);
        DENSE_ELEM(rJacobian, 16, 16) = var_chaste_interface__environment__fake_dt * (((-var_t1179) * var_chaste_interface__calcium_dynamics__Ca_ss) - 0.0050000000000000001);
        DENSE_ELEM(rJacobian, 0, 17) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((-var_t303) - var_t307) + var_t312) - var_t315) - var_t318) - (3.0 * var_t323)));
        DENSE_ELEM(rJacobian, 13, 17) = var_chaste_interface__environment__fake_dt * (((((((3.0 * var_t890) * 1000.0) * _lt_0_row[7]) * var_t161) * NV_Ith_S(mParameters, 3)) * var_t190) * var_t897);
        DENSE_ELEM(rJacobian, 17, 17) = var_chaste_interface__environment__fake_dt * (((((((-var_t315) - var_t318) - (3.0 * var_t307)) + (3.0 * var_t312)) - (9.0 * var_t323)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 18, 17) = var_chaste_interface__environment__fake_dt * (((((-var_t303) + (2.0 * var_t307)) - (2.0 * var_t312)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 18) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : var_t370);
        DENSE_ELEM(rJacobian, 18, 18) = var_chaste_interface__environment__fake_dt * ((var_t370 * 60.960741282614002) * var_t1188);
    }
    
    N_Vector CellTenTusscher2006EpiFromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        
        // Mathematics
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        
        N_Vector dqs = N_VNew_Serial(1);
        NV_Ith_S(dqs, 0) = var_potassium_dynamics__F;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellTenTusscher2006EpiFromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_epi";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane__V");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.23);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00621);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4712);

    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0095);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00172);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7444);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7045);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.373e-5);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7888);

    this->mVariableNames.push_back("L_type_Ca_current_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9755);

    this->mVariableNames.push_back("L_type_Ca_current_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999998);

    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.42e-8);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000126);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.64);

    this->mVariableNames.push_back("calcium_dynamics__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9073);

    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.604);

    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(136.89);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mDerivedQuantityNames.push_back("K_F");
    this->mDerivedQuantityUnits.push_back("coulomb_per_millimole");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellTenTusscher2006EpiFromCellMLCvodeOpt)
#endif // CHASTE_CVODE
