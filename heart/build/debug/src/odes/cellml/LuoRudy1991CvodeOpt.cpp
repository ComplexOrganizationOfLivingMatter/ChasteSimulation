#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: luo_rudy_1991
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:38:42 2016
//! 
//! <autogenerated>

#include "LuoRudy1991CvodeOpt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellLuoRudy1991FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellLuoRudy1991FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellLuoRudy1991FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_1)
        {
            delete[] _lookup_table_1;
            _lookup_table_1 = NULL;
        }
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_1_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<2; j++)
        {
            const double y1 = _lookup_table_1[i][j];
            const double y2 = _lookup_table_1[i+1][j];
            _lookup_table_1_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_1_row;
    }
    
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<54; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable1(double var_chaste_interface__intracellular_calcium_concentration__Cai)
    {
        const double _offset_1 = var_chaste_interface__intracellular_calcium_concentration__Cai - mTableMins[1];
        const double _offset_1_over_table_step = _offset_1 * mTableStepInverses[1];
        const unsigned _table_index_1 = (unsigned)(_offset_1_over_table_step);
        const double _factor_1 = _offset_1_over_table_step - _table_index_1;
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_1_row(_table_index_1, _factor_1);
        return _lt_1_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex1(double& var_chaste_interface__intracellular_calcium_concentration__Cai)
    {
        bool _oob_1 = false;
        if (var_chaste_interface__intracellular_calcium_concentration__Cai>mTableMaxs[1] || var_chaste_interface__intracellular_calcium_concentration__Cai<mTableMins[1])
        {
#define COVERAGE_IGNORE
            _oob_1 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_1;
    }
#undef COVERAGE_IGNORE

    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellLuoRudy1991FromCellMLCvodeOpt_LookupTables()
    {
        if (_lookup_table_1)
        {
            delete[] _lookup_table_1;
            _lookup_table_1 = NULL;
        }
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellLuoRudy1991FromCellMLCvodeOpt_LookupTables(const CellLuoRudy1991FromCellMLCvodeOpt_LookupTables&);
    CellLuoRudy1991FromCellMLCvodeOpt_LookupTables& operator= (const CellLuoRudy1991FromCellMLCvodeOpt_LookupTables&);
    CellLuoRudy1991FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(2);
        mNumberOfTables.resize(2);
        mTableMins.resize(2);
        mTableSteps.resize(2);
        mTableStepInverses.resize(2);
        mTableMaxs.resize(2);
        mNeedsRegeneration.resize(2);
        mKeyingVariableNames[1] = "cytosolic_calcium_concentration";
        mNumberOfTables[1] = 2;
        mTableMins[1] = 0.00001;
        mTableSteps[1] = 0.0001;
        mTableStepInverses[1] = 10000.0;
        mTableMaxs[1] = 30.00001;
        mNeedsRegeneration[1] = true;
        _lookup_table_1 = NULL;
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 54;
        mTableMins[0] = -150.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 199.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[1])
        {
            if (_lookup_table_1)
            {
                delete[] _lookup_table_1;
                _lookup_table_1 = NULL;
            }
            const unsigned _table_size_1 = 1 + (unsigned)((mTableMaxs[1]-mTableMins[1])/mTableSteps[1]+0.5);
            _lookup_table_1 = new double[_table_size_1][2];
            for (unsigned i=0 ; i<_table_size_1; i++)
            {
                const double var_chaste_interface__intracellular_calcium_concentration__Cai = mTableMins[1] + i*mTableSteps[1];
                _lookup_table_1[i][0] = 13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai);
            }
            
            for (unsigned i=0 ; i<_table_size_1; i++)
            {
                const double var_chaste_interface__intracellular_calcium_concentration__Cai = mTableMins[1] + i*mTableSteps[1];
                _lookup_table_1[i][1] = 7.7000000000000002 - (13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai * 1.0));
            }
            
            mNeedsRegeneration[1] = false;
        }
        
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][54];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = (-((var_chaste_interface__membrane__V <  -40.0) ? (0.13500000000000001 * exp( -11.764705879999999 - (0.14705882349999999 * var_chaste_interface__membrane__V))) : 0.0)) - ((var_chaste_interface__membrane__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1.0 / (0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = (var_chaste_interface__membrane__V <  -40.0) ? ( -0.01985294118 * exp( -11.764705879999999 - (0.14705882349999999 * var_chaste_interface__membrane__V))) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = (var_chaste_interface__membrane__V <=  -40.0) ? ((0.28123999999999999 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (108500.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : ( -40.0 < var_chaste_interface__membrane__V) ? ((0.011711711709999999 / pow(0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)), 2.0)) * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = (-((var_chaste_interface__membrane__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) : 0.0)) - ((var_chaste_interface__membrane__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = (var_chaste_interface__membrane__V <  -40.0) ? (((((( -31073.016 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (1.5254334000000001e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999)))) + ((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999))))) - ((((0.311 * (( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / pow(1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999), 2.0)) * exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999))) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = (var_chaste_interface__membrane__V <=  -40.0) ? ((( -0.001275024 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001))) + (((0.016701359999999998 * exp( -0.01052 * var_chaste_interface__membrane__V)) / pow(1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001), 2.0)) * exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001))) : ( -40.0 < var_chaste_interface__membrane__V) ? ((( -7.604999998e-08 * exp( -2.5349999990000002e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002))) + (((0.029999999999999999 * exp( -2.5349999990000002e-07 * var_chaste_interface__membrane__V)) / pow(1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002), 2.0)) * exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002))) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = (( -0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)))) - (0.080000000000000002 * exp( -0.090909090909090912 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 0.32000000000000001 * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = (0.032000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / pow(1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 0.0072727272729999999 * exp( -0.090909090909090912 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = (var_chaste_interface__membrane__V <=  -100.0) ? 0.0 : ( -100.0 < var_chaste_interface__membrane__V) ? (((((0.11348 * exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 3.0800000000000001)) * (1.0 / (var_chaste_interface__membrane__V + 77.0))) * (1.0 / exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 1.3999999999999999))) - (((2.8370000000000002 * (exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 3.0800000000000001) - 1.0)) / pow(var_chaste_interface__membrane__V + 77.0, 2.0)) * (1.0 / exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 1.3999999999999999)))) - (((0.11348 * (exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 3.0800000000000001) - 1.0)) * (1.0 / (var_chaste_interface__membrane__V + 77.0))) * (1.0 / exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 1.3999999999999999)))) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = ( -100.0 < var_chaste_interface__membrane__V) ? (((2.8370000000000002 * (exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 3.0800000000000001) - 1.0)) / (var_chaste_interface__membrane__V + 77.0)) / exp((0.040000000000000001 * var_chaste_interface__membrane__V) + 1.3999999999999999)) : 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = (((0.14710536900911525 * (1.0 / pow(1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775), 2.0))) * (1.0 / ((1.02 * (1.0 / (1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775)))) + (((0.49124000000000001 * exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617)) + exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998)) * (1.0 / (1.0 + exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998))))))) * (var_chaste_interface__membrane__V -  -87.892901713802502)) * exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (((0.26542587670000001 * (2.3237900077244502 * (1.0 / (1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775))))) / pow((1.02 * (1.0 / (1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775)))) + (((0.49124000000000001 * exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617)) + exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998)) * (1.0 / (1.0 + exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998)))), 2.0)) * (var_chaste_interface__membrane__V -  -87.892901713802502)) * (((( -0.24326999999999999 * (1.0 / pow(1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775), 2.0))) * exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775)) + (((0.039456396800000001 * exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617)) + (0.061749999999999999 * exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998))) * (1.0 / (1.0 + exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998))))) + (((0.51429999999999998 * ((0.49124000000000001 * exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617)) + exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998))) / pow(1.0 + exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998), 2.0)) * exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = (0.26542587670000001 * (2.3237900077244502 * (1.0 / (1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775))))) * (1.0 / ((1.02 * (1.0 / (1.0 + exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775)))) + (((0.49124000000000001 * exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617)) + exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998)) * (1.0 / (1.0 + exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = ((0.0030602006694899998 / pow(1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)), 2.0)) * (var_chaste_interface__membrane__V -  -87.892901713802502)) * exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = 0.0183 / (1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] =  -0.00095 * (exp(( -0.01 * var_chaste_interface__membrane__V) + 0.050000000000000003) / (1.0 + exp(( -0.071999999999999995 * var_chaste_interface__membrane__V) + 0.35999999999999999)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = (0.0068399999999999997 * exp(( -0.01 * var_chaste_interface__membrane__V) + 0.050000000000000003)) / pow(1.0 + exp(( -0.071999999999999995 * var_chaste_interface__membrane__V) + 0.35999999999999999), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = exp(( -0.071999999999999995 * var_chaste_interface__membrane__V) + 0.35999999999999999);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 0.0011900000000000001 * (exp(( -0.017000000000000001 * var_chaste_interface__membrane__V) - 0.748) / (1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) + 2.2000000000000002)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = (0.0035000000000000001 * exp(( -0.017000000000000001 * var_chaste_interface__membrane__V) - 0.748)) / pow(1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) + 2.2000000000000002), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = exp((0.050000000000000003 * var_chaste_interface__membrane__V) + 2.2000000000000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = ( -0.095000000000000001 * (exp(( -0.01 * var_chaste_interface__membrane__V) + 0.050000000000000003) / (1.0 + exp(( -0.071999999999999995 * var_chaste_interface__membrane__V) + 0.35999999999999999)))) - (0.070000000000000007 * (exp(( -0.017000000000000001 * var_chaste_interface__membrane__V) - 0.748) / (1.0 + exp((0.050000000000000003 * var_chaste_interface__membrane__V) + 2.2000000000000002))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] =  -9.6000000000000002e-05 * (exp(( -0.0080000000000000002 * var_chaste_interface__membrane__V) - 0.224) / (1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 4.2000000000000002)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = (0.0018 * exp(( -0.0080000000000000002 * var_chaste_interface__membrane__V) - 0.224)) / pow(1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 4.2000000000000002), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 4.2000000000000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 0.00012999999999999999 * (exp(( -0.02 * var_chaste_interface__membrane__V) - 0.59999999999999998) / (1.0 + exp(( -0.20000000000000001 * var_chaste_interface__membrane__V) - 6.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = (0.0012999999999999999 * exp(( -0.02 * var_chaste_interface__membrane__V) - 0.59999999999999998)) / pow(1.0 + exp(( -0.20000000000000001 * var_chaste_interface__membrane__V) - 6.0), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = exp(( -0.20000000000000001 * var_chaste_interface__membrane__V) - 6.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = ( -0.012 * (exp(( -0.0080000000000000002 * var_chaste_interface__membrane__V) - 0.224) / (1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 4.2000000000000002)))) - (0.0064999999999999997 * (exp(( -0.02 * var_chaste_interface__membrane__V) - 0.59999999999999998) / (1.0 + exp(( -0.20000000000000001 * var_chaste_interface__membrane__V) - 6.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = 4.1499999999999999e-05 * (exp((0.083000000000000004 * var_chaste_interface__membrane__V) + 4.1500000000000004) / (1.0 + exp((0.057000000000000002 * var_chaste_interface__membrane__V) + 2.8500000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = (2.8500000000000002e-05 * exp((0.083000000000000004 * var_chaste_interface__membrane__V) + 4.1500000000000004)) / pow(1.0 + exp((0.057000000000000002 * var_chaste_interface__membrane__V) + 2.8500000000000001), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = exp((0.057000000000000002 * var_chaste_interface__membrane__V) + 2.8500000000000001);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = 7.7999999999999999e-05 * (exp(( -0.059999999999999998 * var_chaste_interface__membrane__V) - 1.2) / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 0.80000000000000004)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = (5.1999999999999997e-05 * exp(( -0.059999999999999998 * var_chaste_interface__membrane__V) - 1.2)) / pow(1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 0.80000000000000004), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 0.80000000000000004);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = ( -0.00050000000000000001 * (exp((0.083000000000000004 * var_chaste_interface__membrane__V) + 4.1500000000000004) / (1.0 + exp((0.057000000000000002 * var_chaste_interface__membrane__V) + 2.8500000000000001)))) - (0.0012999999999999999 * (exp(( -0.059999999999999998 * var_chaste_interface__membrane__V) - 1.2) / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 0.80000000000000004))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = 0.60470000000000002 * ((1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003)))) / ((1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003)))) + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V + 5.476) -  -87.892901713802502))) + (1.0 * exp(0.061749999999999999 * (var_chaste_interface__membrane__V - 506.41709828619742)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V -  -87.892901713802502) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V -  -87.892901713802502);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = 0.0183 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -87.892901713802502);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = (var_chaste_interface__membrane__V >  -100.0) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 77.0)) - 1.0)) / ((var_chaste_interface__membrane__V + 77.0) * exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 35.0)))) : 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = (0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = 0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = (var_chaste_interface__membrane__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = (var_chaste_interface__membrane__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = (var_chaste_interface__membrane__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = (var_chaste_interface__membrane__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = (0.095000000000000001 * exp( -0.01 * (var_chaste_interface__membrane__V - 5.0))) / (1.0 + exp( -0.071999999999999995 * (var_chaste_interface__membrane__V - 5.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = (0.070000000000000007 * exp( -0.017000000000000001 * (var_chaste_interface__membrane__V + 44.0))) / (1.0 + exp(0.050000000000000003 * (var_chaste_interface__membrane__V + 44.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = (0.012 * exp( -0.0080000000000000002 * (var_chaste_interface__membrane__V + 28.0))) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 28.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = (0.0064999999999999997 * exp( -0.02 * (var_chaste_interface__membrane__V + 30.0))) / (1.0 + exp( -0.20000000000000001 * (var_chaste_interface__membrane__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = (0.00050000000000000001 * exp(0.083000000000000004 * (var_chaste_interface__membrane__V + 50.0))) / (1.0 + exp(0.057000000000000002 * (var_chaste_interface__membrane__V + 50.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = (0.0012999999999999999 * exp( -0.059999999999999998 * (var_chaste_interface__membrane__V + 20.0))) / (1.0 + exp( -0.040000000000000001 * (var_chaste_interface__membrane__V + 20.0)));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellLuoRudy1991FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_1_row[2];
    double _lookup_table_0_row[54];
    
    // Lookup tables
    double (*_lookup_table_1)[2];
    double (*_lookup_table_0)[54];
    
};

std::auto_ptr<CellLuoRudy1991FromCellMLCvodeOpt_LookupTables> CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellLuoRudy1991FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 2.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -25.5; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellLuoRudy1991FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 7);
    }
    
    CellLuoRudy1991FromCellMLCvodeOpt::CellLuoRudy1991FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                8,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellLuoRudy1991FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        NV_Ith_S(this->mParameters, 0) = 0.09; // (c,slow_inward_current__P_si) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 1) = 23; // (c,fast_sodium_current__g_Na) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 2) = 0.282; // (c,time_dependent_potassium_current__g_Kmax) [milliS_per_cm2]
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellLuoRudy1991FromCellMLCvodeOpt::~CellLuoRudy1991FromCellMLCvodeOpt()
    {
    }
    
    AbstractLookupTableCollection* CellLuoRudy1991FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    void CellLuoRudy1991FromCellMLCvodeOpt::VerifyStateVariables()
    {
        /* We only expect CVODE to keep state variables to within its tolerances,
         * not exactly the bounds prescribed to each variable that are checked here.
         *
         * For 99.99% of paces this->mAbsTol works,
         * For 99.999% of paces 10*this->mAbsTol is fine,
         * but unfortunately 100x seems to be required on rare occasions for upstrokes.
         * This sounds bad, but is probably typically only 1e-5 or 1e-6.
         */
        const double tol = 100*this->mAbsTol;
        N_Vector rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0 - tol)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m > 1 + tol)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
    }
    
    double CellLuoRudy1991FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        const bool _oob_0 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[41] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_fast_sodium_current__i_Na = NV_Ith_S(mParameters, 1) * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
        const double var_slow_inward_current__i_si = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - _lt_1_row[1]); // microA_per_cm2
        const double var_chaste_interface__slow_inward_current__i_si = var_slow_inward_current__i_si; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_fast_sodium_current__i_Na + var_chaste_interface__slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + _lt_0_row[39] + _lt_0_row[40] + (0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997)); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellLuoRudy1991FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        const bool _oob_0 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_slow_inward_current__i_si = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - _lt_1_row[1]); // microA_per_cm2
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (_lt_0_row[42] * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - (_lt_0_row[43] * var_chaste_interface__fast_sodium_current_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = (_lt_0_row[44] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[45] * var_chaste_interface__fast_sodium_current_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (_lt_0_row[46] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[47] * var_chaste_interface__fast_sodium_current_j_gate__j); // per_millisecond
        const double d_dt_chaste_interface__slow_inward_current_d_gate__d = (_lt_0_row[48] * (1.0 - var_chaste_interface__slow_inward_current_d_gate__d)) - (_lt_0_row[49] * var_chaste_interface__slow_inward_current_d_gate__d); // per_millisecond
        const double d_dt_chaste_interface__slow_inward_current_f_gate__f = (_lt_0_row[50] * (1.0 - var_chaste_interface__slow_inward_current_f_gate__f)) - (_lt_0_row[51] * var_chaste_interface__slow_inward_current_f_gate__f); // per_millisecond
        const double d_dt_chaste_interface__time_dependent_potassium_current_X_gate__X = (_lt_0_row[52] * (1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X)) - (_lt_0_row[53] * var_chaste_interface__time_dependent_potassium_current_X_gate__X); // per_millisecond
        const double d_dt_chaste_interface__intracellular_calcium_concentration__Cai = ( -0.0001 * var_slow_inward_current__i_si) + (0.070000000000000007 * (0.0001 - var_chaste_interface__intracellular_calcium_concentration__Cai)); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[41] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
            const double var_membrane__C = 1.0; // microF_per_cm2
            const double var_chaste_interface__membrane__I_stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            const double var_fast_sodium_current__i_Na = NV_Ith_S(mParameters, 1) * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
            d_dt_chaste_interface__membrane__V = ( -1.0 / var_membrane__C) * (var_chaste_interface__membrane__I_stim + var_fast_sodium_current__i_Na + var_slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + _lt_0_row[39] + _lt_0_row[40] + (0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997))); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__slow_inward_current_d_gate__d;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__slow_inward_current_f_gate__f;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__time_dependent_potassium_current_X_gate__X;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__intracellular_calcium_concentration__Cai;
    }
    
    void CellLuoRudy1991FromCellMLCvodeOpt::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        const bool _oob_0 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_membrane__C = 1.0; // microF_per_cm2
        const double var_t1 = 1.0 / var_membrane__C; // dimensionless
        const double var_t2 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t3 = var_t2 * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t5 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t7 = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_t8 = var_t7 * var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_t10 = NV_Ith_S(mParameters, 2) * 2.3237900077244502; // dimensionless
        const double var_t143 = var_t1 * NV_Ith_S(mParameters, 1); // dimensionless
        const double var_t160 = var_t1 * NV_Ith_S(mParameters, 0); // dimensionless
        const double var_t163 = (var_chaste_interface__membrane__V - 7.7000000000000002) + _lt_1_row[0]; // dimensionless
        const double var_t183 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t352 = 1.0 - var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_t391 = 1.0 - var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_t430 = 1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t1) * (((((((((((NV_Ith_S(mParameters, 1) * var_t3) * var_t5) + var_t8) + ((((0.43033148290000001 * var_t10) * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * _lt_0_row[11]) * (var_chaste_interface__membrane__V -  -77.567584385319392))) + (((0.43033148290000001 * var_t10) * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * _lt_0_row[12])) - _lt_0_row[13]) - _lt_0_row[14]) + _lt_0_row[15]) + _lt_0_row[16]) + _lt_0_row[17]) + 0.039210000000000002)));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * (((_lt_0_row[7] * var_t183) - ((_lt_0_row[8] * var_t183) * _lt_0_row[9])) + (_lt_0_row[10] * var_chaste_interface__fast_sodium_current_m_gate__m));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[1] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[2] * var_chaste_interface__fast_sodium_current_h_gate__h));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[4] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[5] * var_chaste_interface__fast_sodium_current_j_gate__j));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((((_lt_0_row[18] * var_t352) + ((_lt_0_row[19] * var_t352) * _lt_0_row[20])) + (_lt_0_row[21] * var_chaste_interface__slow_inward_current_d_gate__d)) + ((_lt_0_row[22] * var_chaste_interface__slow_inward_current_d_gate__d) * _lt_0_row[23]));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((_lt_0_row[25] * var_t391) - ((_lt_0_row[26] * var_t391) * _lt_0_row[27])) + (_lt_0_row[28] * var_chaste_interface__slow_inward_current_f_gate__f)) - ((_lt_0_row[29] * var_chaste_interface__slow_inward_current_f_gate__f) * _lt_0_row[30]));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * ((((_lt_0_row[32] * var_t430) - ((_lt_0_row[33] * var_t430) * _lt_0_row[34])) + (_lt_0_row[35] * var_chaste_interface__time_dependent_potassium_current_X_gate__X)) - ((_lt_0_row[36] * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * _lt_0_row[37]));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * ( -0.0001 * var_t8);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -3.0 * var_t143) * var_t2) * var_t5) * (var_chaste_interface__membrane__V - 54.794463935091848)));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * (_lt_0_row[6]);
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t143) * var_t3) * var_chaste_interface__fast_sodium_current_j_gate__j) * (var_chaste_interface__membrane__V - 54.794463935091848)));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (_lt_0_row[0]);
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t143) * var_t3) * var_chaste_interface__fast_sodium_current_h_gate__h) * (var_chaste_interface__membrane__V - 54.794463935091848)));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (_lt_0_row[3]);
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t160) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t163));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (_lt_0_row[24]);
        DENSE_ELEM(rJacobian, 7, 4) = var_chaste_interface__environment__fake_dt * ((( -0.0001 * NV_Ith_S(mParameters, 0)) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t163);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t160) * var_chaste_interface__slow_inward_current_d_gate__d) * var_t163));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (_lt_0_row[31]);
        DENSE_ELEM(rJacobian, 7, 5) = var_chaste_interface__environment__fake_dt * (( -0.0001 * var_t7) * var_t163);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((( -0.43033148290000001 * var_t1) * NV_Ith_S(mParameters, 2)) * 2.3237900077244502) * _lt_0_row[12]) * (var_chaste_interface__membrane__V -  -77.567584385319392)));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (_lt_0_row[38]);
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -13.028700000000001 * var_t160) * var_chaste_interface__slow_inward_current_d_gate__d) * var_chaste_interface__slow_inward_current_f_gate__f) * (1.0 / var_chaste_interface__intracellular_calcium_concentration__Cai)));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (((( -0.00130287 * var_t7) * var_chaste_interface__slow_inward_current_f_gate__f) * (1.0 / var_chaste_interface__intracellular_calcium_concentration__Cai)) - 0.070000000000000007);
    }
    
    N_Vector CellLuoRudy1991FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        
        
        // Lookup table indexing
        const bool _oob_0 = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        const double var_membrane__FonRT = 0.037435728309031795; // per_millivolt
        const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[41] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_membrane__potassium_currents = var_time_dependent_potassium_current__i_K + _lt_0_row[39] + _lt_0_row[40]; // microA_per_cm2
        
        N_Vector dqs = N_VNew_Serial(2);
        NV_Ith_S(dqs, 0) = var_membrane__FonRT;
        NV_Ith_S(dqs, 1) = var_membrane__potassium_currents;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellLuoRudy1991FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "luo_rudy_1991";
    this->mFreeVariableName = "environment_time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.853);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00187018);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9804713);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98767124);

    this->mVariableNames.push_back("slow_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00316354);

    this->mVariableNames.push_back("slow_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99427859);

    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.16647703);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mDerivedQuantityNames.push_back("FonRT");
    this->mDerivedQuantityUnits.push_back("per_millivolt");
    
    this->mDerivedQuantityNames.push_back("potassium_currents");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");
    
    this->mAttributes["SuggestedCycleLength"] = 750;
    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.005;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellLuoRudy1991FromCellMLCvodeOpt)
#endif // CHASTE_CVODE
