//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: mahajan_shiferaw_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:42:01 2016
//! 
//! <autogenerated>

#include "Mahajan2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> CellMahajan2008FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 400.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_amplitude =  -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellMahajan2008FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[22];
    }
    
    CellMahajan2008FromCellML::CellMahajan2008FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellMahajan2008FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 1.0; // (c,IKr__ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (c,IKs__ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 1.0; // (c,Ito__ScaleFactorIto) [dimensionless]
        this->mParameters[3] = 1.8; // (c,Environment__Ca_o) [mM]
        this->mParameters[4] = 5.4; // (c,Environment__K_o) [mM]
        this->mParameters[5] = 136; // (c,Environment__Na_o) [mM]
    }
    
    CellMahajan2008FromCellML::~CellMahajan2008FromCellML()
    {
    }
    
    double CellMahajan2008FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[4];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[5];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[6];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[7];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[8];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[9];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[10];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[11];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[12];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[13];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[14];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[15];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[16];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[19];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[21];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_i = rY[22];
        // Units: uM; Initial value: 0.256752008084
        
        const double var_reversal_potentials__ek = 26.541413816729868 * log(mParameters[4] * 0.0071428571428571426); // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 59.215000000000003))); // per_ms
        const double var_Ito__rt2 = (var_chaste_interface__cell__V + 33.5) * 0.10000000000000001; // dimensionless
        const double var_INaK__xiNaK = (((1.5 * (1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.0037676968035880187)) + (0.036499999999999998 * ((exp(mParameters[5] * 0.01485884101040119) - 1.0) * 0.14285714285714285) * exp((-var_chaste_interface__cell__V) * 0.037676968035880186)))) * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 12.0)) * mParameters[4]) / (mParameters[4] + 1.5); // nA_per_nF
        const double var_Ca__csm = var_chaste_interface__Ca__Ca_submem * 0.001; // mM
        const double var_INaCa__jNaCa = (0.83999999999999997 * (1.0 / (1.0 + pow(0.29999999999999999 / var_chaste_interface__Ca__Ca_submem, 3.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3] * exp(var_chaste_interface__cell__V * 0.013186938812558065)) - (pow(mParameters[5], 3.0) * var_Ca__csm * exp(var_chaste_interface__cell__V *  -0.024490029223322121)))) / ((1.0 + (0.20000000000000001 * exp(var_chaste_interface__cell__V *  -0.024490029223322121))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_Ca__csm)) + (1860.8670000000004 * mParameters[3] * (1.0 + (var_Ca__csm * 277.77777777777777))) + (0.0035999999999999999 * pow(mParameters[5], 3.0) * (1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0))) + ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3]) + (pow(mParameters[5], 3.0) * var_Ca__csm)))); // uM_per_ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__za = var_chaste_interface__cell__V * 0.075353936071760372; // dimensionless
        const double var_ICaL__rxa = (fabs(var_ICaL__za) < 0.001) ? ((((var_Ca__csm * exp(var_ICaL__za)) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) * 13.270706908364934) : ((var_chaste_interface__cell__V * ((var_Ca__csm * exp(var_ICaL__za)) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) / (exp(var_ICaL__za) - 1.0)); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_INa__xina = var_INa__gna * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * (var_chaste_interface__cell__V - (26.541413816729868 * log(mParameters[5] / var_chaste_interface__Na__Na_i))); // nA_per_nF
        const double var_cell__Itotal = -(var_INa__xina + (0.29999999999999999 * sqrt(mParameters[4] * 0.18518518518518517) * (var_IK1__aki / (var_IK1__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[0] * var_IKr__gkr * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__IKr__xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.0) * 0.044642857142857144))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[1] * 0.1386 * (1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_chaste_interface__Ca__Ca_i, 3.0)))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (26.541413816729868 * log((mParameters[4] + (0.018329999999999999 * mParameters[5])) / (140.0 + (0.018329999999999999 * var_chaste_interface__Na__Na_i)))))) + ((mParameters[2] * 0.11 * var_chaste_interface__Ito__xtos * (var_chaste_interface__Ito__ytos + (0.5 * (1.0 / (1.0 + exp(var_Ito__rt2))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (0.040000000000000001 * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof * (var_chaste_interface__cell__V - var_reversal_potentials__ek))) + var_INaCa__xiNaCa + (var_ICaL__jca * 16.0) + var_INaK__xiNaK + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // nA_per_nF
        const double var_chaste_interface__i_ionic = (var_cell__Itotal) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = -(var_chaste_interface__i_ionic);
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellMahajan2008FromCellML::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[1];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[2];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[3];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[4];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[5];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[6];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[7];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[8];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[9];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[10];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[11];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[12];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[13];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[14];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[15];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[16];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = rY[17];
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = rY[18];
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = rY[19];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = rY[20];
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = rY[21];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_i = rY[22];
        // Units: uM; Initial value: 0.256752008084
        double var_chaste_interface__Ca__Ca_NSR = rY[23];
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = rY[24];
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = rY[25];
        // Units: uM; Initial value: 19.864701949854
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_Ito__rt2 = (var_chaste_interface__cell__V + 33.5) * 0.10000000000000001; // dimensionless
        const double var_INaK__xiNaK = (((1.5 * (1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.0037676968035880187)) + (0.036499999999999998 * ((exp(mParameters[5] * 0.01485884101040119) - 1.0) * 0.14285714285714285) * exp((-var_chaste_interface__cell__V) * 0.037676968035880186)))) * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 12.0)) * mParameters[4]) / (mParameters[4] + 1.5); // nA_per_nF
        const double var_Ca__csm = var_chaste_interface__Ca__Ca_submem * 0.001; // mM
        const double var_INaCa__jNaCa = (0.83999999999999997 * (1.0 / (1.0 + pow(0.29999999999999999 / var_chaste_interface__Ca__Ca_submem, 3.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3] * exp(var_chaste_interface__cell__V * 0.013186938812558065)) - (pow(mParameters[5], 3.0) * var_Ca__csm * exp(var_chaste_interface__cell__V *  -0.024490029223322121)))) / ((1.0 + (0.20000000000000001 * exp(var_chaste_interface__cell__V *  -0.024490029223322121))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_Ca__csm)) + (1860.8670000000004 * mParameters[3] * (1.0 + (var_Ca__csm * 277.77777777777777))) + (0.0035999999999999999 * pow(mParameters[5], 3.0) * (1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0))) + ((pow(var_chaste_interface__Na__Na_i, 3.0) * mParameters[3]) + (pow(mParameters[5], 3.0) * var_Ca__csm)))); // uM_per_ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__za = var_chaste_interface__cell__V * 0.075353936071760372; // dimensionless
        const double var_ICaL__rxa = (fabs(var_ICaL__za) < 0.001) ? ((((var_Ca__csm * exp(var_ICaL__za)) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) * 13.270706908364934) : ((var_chaste_interface__cell__V * ((var_Ca__csm * exp(var_ICaL__za)) - (0.34100000000000003 * mParameters[3])) * 0.0078521942756732063) / (exp(var_ICaL__za) - 1.0)); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = (((((1.0 - var_chaste_interface__ICaL__xi1ca) - var_chaste_interface__ICaL__xi2ca) - var_chaste_interface__ICaL__xi1ba) - var_chaste_interface__ICaL__xi2ba) - var_chaste_interface__ICaL__c1) - var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_INa__xina = var_INa__gna * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * var_chaste_interface__INa__xm * (var_chaste_interface__cell__V - (26.541413816729868 * log(mParameters[5] / var_chaste_interface__Na__Na_i))); // nA_per_nF
        const double var_ICaL__poinf = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 0.0)) * 0.125)); // dimensionless
        const double var_ICaL__fca = 1.0 / (1.0 + pow(3.0 / var_chaste_interface__Ca__Ca_dyad, 3.0)); // dimensionless
        const double var_ICaL__alpha = var_ICaL__poinf * 1.0; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__poinf) * 1.0; // per_ms
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__k3 = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.33333333333333331)))) * 0.33333333333333331; // per_ms
        const double var_ICaL__k3t = var_ICaL__k3; // per_ms
        const double var_ICaL__Ps = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.088339222614840993)); // dimensionless
        const double var_ICaL__tau_ca = (78.032899999999998 / (1.0 + pow(var_chaste_interface__Ca__Ca_dyad * 0.16410525711191157, 4.0))) + 0.10000000000000001; // ms
        const double var_ICaL__recov = 10.0 + (4954.0 * exp(var_chaste_interface__cell__V * 0.064102564102564111)); // ms
        const double var_ICaL__Pr = 1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__cell__V -  -40.0)) * 0.25))); // dimensionless
        const double var_ICaL__tauca = ((var_ICaL__recov - var_ICaL__tau_ca) * var_ICaL__Pr) + var_ICaL__tau_ca; // ms
        const double var_ICaL__k6 = (var_ICaL__fca * var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k5 = (1.0 - var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__tauba = ((var_ICaL__recov - 450.0) * var_ICaL__Pr) + 450.0; // ms
        const double var_ICaL__k6t = var_ICaL__Ps / var_ICaL__tauba; // per_ms
        const double var_ICaL__k5t = (1.0 - var_ICaL__Ps) / var_ICaL__tauba; // per_ms
        const double var_ICaL__k4 = (((((var_ICaL__k3 * var_ICaL__alpha) / var_ICaL__beta) * var_ICaL__k1) * 9651.1122906915025) * var_ICaL__k5) / var_ICaL__k6; // per_ms
        const double var_ICaL__k4t = (((((var_ICaL__k3t * var_ICaL__alpha) / var_ICaL__beta) * 0.00413) * 446.42857142857144) * var_ICaL__k5t) / var_ICaL__k6t; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_IKs__xs1ss = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 1.5)) * 0.059880239520958084)); // dimensionless
        const double var_IKs__tauxs1 = (fabs(var_chaste_interface__cell__V + 30.0) < 0.014556040756914121) ? 417.94625266107982 : (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__cell__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__cell__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__cell__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__cell__V + 30.0)) - 1.0)))); // ms
        const double var_Ito__rt1 = (-(var_chaste_interface__cell__V + 3.0)) * 0.066666666666666666; // dimensionless
        const double var_Ito__xtos_inf = 1.0 / (1.0 + exp(var_Ito__rt1)); // dimensionless
        const double var_Ito__ytos_inf = 1.0 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double var_Ileak_Iup_Ixfer__jleak = ((2.069e-05 * var_chaste_interface__Ca__Ca_NSR * var_chaste_interface__Ca__Ca_NSR) / ((var_chaste_interface__Ca__Ca_NSR * var_chaste_interface__Ca__Ca_NSR) + 2500.0)) * ((var_chaste_interface__Ca__Ca_NSR * 16.667000000000002) - var_chaste_interface__Ca__Ca_i); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = (0.40000000000000002 * var_chaste_interface__Ca__Ca_i * var_chaste_interface__Ca__Ca_i) / ((var_chaste_interface__Ca__Ca_i * var_chaste_interface__Ca__Ca_i) + 0.25); // uM_per_ms
        const double var_Ca__dCa_JSR = ((-var_chaste_interface__Irel__xir) + var_Ileak_Iup_Ixfer__jup) - var_Ileak_Iup_Ixfer__jleak; // uM_per_ms
        const double var_Irel__Qr = (var_chaste_interface__Ca__Ca_NSR * (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0)) ? ((var_chaste_interface__Irel__Ca_JSR - 50.0) * 1.0) : (var_chaste_interface__Irel__Ca_JSR >= 90.0) ? ((11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) +  -977.00000000000011) : 0.0)) * 0.011111111111111112; // uM_per_ms
        const double var_Ca__xbi = (0.0327 * var_chaste_interface__Ca__Ca_i * (70.0 - var_chaste_interface__Ca__tropi)) - (0.019599999999999999 * var_chaste_interface__Ca__tropi); // uM_per_ms
        const double var_Ca__xbs = (0.0327 * var_chaste_interface__Ca__Ca_submem * (70.0 - var_chaste_interface__Ca__trops)) - (0.019599999999999999 * var_chaste_interface__Ca__trops); // uM_per_ms
        const double var_Ca__jd = (var_chaste_interface__Ca__Ca_submem - var_chaste_interface__Ca__Ca_i) * 0.25; // uM_per_ms
        const double d_dt_chaste_interface__INa__xm = (((fabs(var_chaste_interface__cell__V + 47.130000000000003) > 0.001) ? (((var_chaste_interface__cell__V + 47.130000000000003) * 0.32000000000000001) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)))) : 3.2000000000000002) * (1.0 - var_chaste_interface__INa__xm)) - ((0.080000000000000002 * exp((-var_chaste_interface__cell__V) * 0.090909090909090912)) * var_chaste_interface__INa__xm); // 'per millisecond'
        const double d_dt_chaste_interface__INa__xh = (((var_chaste_interface__cell__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__cell__V) *  -0.14705882352941177)) : 0.0) * (1.0 - var_chaste_interface__INa__xh)) - (((var_chaste_interface__cell__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V))) : (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__cell__V + 10.66) *  -0.0900900900900901))))) * var_chaste_interface__INa__xh); // 'per millisecond'
        const double d_dt_chaste_interface__INa__xj = (((var_chaste_interface__cell__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__cell__V))) * 1.0 * (var_chaste_interface__cell__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__V + 79.230000000000004)))) : 0.0) * (1.0 - var_chaste_interface__INa__xj)) - (((var_chaste_interface__cell__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__cell__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 32.0))))) * var_chaste_interface__INa__xj); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__c1 = ((var_ICaL__alpha * var_chaste_interface__ICaL__c2) + (0.000103615 * var_chaste_interface__ICaL__xi1ca) + (0.0022399999999999998 * var_chaste_interface__ICaL__xi1ba) + (3.0 * var_ICaL__po)) - ((var_ICaL__beta + var_ICaL__k1 + 0.30413000000000001) * var_chaste_interface__ICaL__c1); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__c2 = ((var_ICaL__beta * var_chaste_interface__ICaL__c1) + (var_ICaL__k5 * var_chaste_interface__ICaL__xi2ca) + (var_ICaL__k5t * var_chaste_interface__ICaL__xi2ba)) - ((var_ICaL__k6 + var_ICaL__k6t + var_ICaL__alpha) * var_chaste_interface__ICaL__c2); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ca = ((var_ICaL__k1 * var_chaste_interface__ICaL__c1) + (var_ICaL__k4 * var_chaste_interface__ICaL__xi2ca) + (var_ICaL__s1 * var_ICaL__po)) - ((var_ICaL__k3 + 0.000103615 + ((((var_ICaL__s1 * 0.29999999999999999) * 0.33333333333333331) * 0.000103615) / var_ICaL__k1)) * var_chaste_interface__ICaL__xi1ca); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ba = ((0.00413 * var_chaste_interface__ICaL__c1) + (var_ICaL__k4t * var_chaste_interface__ICaL__xi2ba) + (0.0019499999999999999 * var_ICaL__po)) - ((var_ICaL__k3t + 0.0023457627118644068) * var_chaste_interface__ICaL__xi1ba); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ca = ((var_ICaL__k3 * var_chaste_interface__ICaL__xi1ca) + (var_ICaL__k6 * var_chaste_interface__ICaL__c2)) - ((var_ICaL__k5 + var_ICaL__k4) * var_chaste_interface__ICaL__xi2ca); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ba = ((var_ICaL__k3t * var_chaste_interface__ICaL__xi1ba) + (var_ICaL__k6t * var_chaste_interface__ICaL__c2)) - ((var_ICaL__k5t + var_ICaL__k4t) * var_chaste_interface__ICaL__xi2ba); // 'per millisecond'
        const double d_dt_chaste_interface__IKr__xr = ((1.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 50.0)) * 0.13333333333333333))) - var_chaste_interface__IKr__xr) / (1.0 / (((fabs(var_chaste_interface__cell__V + 7.0) > 0.001) ? (((var_chaste_interface__cell__V + 7.0) * 0.0013799999999999999) / (1.0 - exp( -0.123 * (var_chaste_interface__cell__V + 7.0)))) : 0.011219512195121951) + ((fabs(var_chaste_interface__cell__V + 10.0) > 0.001) ? (((var_chaste_interface__cell__V + 10.0) * 0.00060999999999999997) / (exp(0.14499999999999999 * (var_chaste_interface__cell__V + 10.0)) - 1.0)) : 0.0042068965517241376))); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs1 = (var_IKs__xs1ss - var_chaste_interface__IKs__xs1) / var_IKs__tauxs1; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs2 = (var_IKs__xs1ss - var_chaste_interface__IKs__xs2) / (4.0 * var_IKs__tauxs1); // 'per millisecond'
        const double d_dt_chaste_interface__Ito__xtos = (var_Ito__xtos_inf - var_chaste_interface__Ito__xtos) / ((9.0 / (1.0 + exp(-var_Ito__rt1))) + 0.5); // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ytos = (var_Ito__ytos_inf - var_chaste_interface__Ito__ytos) / ((3000.0 / (1.0 + exp((var_chaste_interface__cell__V + 60.0) * 0.10000000000000001))) + 30.0); // 'per millisecond'
        const double d_dt_chaste_interface__Ito__xtof = (var_Ito__xtos_inf - var_chaste_interface__Ito__xtof) / ((3.5 * exp((((-var_chaste_interface__cell__V) * 0.033333333333333333) * var_chaste_interface__cell__V) * 0.033333333333333333)) + 1.5); // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ytof = (var_Ito__ytos_inf - var_chaste_interface__Ito__ytof) / ((20.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.5) * 0.10000000000000001))) + 20.0); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Ca_JSR = (var_chaste_interface__Ca__Ca_NSR - var_chaste_interface__Irel__Ca_JSR) * 0.01; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Irel__xir = ((2.5807899999999999 * var_ICaL__po * fabs(var_ICaL__rxa) * (exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0)) / (1.0 + exp( -0.050000000000000003 * (var_chaste_interface__cell__V + 30.0))))) * var_Irel__Qr) - ((var_chaste_interface__Irel__xir * (1.0 - ((30.0 * var_Ca__dCa_JSR) / var_chaste_interface__Ca__Ca_NSR))) * 0.033333333333333333); // 'micromolar per_ms per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = (-(var_INa__xina + (3.0 * var_INaK__xiNaK) + (3.0 * var_INaCa__xiNaCa))) * 0.000125; // 'millimolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_dyad = (((((var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * 26841.799999999999) * 1.0) * exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0))) / (1.0 + exp( -0.35759999999999997 * (var_chaste_interface__cell__V + 30.0)))) + (var_ICaL__po * 9000.0 * fabs(var_ICaL__rxa))) - ((var_chaste_interface__Ca__Ca_dyad - var_chaste_interface__Ca__Ca_submem) * 2.0); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_submem = (1.0 / (1.0 + (168.0 / ((7.0 + var_chaste_interface__Ca__Ca_submem) * (7.0 + var_chaste_interface__Ca__Ca_submem))) + (28.199999999999999 / ((0.59999999999999998 + var_chaste_interface__Ca__Ca_submem) * (0.59999999999999998 + var_chaste_interface__Ca__Ca_submem))) + (4.5 / ((0.29999999999999999 + var_chaste_interface__Ca__Ca_submem) * (0.29999999999999999 + var_chaste_interface__Ca__Ca_submem))) + (546.0 / ((13.0 + var_chaste_interface__Ca__Ca_submem) * (13.0 + var_chaste_interface__Ca__Ca_submem))))) * ((50.0 * (((var_chaste_interface__Irel__xir - var_Ca__jd) - var_ICaL__jca) + var_INaCa__jNaCa)) - var_Ca__xbs); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (168.0 / ((7.0 + var_chaste_interface__Ca__Ca_i) * (7.0 + var_chaste_interface__Ca__Ca_i))) + (28.199999999999999 / ((0.59999999999999998 + var_chaste_interface__Ca__Ca_i) * (0.59999999999999998 + var_chaste_interface__Ca__Ca_i))) + (4.5 / ((0.29999999999999999 + var_chaste_interface__Ca__Ca_i) * (0.29999999999999999 + var_chaste_interface__Ca__Ca_i))) + (546.0 / ((13.0 + var_chaste_interface__Ca__Ca_i) * (13.0 + var_chaste_interface__Ca__Ca_i))))) * (((var_Ca__jd - var_Ileak_Iup_Ixfer__jup) + var_Ileak_Iup_Ixfer__jleak) - var_Ca__xbi); // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_Ca__dCa_JSR; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__tropi = var_Ca__xbi; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__trops = var_Ca__xbs; // 'micromolar per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_reversal_potentials__ek = 26.541413816729868 * log(mParameters[4] * 0.0071428571428571426); // mV
            const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 59.215000000000003))); // per_ms
            const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
            const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
            const double var_cell__Itotal = -(var_INa__xina + (0.29999999999999999 * sqrt(mParameters[4] * 0.18518518518518517) * (var_IK1__aki / (var_IK1__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__ek) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[0] * var_IKr__gkr * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__IKr__xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 33.0) * 0.044642857142857144))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (mParameters[1] * 0.1386 * (1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_chaste_interface__Ca__Ca_i, 3.0)))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (26.541413816729868 * log((mParameters[4] + (0.018329999999999999 * mParameters[5])) / (140.0 + (0.018329999999999999 * var_chaste_interface__Na__Na_i)))))) + ((mParameters[2] * 0.11 * var_chaste_interface__Ito__xtos * (var_chaste_interface__Ito__ytos + (0.5 * (1.0 / (1.0 + exp(var_Ito__rt2))))) * (var_chaste_interface__cell__V - var_reversal_potentials__ek)) + (0.040000000000000001 * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof * (var_chaste_interface__cell__V - var_reversal_potentials__ek))) + var_INaCa__xiNaCa + (var_ICaL__jca * 16.0) + var_INaK__xiNaK + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // nA_per_nF
            d_dt_chaste_interface__cell__V = var_cell__Itotal; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__INa__xm;
        rDY[2] = d_dt_chaste_interface__INa__xh;
        rDY[3] = d_dt_chaste_interface__INa__xj;
        rDY[4] = d_dt_chaste_interface__ICaL__c1;
        rDY[5] = d_dt_chaste_interface__ICaL__c2;
        rDY[6] = d_dt_chaste_interface__ICaL__xi1ca;
        rDY[7] = d_dt_chaste_interface__ICaL__xi1ba;
        rDY[8] = d_dt_chaste_interface__ICaL__xi2ca;
        rDY[9] = d_dt_chaste_interface__ICaL__xi2ba;
        rDY[10] = d_dt_chaste_interface__IKr__xr;
        rDY[11] = d_dt_chaste_interface__IKs__xs1;
        rDY[12] = d_dt_chaste_interface__IKs__xs2;
        rDY[13] = d_dt_chaste_interface__Ito__xtos;
        rDY[14] = d_dt_chaste_interface__Ito__ytos;
        rDY[15] = d_dt_chaste_interface__Ito__xtof;
        rDY[16] = d_dt_chaste_interface__Ito__ytof;
        rDY[17] = d_dt_chaste_interface__Irel__Ca_JSR;
        rDY[18] = d_dt_chaste_interface__Irel__xir;
        rDY[19] = d_dt_chaste_interface__Na__Na_i;
        rDY[20] = d_dt_chaste_interface__Ca__Ca_dyad;
        rDY[21] = d_dt_chaste_interface__Ca__Ca_submem;
        rDY[22] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[23] = d_dt_chaste_interface__Ca__Ca_NSR;
        rDY[24] = d_dt_chaste_interface__Ca__tropi;
        rDY[25] = d_dt_chaste_interface__Ca__trops;
    }
    
template<>
void OdeSystemInformation<CellMahajan2008FromCellML>::Initialise(void)
{
    this->mSystemName = "mahajan_shiferaw_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.169816169406);

    this->mVariableNames.push_back("INa__xm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    this->mVariableNames.push_back("INa__xh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    this->mVariableNames.push_back("INa__xj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000018211252);

    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000033616596);

    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    this->mVariableNames.push_back("Irel__Ca_JSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    this->mVariableNames.push_back("Ca__Ca_dyad");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    this->mVariableNames.push_back("Ca__Ca_submem");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.256752008084);

    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellMahajan2008FromCellML)
