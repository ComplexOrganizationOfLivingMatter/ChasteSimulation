#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fox_model_2002
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:13:45 2016
//! 
//! <autogenerated>

#include "FoxModel2002CvodeOpt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFoxModel2002FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFoxModel2002FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFoxModel2002FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<106; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellFoxModel2002FromCellMLCvodeOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellFoxModel2002FromCellMLCvodeOpt_LookupTables(const CellFoxModel2002FromCellMLCvodeOpt_LookupTables&);
    CellFoxModel2002FromCellMLCvodeOpt_LookupTables& operator= (const CellFoxModel2002FromCellMLCvodeOpt_LookupTables&);
    CellFoxModel2002FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 106;
        mTableMins[0] = -120.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 199.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellFoxModel2002FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][106];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 1.0 / (exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = 1.0 / pow(exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = (exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037441703461708581) * 1000.0) * 2000.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581) * 2628072.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 1.3456270662374128e-07 / pow(1.0 + (0.20000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 0.00045482194838824554 * (0.00029585798816568048 * (1.0 / (1.0 + (0.20000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = ((0.013104596211598004 * exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037441703461708581)) * 1000.0) * 2000.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = ( -0.024337107250110582 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)) * 2628072.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = (((4.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467))) * 0.0032258064516129032) * exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767))) * (1.0 / (exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = 1.0 / (1.0 + (1.6499999999999999 * exp(0.050000000000000003 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = -((0.25 * (exp( -0.01 * var_chaste_interface__membrane__V) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V)))) + (0.070000000000000007 * (exp(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0) / (1.0 + exp(-(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = ((0.16025641030000001 / pow(1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103), 2.0)) * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)) * ((0.25 * (exp( -0.01 * var_chaste_interface__membrane__V) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V)))) + (0.070000000000000007 * (exp(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0) / (1.0 + exp(-(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = 1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = ((( -0.0025000000000000001 * (exp( -0.01 * var_chaste_interface__membrane__V) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V)))) + (((0.017500000000000002 * exp( -0.01 * var_chaste_interface__membrane__V)) / pow(1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V), 2.0)) * exp( -0.070000000000000007 * var_chaste_interface__membrane__V))) - (0.0035000000000000001 * (exp(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0) / (1.0 + exp(-(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0)))))) - (((0.0035000000000000001 * exp(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0)) / pow(1.0 + exp(-(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0)), 2.0)) * exp(-(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = -(1.0 / (30.0 + (200.0 / (1.0 + exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = (( -0.20000000000000001 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 2.5), 2.0)) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 2.5)) * (1.0 / (30.0 + (200.0 / (1.0 + exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = 1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 2.5));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = pow(30.0 + (200.0 / (1.0 + exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = pow(1.0 + exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = 1.0 / pow(1.0 + (1.6499999999999999 * exp(0.050000000000000003 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = exp(0.050000000000000003 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = 0.00090964389677649108 * (0.00029585798816568048 * (1.0 / (1.0 + (0.20000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = 2.0 * (((1.3456270662374128e-07 * (1.0 / (1.0 + (0.20000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581))))) * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)) * 2628072.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = ( -0.13500000000000001 * exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999)) - (7.5 / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 1.1000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] =  -0.019852941169999999 * exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 0.75 / pow(1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 1.1000000000000001), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 1.1000000000000001);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = ( -0.17499999999999999 * (exp(( -0.043478260869565216 * var_chaste_interface__membrane__V) - 4.3478260869565215) / (1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 11.85)))) - (0.29999999999999999 / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] =  -0.0076086956520000004 * (exp(( -0.043478260869565216 * var_chaste_interface__membrane__V) - 4.3478260869565215) / (1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 11.85)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = (0.026249999999999999 * exp(( -0.043478260869565216 * var_chaste_interface__membrane__V) - 4.3478260869565215)) / pow(1.0 + exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 11.85), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 11.85);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = 0.029999999999999999 / pow(1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = (( -0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)))) - (0.080000000000000002 * exp( -0.090909090909090912 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = 0.32000000000000001 * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = (0.032000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / pow(1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = 0.0072727272729999999 * exp( -0.090909090909090912 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467) * ((0.0032258064516129032 * ((149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 4.0)) * (1.0 / (exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = (149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 4.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = 1.0 / (exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = (1.0 / (exp(2.0 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 1.0)) *  -3.773584905660377;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = ((1.3456270662374128e-07 * (1.0 / (1.0 + (0.20000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581))))) * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581)) * 2628072.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = 0.0032258064516129032 * ((149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 4.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = (0.0032258064516129032 * ((149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)) - 4.0)) * (1.0 / (exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = pow(exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = 0.0016999999999999999 / pow(1.0 + (2.5 * exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 2.7999999999999998)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 2.7999999999999998);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = 0.5 * (0.013599999999999999 / (1.0 + (2.5 * exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 2.7999999999999998))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = (((((4.5359999999999996 / pow(2.0 + exp(0.06065555960796791 * (var_chaste_interface__membrane__V -  -96.692526697705418)), 2.0)) * 0.23529411764705882) * (var_chaste_interface__membrane__V -  -96.692526697705418)) * 96.5) * 0.00038799692706433767) * exp(0.06065555960796791 * (var_chaste_interface__membrane__V -  -96.692526697705418));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][54] = (2.7999999999999998 / (2.0 + exp(0.06065555960796791 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 0.23529411764705882;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][55] = ((0.00037056856194479999 / pow(1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)), 2.0)) * (var_chaste_interface__membrane__V -  -96.692526697705418)) * exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][56] = 0.0022160000000000001 / (1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][57] = ((((0.69299999999999995 / pow((1.0 + (0.1245 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767)))) + (0.03531084004485828 * exp(-((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767))), 2.0)) * 0.5) * 4.0) * 0.18181818181818182) * (( -0.00046614920809827181 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767))) - (0.0013220980019434084 * exp(-((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][58] = ( -0.5 * (0.013599999999999999 / (1.0 + (2.5 * exp((0.10000000000000001 * var_chaste_interface__membrane__V) + 2.7999999999999998))))) * (2.0 * (var_chaste_interface__membrane__V -  -96.692526697705418));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][59] = ((0.18190000000000001 / pow(1.0 + exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V)), 2.0)) * exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V))) * (1.0 / (43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][60] = 1.0 / (1.0 + exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][61] = pow(43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V)))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][62] = pow(exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][63] = (0.1691 * exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V))) - (0.012800000000000001 * exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][64] = -(1.0 / (43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][65] = ((0.073529411759999996 / pow(1.0 + exp(( -0.073529411759999996 * var_chaste_interface__membrane__V) + 1.1764705879999999), 2.0)) * exp(( -0.073529411759999996 * var_chaste_interface__membrane__V) + 1.1764705879999999)) * (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V - 10.0)) * (1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V - 10.0)) * (1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006) - 1.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][66] = 1.0 / (1.0 + exp(( -0.073529411759999996 * var_chaste_interface__membrane__V) + 1.1764705879999999));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][67] = (((7.1899999999999999e-05 * (1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48)))) - (((1.0641200000000001e-05 * (var_chaste_interface__membrane__V - 10.0)) / pow(1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48), 2.0)) * exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48))) + (0.00013100000000000001 * (1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006) - 1.0)))) - (((8.9996999999999996e-06 * (var_chaste_interface__membrane__V - 10.0)) / pow(exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006) - 1.0, 2.0)) * exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][68] = -(((7.1899999999999999e-05 * (var_chaste_interface__membrane__V - 10.0)) * (1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V - 10.0)) * (1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006) - 1.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][69] = 0.0016153732000000001 * exp(0.035770000000000003 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][70] = 0.0061683930000000003 * exp( -0.062370000000000002 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][71] = ( -0.045159999999999999 * exp(0.035770000000000003 * var_chaste_interface__membrane__V)) - (0.098900000000000002 * exp( -0.062370000000000002 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][72] =  -0.001083 * (exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002) / (1.0 + (0.051334999999999999 * exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][73] = (5.5595805000000001e-05 * pow(exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002), 2.0)) / pow(1.0 + (0.051334999999999999 * exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][74] = 0.001083 * (exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002)) / (1.0 + (0.051334999999999999 * exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][75] = (5.5595805000000001e-05 * pow(exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002)), 2.0)) / pow(1.0 + (0.051334999999999999 * exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][76] = ( -0.0054149999999999997 * (exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002) / (1.0 + (0.051334999999999999 * exp((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002))))) - (0.0054149999999999997 * (exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002)) / (1.0 + (0.051334999999999999 * exp(-((-(0.20000000000000001 * var_chaste_interface__membrane__V)) - 6.7000000000000002))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][77] = 1.0 / (1.0 + (2.5 * exp(0.10000000000000001 * (var_chaste_interface__membrane__V + 28.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][78] = 1500.0 / ((1.0 + (0.20000000000000001 * exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761))) * 11147219297.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][79] = exp((var_chaste_interface__membrane__V * 33.774999999999999) * 0.00038799692706433761) * 2000000.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][80] = exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][81] = exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][82] = exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][83] = (149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761)) - 4.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][84] = exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][85] = 1.0 + (1.6499999999999999 * exp(var_chaste_interface__membrane__V * 0.050000000000000003));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][86] = (((1.0 / (2.0 + exp(0.060655559607967903 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 11.199999999999999) * 0.058823529411764705) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][87] = 0.0022160000000000001 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][88] = (((0.69299999999999995 * (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9.6500000000000004) * 0.00038799692706433761)) + (exp(((-var_chaste_interface__membrane__V) * 96.5) * 0.00038799692706433761) * 0.035310840049036757)))) * 0.5) * 4.0) * 0.18181818181818182;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][89] = (0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][90] = 0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][91] = 0.13500000000000001 * exp((var_chaste_interface__membrane__V + 80.0) *  -0.14705882352941177);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][92] = 7.5 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 11.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][93] = (0.17499999999999999 * exp((var_chaste_interface__membrane__V + 100.0) *  -0.043478260869565216)) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 79.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][94] = 0.29999999999999999 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][95] = 43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][96] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 16.0) *  -0.073529411764705885));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][97] = 1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V - 10.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V - 10.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V - 10.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V - 10.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][98] = 0.045159999999999999 * exp(0.035770000000000003 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][99] = 0.098900000000000002 * exp( -0.062370000000000002 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][100] = (0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][101] = (0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][102] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 12.5) * 0.20000000000000001));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][103] = 30.0 + (200.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.10526315789473684)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][104] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 10.0) *  -0.16025641025641024));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][105] = 1.0 / (((0.25 * exp( -0.01 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V))) + ((0.070000000000000007 * exp( -0.050000000000000003 * (var_chaste_interface__membrane__V + 40.0))) / (1.0 + exp(0.050000000000000003 * (var_chaste_interface__membrane__V + 40.0)))));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellFoxModel2002FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[106];
    
    // Lookup tables
    double (*_lookup_table_0)[106];
    
};

std::auto_ptr<CellFoxModel2002FromCellMLCvodeOpt_LookupTables> CellFoxModel2002FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellFoxModel2002FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 50.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellFoxModel2002FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 11);
    }
    
    CellFoxModel2002FromCellMLCvodeOpt::CellFoxModel2002FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                13,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFoxModel2002FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellFoxModel2002FromCellMLCvodeOpt::~CellFoxModel2002FromCellMLCvodeOpt()
    {
    }
    
    AbstractLookupTableCollection* CellFoxModel2002FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double CellFoxModel2002FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        
        // Lookup table indexing
        const bool _oob_0 = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * _lt_0_row[81]) - 682.0)) / _lt_0_row[82]; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * _lt_0_row[83]) / _lt_0_row[84]; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = _lt_0_row[77] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
        const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = _lt_0_row[78] * (_lt_0_row[79] - (_lt_0_row[80] * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + _lt_0_row[86] + _lt_0_row[87] + var_Na_Ca_exchanger__i_NaCa + _lt_0_row[88] + var_sarcolemmal_calcium_pump__i_p_Ca + (0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347)) + var_calcium_background_current__i_Ca_b) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFoxModel2002FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320
        
        
        // Lookup table indexing
        const bool _oob_0 = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * _lt_0_row[81]) - 682.0)) / _lt_0_row[82]; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = _lt_0_row[78] * (_lt_0_row[79] - (_lt_0_row[80] * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_calcium_dynamics__J_rel = (6.0 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * (((1.0 / (1.0 + pow(2000.0 / var_chaste_interface__calcium_dynamics__Ca_SR, 3.0))) * var_chaste_interface__calcium_dynamics__Ca_SR) - var_chaste_interface__calcium_dynamics__Ca_i)) / _lt_0_row[85]; // micromolar_per_millisecond
        const double var_calcium_dynamics__J_leak = 9.9999999999999995e-07 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = 0.10000000000000001 / (1.0 + pow(0.32000000000000001 / var_chaste_interface__calcium_dynamics__Ca_i, 2.0)); // micromolar_per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (_lt_0_row[89] * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - (_lt_0_row[90] * var_chaste_interface__fast_sodium_current_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = (_lt_0_row[91] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[92] * var_chaste_interface__fast_sodium_current_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (_lt_0_row[93] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[94] * var_chaste_interface__fast_sodium_current_j_gate__j); // per_millisecond
        const double d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = (_lt_0_row[60] - var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) / _lt_0_row[95]; // per_millisecond
        const double d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = (_lt_0_row[96] - var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) / _lt_0_row[97]; // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = (_lt_0_row[98] * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to)) - (_lt_0_row[99] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = (_lt_0_row[100] * (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) - (_lt_0_row[101] * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_gate__f = (_lt_0_row[102] - var_chaste_interface__L_type_Ca_current_f_gate__f) / _lt_0_row[103]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_d_gate__d = (_lt_0_row[104] - var_chaste_interface__L_type_Ca_current_d_gate__d) / _lt_0_row[105]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = ((1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 5.5555555555555554, 3.0))) - var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * 0.033333333333333333; // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (20.0 / pow(2.0 + var_chaste_interface__calcium_dynamics__Ca_i, 2.0)))) * (((var_calcium_dynamics__J_rel + var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_up) - (0.03075923579139864 * ((var_L_type_Ca_current__i_Ca + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) - (2.0 * var_Na_Ca_exchanger__i_NaCa)))); // 'micromole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = ((1.0 / (1.0 + (6000000.0 / pow(600.0 + var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)))) * ((var_calcium_dynamics__J_up - var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_rel) * 2.584e-05) * 500000.0; // 'micromole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
            const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * _lt_0_row[83]) / _lt_0_row[84]; // microA_per_microF
            const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = _lt_0_row[77] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
            const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
            const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = -(var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + _lt_0_row[86] + _lt_0_row[87] + var_Na_Ca_exchanger__i_NaCa + _lt_0_row[88] + var_sarcolemmal_calcium_pump__i_p_Ca + (0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347)) + var_calcium_background_current__i_Ca_b + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__calcium_dynamics__Ca_i;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__calcium_dynamics__Ca_SR;
    }
    
    void CellFoxModel2002FromCellMLCvodeOpt::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320
        
        // Lookup table indexing
        const bool _oob_0 = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFoxModel2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_t1 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t3 = (12.800000000000001 * var_t1) * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t4 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t19 = var_chaste_interface__calcium_dynamics__Ca_i * _lt_0_row[0]; // dimensionless
        const double var_t21 = var_t19 - 682.0; // dimensionless
        const double var_t24 = var_t21 * _lt_0_row[1]; // dimensionless
        const double var_t25 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t26 = var_t25 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t29 = (0.00018210146895636584 * var_t24) * var_t26; // dimensionless
        const double var_t42 = (((8.0 * ((((1.26e-05 * var_chaste_interface__membrane__V) * 898632.125) * 0.014467049241032556) * 1.040582726326743e-05)) * var_t19) * _lt_0_row[1]) * var_t26; // dimensionless
        const double var_t47 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t51 = (((((8.0 * ((((1.26e-05 * var_chaste_interface__membrane__V) * 898632.125) * 0.014467049241032556) * 1.040582726326743e-05)) * var_t21) * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t47) * _lt_0_row[0]; // dimensionless
        const double var_t53 = 5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t61 = 1.0 + ((((5.0399999999999999e-05 * (var_chaste_interface__membrane__V * 9312.25)) * 0.00038799692706433767) * var_t24) *  -3.773584905660377); // dimensionless
        const double var_t63 = 1.0 / pow(var_t61, 2.0); // dimensionless
        const double var_t74 = 0.0032258064516129032 * var_t21; // dimensionless
        const double var_t101 = 1.0 / var_t61; // dimensionless
        const double var_t108 = var_t47 * var_t101; // dimensionless
        const double var_t109 = var_t53 * var_t108; // dimensionless
        const double var_t154 = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to; // dimensionless
        const double var_t217 = _lt_0_row[3] - (_lt_0_row[4] * var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t224 = (((((_lt_0_row[5] * var_t217) * 0.20000000000000001) *  -0.65000000000000002) * 96.5) * 0.00038799692706433767) * _lt_0_row[6]; // dimensionless
        const double var_t241 = _lt_0_row[7] * (_lt_0_row[8] - (_lt_0_row[9] * var_chaste_interface__calcium_dynamics__Ca_i)); // dimensionless
        const double var_t309 = (_lt_0_row[1] * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t318 = _lt_0_row[1] * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t319 = var_t318 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t323 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t329 = var_t318 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t342 = _lt_0_row[10] * var_t26; // dimensionless
        const double var_t365 = 0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t366 = 1.0 / var_t365; // dimensionless
        const double var_t367 = 0.050000000000000003 * var_t366; // dimensionless
        const double var_t368 = 0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t371 = var_t368 / pow(var_t365, 2.0); // dimensionless
        const double var_t374 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t377 = 0.0051306426321243524 * var_t374; // dimensionless
        const double var_t383 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t430 = 1.0 - var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t546 = 1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // dimensionless
        const double var_t642 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t643 = var_t642 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t655 = 2.0 + var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t656 = pow(var_t655, 2.0); // dimensionless
        const double var_t659 = 1.0 + (20.0 / var_t656); // dimensionless
        const double var_t660 = 1.0 / var_t659; // dimensionless
        const double var_t661 = 6.0 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t662 = var_t661 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t665 = (1.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t667 = 1.0 + (8000000000.0 * var_t665); // dimensionless
        const double var_t668 = 1.0 / var_t667; // dimensionless
        const double var_t670 = (var_t668 * var_chaste_interface__calcium_dynamics__Ca_SR) - var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t671 = var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_t670; // dimensionless
        const double var_t695 = var_t671 * _lt_0_row[11]; // dimensionless
        const double var_t701 = 0.00038799692706433767 * var_t21; // dimensionless
        const double var_t723 = var_t662 * var_t695; // dimensionless
        const double var_t725 = 9.9999999999999995e-07 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t729 = 1.0 + (0.1024 / var_t642); // dimensionless
        const double var_t731 = 0.10000000000000001 / var_t729; // dimensionless
        const double var_t759 = (var_t661 * var_t47) * _lt_0_row[11]; // dimensionless
        const double var_t766 = ((0.20000000000000001 / pow(var_t729, 2.0)) * 0.1024) / var_t643; // dimensionless
        const double var_t783 = (((var_t662 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * (((24000000000.0 / pow(var_t667, 2.0)) * var_t665) + var_t668)) * _lt_0_row[11]) + 9.9999999999999995e-07; // dimensionless
        const double var_t786 = 600.0 + var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t787 = pow(var_t786, 2.0); // dimensionless
        const double var_t790 = 1.0 + (6000000.0 / var_t787); // dimensionless
        const double var_t791 = 1.0 / var_t790; // dimensionless
        const double var_t792 = var_t791 * 6.0; // dimensionless
        const double var_t804 = (var_t670 * _lt_0_row[11]) * 12.92; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((-var_t3) * var_t4) - var_t29) - var_t42) + var_t51) + (((((((1000.0 * var_t53) * var_t47) * var_t63) * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467)) * _lt_0_row[46]) * _lt_0_row[43]) * ((((0.056451455376473413 * var_t74) * _lt_0_row[44]) + ((((((8.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 898632.125) * 0.014467049241032556))) * 1.040582726326743e-05) * var_chaste_interface__calcium_dynamics__Ca_i) * _lt_0_row[0]) * _lt_0_row[1]) *  -3.773584905660377)) - ((((((8.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 898632.125) * 0.014467049241032556))) * 1.040582726326743e-05) * var_t21) * _lt_0_row[2]) *  -3.773584905660377) * _lt_0_row[0])))) - (((((0.00057899999999999998 * var_t26) * var_t101) * 9312.25) * 0.12027904738994467) * _lt_0_row[47])) - ((((((1000.0 * var_t109) * ((var_chaste_interface__membrane__V * 898632.125) * 0.014467049241032556)) * 1.040582726326743e-05) * 149.40000000000001) * _lt_0_row[48]) * _lt_0_row[43])) + ((((((1000.0 * var_t109) * ((var_chaste_interface__membrane__V * 898632.125) * 0.014467049241032556)) * 1.040582726326743e-05) * _lt_0_row[42]) / _lt_0_row[49]) * _lt_0_row[48])) + (((_lt_0_row[50] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) * (2.0 * (var_chaste_interface__membrane__V -  -96.692526697705418))) * _lt_0_row[51])) - ((_lt_0_row[52] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) * 2.0)) + ((((((((((( -0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0)) - (var_t154 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) + _lt_0_row[53]) - _lt_0_row[54]) - _lt_0_row[55]) - _lt_0_row[56]) + var_t224) - var_t241) + _lt_0_row[57]) - 0.0030999999999999999) - 0.00038420000000000001)));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * (((_lt_0_row[37] * var_t383) - ((_lt_0_row[38] * var_t383) * _lt_0_row[39])) + (_lt_0_row[40] * var_chaste_interface__fast_sodium_current_m_gate__m));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[27] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - ((_lt_0_row[28] * var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[29]));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * (((_lt_0_row[31] * var_t430) - ((_lt_0_row[32] * var_t430) * _lt_0_row[33])) - ((_lt_0_row[34] * var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[35]));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[59] + ((((_lt_0_row[60] - var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) / _lt_0_row[61]) / _lt_0_row[62]) * _lt_0_row[63]));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[65] + ((_lt_0_row[66] - var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) * _lt_0_row[67]));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * ((_lt_0_row[69] * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to)) + (_lt_0_row[70] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * ((((_lt_0_row[72] * var_t546) + (_lt_0_row[73] * var_t546)) - (_lt_0_row[74] * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) + (_lt_0_row[75] * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to));
        DENSE_ELEM(rJacobian, 8, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[17] + ((((21.05263158 * (_lt_0_row[18] - var_chaste_interface__L_type_Ca_current_f_gate__f)) / _lt_0_row[19]) / _lt_0_row[20]) * _lt_0_row[21]));
        DENSE_ELEM(rJacobian, 9, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[13] + ((_lt_0_row[14] - var_chaste_interface__L_type_Ca_current_d_gate__d) * _lt_0_row[15]));
        DENSE_ELEM(rJacobian, 11, 0) = var_chaste_interface__environment__fake_dt * (var_t660 * ((((( -0.082500000000000004 * var_t662) * var_t671) * _lt_0_row[22]) * _lt_0_row[23]) - (0.030759235791398644 * (((((var_t29 + var_t42) - var_t51) + 0.00038420000000000001) + (2.0 * var_t224)) - (2.0 * var_t241)))));
        DENSE_ELEM(rJacobian, 12, 0) = var_chaste_interface__environment__fake_dt * (((((((0.082500000000000004 * var_t792) * var_t26) * var_t670) * _lt_0_row[22]) * _lt_0_row[23]) * 2.584e-05) * 500000.0);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -38.400000000000006 * var_t1) * var_t4) * (var_chaste_interface__membrane__V - 70.100138334982347)));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * (_lt_0_row[36]);
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t3) * var_chaste_interface__fast_sodium_current_j_gate__j) * (var_chaste_interface__membrane__V - 70.100138334982347)));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (_lt_0_row[26]);
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t3) * var_chaste_interface__fast_sodium_current_h_gate__h) * (var_chaste_interface__membrane__V - 70.100138334982347)));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (_lt_0_row[30]);
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : _lt_0_row[58]);
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (_lt_0_row[64]);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (( -0.049000000000000002 * var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) * (var_chaste_interface__membrane__V -  -83.637138326059628)));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (_lt_0_row[68]);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (( -0.23815 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to) * (var_chaste_interface__membrane__V -  -96.692526697705418)));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (_lt_0_row[71]);
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t154) * (var_chaste_interface__membrane__V -  -96.692526697705418)));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (_lt_0_row[76]);
        DENSE_ELEM(rJacobian, 0, 8) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467))) * var_t74) * var_t309) - ((0.00057899999999999998 * var_t108) * _lt_0_row[41])));
        DENSE_ELEM(rJacobian, 8, 8) = var_chaste_interface__environment__fake_dt * (_lt_0_row[16]);
        DENSE_ELEM(rJacobian, 11, 8) = var_chaste_interface__environment__fake_dt * (var_t660 * (((6.0 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_t695) - (((2.0 * (0.0072182298761609906 * var_chaste_interface__membrane__V)) * var_t701) * var_t309)));
        DENSE_ELEM(rJacobian, 12, 8) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t47) * var_t804);
        DENSE_ELEM(rJacobian, 0, 9) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467))) * var_t74) * var_t319) - (((0.00057899999999999998 * var_t323) * var_t101) * _lt_0_row[41])));
        DENSE_ELEM(rJacobian, 9, 9) = var_chaste_interface__environment__fake_dt * (_lt_0_row[12]);
        DENSE_ELEM(rJacobian, 11, 9) = var_chaste_interface__environment__fake_dt * (var_t660 * ((var_t661 * var_t695) - (((2.0 * (0.0072182298761609906 * var_chaste_interface__membrane__V)) * var_t701) * var_t319)));
        DENSE_ELEM(rJacobian, 12, 9) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t323) * var_t804);
        DENSE_ELEM(rJacobian, 0, 10) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467))) * var_t74) * var_t329) - (((0.00057899999999999998 * var_t25) * var_t101) * _lt_0_row[41])));
        DENSE_ELEM(rJacobian, 10, 10) = var_chaste_interface__environment__fake_dt * ( -0.033333333333333333);
        DENSE_ELEM(rJacobian, 11, 10) = var_chaste_interface__environment__fake_dt * (var_t660 * ((((var_t661 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_t670) * _lt_0_row[11]) - (((2.0 * (0.0072182298761609906 * var_chaste_interface__membrane__V)) * var_t701) * var_t329)));
        DENSE_ELEM(rJacobian, 12, 10) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t25) * var_t804);
        DENSE_ELEM(rJacobian, 0, 11) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((-var_t342) + ((((((((((((0.0023159999999999999 * var_t25) * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * var_t63) * pow(var_chaste_interface__membrane__V, 2.0)) * 86718000.0625) * 0.014467049241032556) * 1.040582726326743e-05) * _lt_0_row[42]) * _lt_0_row[43]) * 1.26e-05) * _lt_0_row[0]) * _lt_0_row[44])) + _lt_0_row[45]) - var_t367) + var_t371) - var_t377));
        DENSE_ELEM(rJacobian, 10, 11) = var_chaste_interface__environment__fake_dt * ((( -0.10000000000000001 / pow(1.0 + (var_t643 * 171.46776406035667), 2.0)) * var_t642) * 171.46776406035667);
        DENSE_ELEM(rJacobian, 11, 11) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t659, 2.0)) * (((var_t723 + var_t725) - var_t731) - (0.030759235791398644 * (((((((4.0 * (1.26e-05 * ((var_chaste_interface__membrane__V * 9312.25) * 0.12027904738994467))) * var_t74) * _lt_0_row[1]) * var_t26) + (0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 * var_t374))))) + (var_t368 * var_t366)) - (_lt_0_row[24] * var_t217))))) * 20.0) / var_t656) / var_t655) + (var_t660 * ((((-var_t759) - 9.9999999999999995e-07) - var_t766) - (0.030759235791398644 * ((((var_t342 + var_t377) + var_t367) - var_t371) + _lt_0_row[25])))));
        DENSE_ELEM(rJacobian, 12, 11) = var_chaste_interface__environment__fake_dt * ((var_t791 * ((var_t766 + 9.9999999999999995e-07) + var_t759)) * 12.92);
        DENSE_ELEM(rJacobian, 11, 12) = var_chaste_interface__environment__fake_dt * (var_t660 * var_t783);
        DENSE_ELEM(rJacobian, 12, 12) = var_chaste_interface__environment__fake_dt * (((((((((2.0 / pow(var_t790, 2.0)) * ((var_t731 - var_t725) - var_t723)) * 2.584e-05) * 500000.0) * 10000.0) * 600.0) / var_t787) / var_t786) - ((var_t791 * var_t783) * 12.92));
    }
    
template<>
void OdeSystemInformation<CellFoxModel2002FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "fox_model_2002";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-94.7);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00024676);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99869);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99887);

    this->mVariableNames.push_back("rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.229);

    this->mVariableNames.push_back("slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("transient_outward_potassium_current_X_to_gate__X_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00003742);

    this->mVariableNames.push_back("transient_outward_potassium_current_Y_to_gate__Y_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.983);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("L_type_Ca_current_f_Ca_gate__f_Ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.942);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0472);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(320);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFoxModel2002FromCellMLCvodeOpt)
#endif // CHASTE_CVODE
