#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hodgkin_huxley_squid_axon_model_1952_modified
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:16:04 2016
//! 
//! <autogenerated>

#include "HodgkinHuxley1952Cvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    CellHodgkinHuxley1952FromCellMLCvode::CellHodgkinHuxley1952FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                4,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellHodgkinHuxley1952FromCellMLCvode>::Instance();
        Init();

        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellHodgkinHuxley1952FromCellMLCvode::~CellHodgkinHuxley1952FromCellMLCvode()
    {
    }
    
    double CellHodgkinHuxley1952FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.325
        
        const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
        const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
        const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
        const double var_leakage_current__i_L = 0.29999999999999999 * (var_chaste_interface__membrane__V -  -64.387); // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellHodgkinHuxley1952FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.325
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double d_dt_chaste_interface__sodium_channel_m_gate__m = ((((var_chaste_interface__membrane__V <  -49.999989999999997) && (var_chaste_interface__membrane__V >  -50.000010000000003)) ? 1.0 : (( -0.10000000000000001 * (var_chaste_interface__membrane__V + 50.0)) / (exp((-(var_chaste_interface__membrane__V + 50.0)) * 0.10000000000000001) - 1.0))) * (1.0 - var_chaste_interface__sodium_channel_m_gate__m)) - ((4.0 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.055555555555555552)) * var_chaste_interface__sodium_channel_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_h_gate__h = ((0.070000000000000007 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.050000000000000003)) * (1.0 - var_chaste_interface__sodium_channel_h_gate__h)) - ((1.0 / (exp((-(var_chaste_interface__membrane__V + 45.0)) * 0.10000000000000001) + 1.0)) * var_chaste_interface__sodium_channel_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__potassium_channel_n_gate__n = ((((var_chaste_interface__membrane__V <  -64.999899999999997) && (var_chaste_interface__membrane__V >  -65.000100000000003)) ? 0.10000000000000001 : (( -0.01 * (var_chaste_interface__membrane__V + 65.0)) / (exp((-(var_chaste_interface__membrane__V + 65.0)) * 0.10000000000000001) - 1.0))) * (1.0 - var_chaste_interface__potassium_channel_n_gate__n)) - ((0.125 * exp((var_chaste_interface__membrane__V + 75.0) * 0.012500000000000001)) * var_chaste_interface__potassium_channel_n_gate__n); // per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__Cm = 1.0; // microF_per_cm2
            const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
            const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
            const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
            const double var_leakage_current__i_L = 0.29999999999999999 * (var_chaste_interface__membrane__V -  -64.387); // microA_per_cm2
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = (-(var_chaste_interface__membrane__i_Stim + var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L)) / var_membrane__Cm; // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__sodium_channel_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__sodium_channel_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__potassium_channel_n_gate__n;
    }
    
    void CellHodgkinHuxley1952FromCellMLCvode::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.325
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_membrane__Cm = 1.0; // microF_per_cm2
        const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
        const double var_t1 = pow(var_chaste_interface__sodium_channel_m_gate__m, 2.0); // dimensionless
        const double var_t3 = (var_sodium_channel__g_Na * var_t1) * var_chaste_interface__sodium_channel_m_gate__m; // dimensionless
        const double var_t5 = pow(var_chaste_interface__potassium_channel_n_gate__n, 2.0); // dimensionless
        const double var_t9 = 1.0 / var_membrane__Cm; // dimensionless
        const double var_t12 = (var_chaste_interface__membrane__V -  -75.0) - 115.0; // dimensionless
        const double var_t26 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t28 = exp((-var_t26) - 5.0); // dimensionless
        const double var_t29 = var_t28 - 1.0; // dimensionless
        const double var_t38 = ( -0.10000000000000001 / var_t29) - (((0.01 * (var_chaste_interface__membrane__V + 50.0)) / pow(var_t29, 2.0)) * var_t28); // dimensionless
        const double var_t48 = exp(( -0.055555555555555552 * var_chaste_interface__membrane__V) - 4.166666666666667); // dimensionless
        const double var_t56 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t68 = exp(( -0.050000000000000003 * var_chaste_interface__membrane__V) - 3.75); // dimensionless
        const double var_t73 = exp((-var_t56) - 4.5); // dimensionless
        const double var_t74 = var_t73 + 1.0; // dimensionless
        const double var_t86 = exp((-var_t26) - 6.5); // dimensionless
        const double var_t87 = var_t86 - 1.0; // dimensionless
        const double var_t96 = ( -0.01 / var_t87) - (((0.001 * (var_chaste_interface__membrane__V + 65.0)) / pow(var_t87, 2.0)) * var_t86); // dimensionless
        const double var_t106 = exp((0.012500000000000001 * var_chaste_interface__membrane__V) + 0.9375); // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((((-var_t3) * var_chaste_interface__sodium_channel_h_gate__h) - (36.0 * pow(var_t5, 2.0))) - 0.29999999999999999) * var_t9));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((((var_chaste_interface__membrane__V <=  -50.000010000000003) ? var_t38 : (var_chaste_interface__membrane__V <=  -49.999989999999997) ? 0.0 : ( -49.999989999999997 < var_chaste_interface__membrane__V) ? var_t38 : NAN) * (1.0 - var_chaste_interface__sodium_channel_m_gate__m)) + ((0.22222222222222221 * var_t48) * var_chaste_interface__sodium_channel_m_gate__m));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((( -0.0035000000000000001 * var_t68) * (1.0 - var_chaste_interface__sodium_channel_h_gate__h)) - (((0.10000000000000001 / pow(var_t74, 2.0)) * var_chaste_interface__sodium_channel_h_gate__h) * var_t73));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * ((((var_chaste_interface__membrane__V <=  -65.000100000000003) ? var_t96 : (var_chaste_interface__membrane__V <=  -64.999899999999997) ? 0.0 : ( -64.999899999999997 < var_chaste_interface__membrane__V) ? var_t96 : NAN) * (1.0 - var_chaste_interface__potassium_channel_n_gate__n)) - ((0.0015625000000000001 * var_t106) * var_chaste_interface__potassium_channel_n_gate__n));
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((( -3.0 * var_sodium_channel__g_Na) * var_t1) * var_chaste_interface__sodium_channel_h_gate__h) * var_t12) * var_t9));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * ((-(((var_chaste_interface__membrane__V <  -49.999989999999997) && ( -50.000010000000003 < var_chaste_interface__membrane__V)) ? 1.0 : (( -0.10000000000000001 * (var_chaste_interface__membrane__V + 50.0)) / (exp((-var_t56) - 5.0) - 1.0)))) - (4.0 * var_t48));
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t3) * var_t12) * var_t9));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (( -0.070000000000000007 * var_t68) - (1.0 / var_t74));
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -144.0 * var_t5) * var_chaste_interface__potassium_channel_n_gate__n) * ((var_chaste_interface__membrane__V -  -75.0) + 12.0)) * var_t9));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * ((-(((var_chaste_interface__membrane__V <  -64.999899999999997) && ( -65.000100000000003 < var_chaste_interface__membrane__V)) ? 0.10000000000000001 : (( -0.01 * (var_chaste_interface__membrane__V + 65.0)) / (exp((-var_t56) - 6.5) - 1.0)))) - (0.125 * var_t106));
    }
    
template<>
void OdeSystemInformation<CellHodgkinHuxley1952FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "hodgkin_huxley_squid_axon_model_1952_modified";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-75);

    this->mVariableNames.push_back("sodium_channel_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05);

    this->mVariableNames.push_back("sodium_channel_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6);

    this->mVariableNames.push_back("potassium_channel_n_gate__n");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.325);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellHodgkinHuxley1952FromCellMLCvode)
#endif // CHASTE_CVODE
