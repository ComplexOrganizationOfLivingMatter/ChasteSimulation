//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: LR_Dynamic_model_2000
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:41:04 2016
//! 
//! <autogenerated>

#include "FaberRudy2000Opt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFaberRudy2000FromCellMLOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFaberRudy2000FromCellMLOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFaberRudy2000FromCellMLOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<42; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellFaberRudy2000FromCellMLOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellFaberRudy2000FromCellMLOpt_LookupTables(const CellFaberRudy2000FromCellMLOpt_LookupTables&);
    CellFaberRudy2000FromCellMLOpt_LookupTables& operator= (const CellFaberRudy2000FromCellMLOpt_LookupTables&);
    CellFaberRudy2000FromCellMLOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 42;
        mTableMins[0] = -100.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 99.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellFaberRudy2000FromCellMLOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][42];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 9.0) * 0.044642857142857144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = 0.80000000000000004 - (0.65000000000000002 / (1.0 + exp((var_chaste_interface__membrane__V + 125.0) * 0.066666666666666666)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = exp(var_chaste_interface__membrane__V * 0.01);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5) * 3.8799692706433766e-07)) + (exp(((-var_chaste_interface__membrane__V) * 96485.0) * 3.8799692706433766e-07) * 0.031854272577799742))) * 2.25;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = exp((var_chaste_interface__membrane__V *  -82012.25) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = exp((var_chaste_interface__membrane__V *  -82012.25) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = (fabs(var_chaste_interface__membrane__V + 47.130000000000003) >= 1.0000000000000001e-05) ? ((320.0 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) : 3200.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 80.0 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = (var_chaste_interface__membrane__V <  -40.0) ? (135.0 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = (var_chaste_interface__membrane__V <  -40.0) ? ((3560.0 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1000.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = (var_chaste_interface__membrane__V <  -40.0) ? ((1000.0 * (-((127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = (var_chaste_interface__membrane__V <  -40.0) ? ((121.2 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((300.0 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024)))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = (1.0 - ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 14.0)) * 0.092592592592592587));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.22222222222222221)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.17857142857142858));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 21.5)) * 0.13333333333333333));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = 0.001 / (((0.0013799999999999999 * (var_chaste_interface__membrane__V + 14.199999999999999)) / (1.0 - exp( -0.123 * (var_chaste_interface__membrane__V + 14.199999999999999)))) + ((0.00060999999999999997 * (var_chaste_interface__membrane__V + 38.899999999999999)) / (exp(0.14499999999999999 * (var_chaste_interface__membrane__V + 38.899999999999999)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V - 1.5)) * 0.059880239520958084));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = 0.001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V - 1.5)) * 0.059880239520958084));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = 0.0040000000000000001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = ((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = 1.0 / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = (15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = 1.0 / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellFaberRudy2000FromCellMLOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[42];
    
    // Lookup tables
    double (*_lookup_table_0)[42];
    
};

std::auto_ptr<CellFaberRudy2000FromCellMLOpt_LookupTables> CellFaberRudy2000FromCellMLOpt_LookupTables::mpInstance;

    double CellFaberRudy2000FromCellMLOpt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[13];
    }
    
    CellFaberRudy2000FromCellMLOpt::CellFaberRudy2000FromCellMLOpt(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFaberRudy2000FromCellMLOpt>::Instance();
        Init();

        this->mParameters[0] = 1.0; // (c,rapid_delayed_rectifier_potassium_current__ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (c,slow_delayed_rectifier_potassium_current__ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 0.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
    }
    
    CellFaberRudy2000FromCellMLOpt::~CellFaberRudy2000FromCellMLOpt()
    {
    }
    
    AbstractLookupTableCollection* CellFaberRudy2000FromCellMLOpt::GetLookupTableCollection()
    {
        return CellFaberRudy2000FromCellMLOpt_LookupTables::Instance();
    }
    
    double CellFaberRudy2000FromCellMLOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = rY[13];
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__ionic_concentrations__Nai = rY[23];
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = rY[24];
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[0]) - 0.61380000000000001)) / _lt_0_row[1]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) - 99.0)) / _lt_0_row[3]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[4]) - 3.375)) / _lt_0_row[5]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (mParameters[0] * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[6] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (mParameters[1] * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[8] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (mParameters[2] * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[9] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[15] * ((_lt_0_row[16] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[17] * ((_lt_0_row[18] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[7] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[10] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[11]) - 99.0)) / _lt_0_row[12]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[13]) - 3.375)) / _lt_0_row[14]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFaberRudy2000FromCellMLOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = rY[13];
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__calcium_dynamics__Ca_JSR = rY[14];
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__Ca_NSR = rY[15];
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__APtrack = rY[16];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack2 = rY[17];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack3 = rY[18];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = rY[19];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = rY[20];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = rY[21];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = rY[22];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__ionic_concentrations__Nai = rY[23];
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = rY[24];
        // Units: millimolar; Initial value: 141.2
        
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_membrane__Cm = 0.001; // microF
        const double var_chaste_interface__membrane__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_membrane__I_st = var_chaste_interface__membrane__I_st / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[0]) - 0.61380000000000001)) / _lt_0_row[1]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) - 99.0)) / _lt_0_row[3]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[4]) - 3.375)) / _lt_0_row[5]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (mParameters[0] * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[6] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (mParameters[1] * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[8] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (mParameters[2] * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[9] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[15] * ((_lt_0_row[16] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[17] * ((_lt_0_row[18] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[7] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[10] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[11]) - 99.0)) / _lt_0_row[12]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[13]) - 3.375)) / _lt_0_row[14]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_calcium_dynamics__i_rel = ((var_chaste_interface__calcium_dynamics__Cainfluxtrack > 0.00018000000000000001) ? (((60000.0 * (var_chaste_interface__calcium_dynamics__Cainfluxtrack - 0.00018000000000000001)) / ((0.00080000000000000004 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) - 0.00018000000000000001)) * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2) * var_chaste_interface__calcium_dynamics__APtrack2) : ((var_chaste_interface__calcium_dynamics__Cainfluxtrack <= 0.00018000000000000001) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 > 0.0)) ? (4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : 0.0) * (var_chaste_interface__calcium_dynamics__Ca_JSR - var_chaste_interface__calcium_dynamics__Cai); // millimolar_per_second
        const double var_calcium_dynamics__i_up = (8.75 * var_chaste_interface__calcium_dynamics__Cai) / (var_chaste_interface__calcium_dynamics__Cai + 0.00092000000000000003); // millimolar_per_second
        const double var_calcium_dynamics__i_leak = 0.58333333333333337 * var_chaste_interface__calcium_dynamics__Ca_NSR; // millimolar_per_second
        const double var_calcium_dynamics__i_tr = (var_chaste_interface__calcium_dynamics__Ca_NSR - var_chaste_interface__calcium_dynamics__Ca_JSR) * 5.5555555555555554; // millimolar_per_second
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = 0.001 * ((_lt_0_row[19] * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - (_lt_0_row[20] * var_chaste_interface__fast_sodium_current_m_gate__m)); // 'per millisecond'
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = 0.001 * ((_lt_0_row[21] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[22] * var_chaste_interface__fast_sodium_current_h_gate__h)); // 'per millisecond'
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = 0.001 * ((_lt_0_row[23] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[24] * var_chaste_interface__fast_sodium_current_j_gate__j)); // 'per millisecond'
        const double d_dt_chaste_interface__L_type_Ca_channel_d_gate__d = 0.001 * ((_lt_0_row[25] * (1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d)) - (_lt_0_row[26] * var_chaste_interface__L_type_Ca_channel_d_gate__d)); // 'per millisecond'
        const double d_dt_chaste_interface__L_type_Ca_channel_f_gate__f = 0.001 * ((_lt_0_row[27] * (1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f)) - (_lt_0_row[28] * var_chaste_interface__L_type_Ca_channel_f_gate__f)); // 'per millisecond'
        const double d_dt_chaste_interface__T_type_Ca_channel_b_gate__b = 0.001 * ((_lt_0_row[29] - var_chaste_interface__T_type_Ca_channel_b_gate__b) / _lt_0_row[30]); // 'per millisecond'
        const double d_dt_chaste_interface__T_type_Ca_channel_g_gate__g = 0.001 * ((_lt_0_row[31] - var_chaste_interface__T_type_Ca_channel_g_gate__g) / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012)); // 'per millisecond'
        const double d_dt_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = 0.001 * ((_lt_0_row[32] - var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr) / _lt_0_row[33]); // 'per millisecond'
        const double d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = 0.001 * ((_lt_0_row[34] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) / _lt_0_row[35]); // 'per millisecond'
        const double d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = 0.001 * ((_lt_0_row[36] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2) / _lt_0_row[37]); // 'per millisecond'
        const double d_dt_chaste_interface__transient_outward_current_zdv_gate__zdv = 0.001 * ((_lt_0_row[38] - var_chaste_interface__transient_outward_current_zdv_gate__zdv) / _lt_0_row[39]); // 'per millisecond'
        const double d_dt_chaste_interface__transient_outward_current_ydv_gate__ydv = 0.001 * ((_lt_0_row[40] - var_chaste_interface__transient_outward_current_ydv_gate__ydv) / _lt_0_row[41]); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Cai = 0.001 * ((1.0 / (1.0 + (0.00011900000000000002 / pow(0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai, 2.0)) + (3.5000000000000004e-05 / pow(0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai, 2.0)))) * ((( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - (2.0 * var_Na_Ca_exchanger__i_NaCa)) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) + ((var_calcium_dynamics__i_rel * 1.824637013204952e-13) * 38686179652.867111) + (((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 2.098332565185695e-12) * 38686179652.867111))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_JSR = 0.001 * ((1.0 / (1.0 + (8.0 / pow(0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR, 2.0)))) * (var_calcium_dynamics__i_tr - var_calcium_dynamics__i_rel)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_NSR = 0.001 * (((((-var_calcium_dynamics__i_tr) * 1.824637013204952e-13) * 476568879781.69635) - var_calcium_dynamics__i_leak) + var_calcium_dynamics__i_up); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack = 0.001 * (((( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)) > 150000.0) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack3)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__APtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack = 0.001 * ((var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001) ? (( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - var_Na_Ca_exchanger__i_NaCa) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) : ((var_chaste_interface__calcium_dynamics__APtrack2 > 0.01) && (var_chaste_interface__calcium_dynamics__APtrack <= 0.20000000000000001)) ? 0.0 : ( -500.0 * var_chaste_interface__calcium_dynamics__Cainfluxtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack = 0.001 * ((((1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR))) > 0.69999999999999996) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__APtrack3 < 0.37)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Nai = 0.001 * (((-(var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_CaNa + var_sodium_background_current__i_Na_b + var_non_specific_calcium_activated_current__i_ns_Na + (var_Na_Ca_exchanger__i_NaCa * 3.0) + (var_sodium_potassium_pump__i_NaK * 3.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Ki = 0.001 * (((-(var_L_type_Ca_channel__i_CaK + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_non_specific_calcium_activated_current__i_ns_K + ((-var_sodium_potassium_pump__i_NaK) * 2.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface__membrane__V = 0.001 * (( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)); // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        rDY[2] = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        rDY[3] = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        rDY[4] = d_dt_chaste_interface__L_type_Ca_channel_d_gate__d;
        rDY[5] = d_dt_chaste_interface__L_type_Ca_channel_f_gate__f;
        rDY[6] = d_dt_chaste_interface__T_type_Ca_channel_b_gate__b;
        rDY[7] = d_dt_chaste_interface__T_type_Ca_channel_g_gate__g;
        rDY[8] = d_dt_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        rDY[9] = d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        rDY[10] = d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        rDY[11] = d_dt_chaste_interface__transient_outward_current_zdv_gate__zdv;
        rDY[12] = d_dt_chaste_interface__transient_outward_current_ydv_gate__ydv;
        rDY[13] = d_dt_chaste_interface__calcium_dynamics__Cai;
        rDY[14] = d_dt_chaste_interface__calcium_dynamics__Ca_JSR;
        rDY[15] = d_dt_chaste_interface__calcium_dynamics__Ca_NSR;
        rDY[16] = d_dt_chaste_interface__calcium_dynamics__APtrack;
        rDY[17] = d_dt_chaste_interface__calcium_dynamics__APtrack2;
        rDY[18] = d_dt_chaste_interface__calcium_dynamics__APtrack3;
        rDY[19] = d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack;
        rDY[20] = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack;
        rDY[21] = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2;
        rDY[22] = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3;
        rDY[23] = d_dt_chaste_interface__ionic_concentrations__Nai;
        rDY[24] = d_dt_chaste_interface__ionic_concentrations__Ki;
    }
    
template<>
void OdeSystemInformation<CellFaberRudy2000FromCellMLOpt>::Initialise(void)
{
    this->mSystemName = "LR_Dynamic_model_2000";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0008);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993771);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995727);

    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.210618e-6);

    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999837);

    this->mVariableNames.push_back("T_type_Ca_channel_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000970231);

    this->mVariableNames.push_back("T_type_Ca_channel_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994305);

    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000124042);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("transient_outward_current_zdv_gate__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("transient_outward_current_ydv_gate__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6e-5);

    this->mVariableNames.push_back("calcium_dynamics__Ca_JSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__Cainfluxtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("ionic_concentrations__Nai");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9);

    this->mVariableNames.push_back("ionic_concentrations__Ki");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.2);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFaberRudy2000FromCellMLOpt)
