#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: LR_Dynamic_model_2000
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:41:27 2016
//! 
//! <autogenerated>

#include "FaberRudy2000CvodeOpt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFaberRudy2000FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFaberRudy2000FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFaberRudy2000FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<109; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellFaberRudy2000FromCellMLCvodeOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables(const CellFaberRudy2000FromCellMLCvodeOpt_LookupTables&);
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables& operator= (const CellFaberRudy2000FromCellMLCvodeOpt_LookupTables&);
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 109;
        mTableMins[0] = -100.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 99.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][109];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp(0.01 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998) * 0.0001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) * 0.0032258064516129032;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998) * 0.00025000000000000001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 0.16722408029999999 * exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = pow(1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = 1.0 / (1.0 + exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = (8.0 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0))) * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = (8.0 * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) / pow(exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0)) * exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) * (1.0 / pow(exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0, 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = (((( -0.012449999999999999 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 0.0032258064516129032) * 11.605123887418811) - ((((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 3.8799692706433766e-07) * 96485.0) * 6.1090385761878618)) * 0.75;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = pow((1.0 + (0.1245 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))))) + ((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 6.1090385761878618), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = 0.00050218147139999996 * exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = pow(1.0 + exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 6666.666666666667 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = (((4.0 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0))) * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 1.0) * 3612.0012202503353;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = 1666.6666666666667 * (1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = pow(exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998), 2.0) * 0.00025000000000000001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = (((1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0)) * exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) * 0.75) * 3612.0012202503353;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = (1.0 / ((1.0 + (0.1245 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))))) + ((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 6.1090385761878618))) * 2.25;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = (1.0 / (1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)))) * 0.0055199999999999997;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = 26306602163.949642 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = ((-(1.0 / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545789999998 : (((0.028571428570000001 / (var_chaste_interface__membrane__V + 10.0)) * (1.0 - exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))))))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))) - ((1.0 / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545789999998 : (((0.028571428570000001 / (var_chaste_interface__membrane__V + 10.0)) * (1.0 - exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))))) * (1.0 - (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 0.16025641030000001 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 1.0 / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545789999998 : (((0.028571428570000001 / (var_chaste_interface__membrane__V + 10.0)) * (1.0 - exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / pow(1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = (var_chaste_interface__membrane__V <=  -10.00001) ? ((((((0.0045787545789999998 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)) * (1.0 / (var_chaste_interface__membrane__V + 10.0))) * (1.0 - (1.0 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))) / pow(1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103), 2.0)) + (((0.0045787545789999998 * (1.0 / (var_chaste_interface__membrane__V + 10.0))) * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))))) - (((0.028571428570000001 / pow(var_chaste_interface__membrane__V + 10.0, 2.0)) * (1.0 - (1.0 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))))) : (var_chaste_interface__membrane__V <=  -9.9999900000000004) ? 0.0 : ( -9.9999900000000004 < var_chaste_interface__membrane__V) ? ((((((0.0045787545789999998 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)) * (1.0 / (var_chaste_interface__membrane__V + 10.0))) * (1.0 - (1.0 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))) / pow(1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103), 2.0)) + (((0.0045787545789999998 * (1.0 / (var_chaste_interface__membrane__V + 10.0))) * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))))) - (((0.028571428570000001 / pow(var_chaste_interface__membrane__V + 10.0, 2.0)) * (1.0 - (1.0 * exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))))) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = 1.0 / pow((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545789999998 : (((0.028571428570000001 / (var_chaste_interface__membrane__V + 10.0)) * (1.0 - exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103))) * (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = 1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = 1.0 - (1.0 / (1.0 + exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = (( -1000.0 * ((0.019699999999999999 * exp(-pow((0.033700000000000001 * var_chaste_interface__membrane__V) + 0.33700000000000002, 2.0))) + 0.02)) * ((1.0 / (1.0 + exp((0.125 * var_chaste_interface__membrane__V) + 4.0))) + (0.59999999999999998 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V)))))) - ((1000.0 * ((0.019699999999999999 * exp(-pow((0.033700000000000001 * var_chaste_interface__membrane__V) + 0.33700000000000002, 2.0))) + 0.02)) * ((1.0 - (1.0 / (1.0 + exp((0.125 * var_chaste_interface__membrane__V) + 4.0)))) - (0.59999999999999998 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = (0.019699999999999999 * exp(-pow((0.033700000000000001 * var_chaste_interface__membrane__V) + 0.33700000000000002, 2.0))) + 0.02;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = (( -0.125 * exp((0.125 * var_chaste_interface__membrane__V) + 4.0)) / pow(1.0 + exp((0.125 * var_chaste_interface__membrane__V) + 4.0), 2.0)) + ((0.029999999999999999 * exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))) / pow(1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V)), 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = exp(-pow((0.033700000000000001 * var_chaste_interface__membrane__V) + 0.33700000000000002, 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = (1.0 / (1.0 + exp((0.125 * var_chaste_interface__membrane__V) + 4.0))) + (0.59999999999999998 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = (1.0 - (1.0 / (1.0 + exp((0.125 * var_chaste_interface__membrane__V) + 4.0)))) - (0.59999999999999998 / (1.0 + exp(2.5 - (0.050000000000000003 * var_chaste_interface__membrane__V))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = -(1.0 / (0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((0.22222222220000001 * var_chaste_interface__membrane__V) + 5.5555555549999998)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = ((0.092592592589999995 * (1.0 / (0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((0.22222222220000001 * var_chaste_interface__membrane__V) + 5.5555555549999998)))))) * exp(( -0.092592592589999995 * var_chaste_interface__membrane__V) - 1.296296296)) / pow(1.0 + exp(( -0.092592592589999995 * var_chaste_interface__membrane__V) - 1.296296296), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = ((0.001355555555 * exp((0.22222222220000001 * var_chaste_interface__membrane__V) + 5.5555555549999998)) / pow(1.0 + exp((0.22222222220000001 * var_chaste_interface__membrane__V) + 5.5555555549999998), 2.0)) / pow(0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((0.22222222220000001 * var_chaste_interface__membrane__V) + 5.5555555549999998))), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = 1.0 / (1.0 + exp(( -0.092592592589999995 * var_chaste_interface__membrane__V) - 1.296296296));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = (( -0.1785714286 * (1.0 / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012))) * exp((0.1785714286 * var_chaste_interface__membrane__V) + 10.714285719999999)) / pow(1.0 + exp((0.1785714286 * var_chaste_interface__membrane__V) + 10.714285719999999), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = 1.0 / (1.0 + exp((0.1785714286 * var_chaste_interface__membrane__V) + 10.714285719999999));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = (-((var_chaste_interface__membrane__V <  -40.0) ? (135.0 * exp( -11.764705879999999 - (0.14705882349999999 * var_chaste_interface__membrane__V))) : 0.0)) - ((var_chaste_interface__membrane__V <  -40.0) ? ((3560.0 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1000.0 / (0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = (var_chaste_interface__membrane__V <  -40.0) ? ( -19.852941179999998 * exp( -11.764705879999999 - (0.14705882349999999 * var_chaste_interface__membrane__V))) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = (var_chaste_interface__membrane__V <=  -40.0) ? ((281.24000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (108500000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : ( -40.0 < var_chaste_interface__membrane__V) ? ((11.711711709999999 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)) / pow(0.13 + (0.13 * exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995)), 2.0)) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = (-((var_chaste_interface__membrane__V <  -40.0) ? (((1000.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * (( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) : 0.0)) - ((var_chaste_interface__membrane__V <  -40.0) ? ((121.2 / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) * exp( -0.01052 * var_chaste_interface__membrane__V)) : ((300.0 / (1.0 + exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 3.2000000000000002))) * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = (var_chaste_interface__membrane__V <  -40.0) ? (((((1000.0 * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * (( -31073.016 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (1.5254334000000001e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) + ((1000.0 * (1.0 / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999)))) * (( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))))) - ((((311.0 * exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999)) / pow(1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999), 2.0)) * (var_chaste_interface__membrane__V + 37.780000000000001)) * (( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))))) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][54] = (var_chaste_interface__membrane__V <=  -40.0) ? ((( -1.2750239999999999 / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001))) * exp( -0.01052 * var_chaste_interface__membrane__V)) + (((16.701360000000001 * exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001)) / pow(1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001), 2.0)) * exp( -0.01052 * var_chaste_interface__membrane__V))) : ( -40.0 < var_chaste_interface__membrane__V) ? ((( -7.6049999979999999e-05 / (1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002))) * exp( -2.5349999990000002e-07 * var_chaste_interface__membrane__V)) + (((30.0 * exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002)) / pow(1.0 + exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002), 2.0)) * exp( -2.5349999990000002e-07 * var_chaste_interface__membrane__V))) : NAN;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][55] = (-((1.0000000000000001e-05 <= fabs(var_chaste_interface__membrane__V + 47.130000000000003)) ? ((320.0 * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)))) * (var_chaste_interface__membrane__V + 47.130000000000003)) : 3200.0)) - (80.0 * exp( -0.090909090909090912 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][56] = (1.0000000000000001e-05 <= fabs(var_chaste_interface__membrane__V + 47.130000000000003)) ? ((320.0 * (1.0 / (1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)))) - (((32.0 * exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001)) / pow(1.0 - exp((-(0.10000000000000001 * var_chaste_interface__membrane__V)) - 4.7130000000000001), 2.0)) * (var_chaste_interface__membrane__V + 47.130000000000003))) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][57] = exp( -0.090909090909090912 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][58] = ((133.33333329999999 * ((0.0013799999999999999 * ((1.0 / (1.0 - exp(( -0.123 * var_chaste_interface__membrane__V) - 1.7465999999999999))) * (var_chaste_interface__membrane__V + 14.199999999999999))) + (0.00060999999999999997 * ((1.0 / (exp((0.14499999999999999 * var_chaste_interface__membrane__V) + 5.6405000000000003) - 1.0)) * (var_chaste_interface__membrane__V + 38.899999999999999))))) * exp(( -0.1333333333 * var_chaste_interface__membrane__V) - 2.866666666)) / pow(1.0 + exp(( -0.1333333333 * var_chaste_interface__membrane__V) - 2.866666666), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][59] = 1000.0 * ((((0.0013799999999999999 * (1.0 / (1.0 - exp(( -0.123 * var_chaste_interface__membrane__V) - 1.7465999999999999)))) - (((0.00016974000000000001 * exp(( -0.123 * var_chaste_interface__membrane__V) - 1.7465999999999999)) / pow(1.0 - exp(( -0.123 * var_chaste_interface__membrane__V) - 1.7465999999999999), 2.0)) * (var_chaste_interface__membrane__V + 14.199999999999999))) + (0.00060999999999999997 * (1.0 / (exp((0.14499999999999999 * var_chaste_interface__membrane__V) + 5.6405000000000003) - 1.0)))) - (((8.8449999999999995e-05 * exp((0.14499999999999999 * var_chaste_interface__membrane__V) + 5.6405000000000003)) / pow(exp((0.14499999999999999 * var_chaste_interface__membrane__V) + 5.6405000000000003) - 1.0, 2.0)) * (var_chaste_interface__membrane__V + 38.899999999999999)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][60] = 1.0 / (1.0 + exp(( -0.1333333333 * var_chaste_interface__membrane__V) - 2.866666666));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][61] = ( -1.3799999999999999 * ((1.0 / (1.0 - exp(( -0.123 * var_chaste_interface__membrane__V) - 1.7465999999999999))) * (var_chaste_interface__membrane__V + 14.199999999999999))) - (0.60999999999999999 * ((1.0 / (exp((0.14499999999999999 * var_chaste_interface__membrane__V) + 5.6405000000000003) - 1.0)) * (var_chaste_interface__membrane__V + 38.899999999999999)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][62] = 59.880239520000003 * ((((7.1899999999999999e-05 * ((1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004))) * (var_chaste_interface__membrane__V + 30.0))) + (0.00013100000000000001 * ((1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)) * (var_chaste_interface__membrane__V + 30.0)))) * exp(( -0.059880239520000003 * var_chaste_interface__membrane__V) + 0.089820359279999998)) / pow(1.0 + exp(( -0.059880239520000003 * var_chaste_interface__membrane__V) + 0.089820359279999998), 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][63] = 1000.0 * ((((7.1899999999999999e-05 * (1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004)))) - (((1.0641200000000001e-05 * exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004)) / pow(1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004), 2.0)) * (var_chaste_interface__membrane__V + 30.0))) + (0.00013100000000000001 * (1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)))) - (((8.9996999999999996e-06 * exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999)) / pow(exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0, 2.0)) * (var_chaste_interface__membrane__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][64] = 1.0 / (1.0 + exp(( -0.059880239520000003 * var_chaste_interface__membrane__V) + 0.089820359279999998));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][65] = ( -0.071900000000000006 * ((1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004))) * (var_chaste_interface__membrane__V + 30.0))) - (0.13100000000000001 * ((1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)) * (var_chaste_interface__membrane__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][66] = 14.970059880000001 * ((((7.1899999999999999e-05 * ((1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004))) * (var_chaste_interface__membrane__V + 30.0))) + (0.00013100000000000001 * ((1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)) * (var_chaste_interface__membrane__V + 30.0)))) * exp(( -0.059880239520000003 * var_chaste_interface__membrane__V) + 0.089820359279999998)) / pow(1.0 + exp(( -0.059880239520000003 * var_chaste_interface__membrane__V) + 0.089820359279999998), 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][67] = 250.0 * ((((7.1899999999999999e-05 * (1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004)))) - (((1.0641200000000001e-05 * exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004)) / pow(1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004), 2.0)) * (var_chaste_interface__membrane__V + 30.0))) + (0.00013100000000000001 * (1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)))) - (((8.9996999999999996e-06 * exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999)) / pow(exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0, 2.0)) * (var_chaste_interface__membrane__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][68] = ( -0.017975000000000001 * ((1.0 / (1.0 - exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) - 4.4400000000000004))) * (var_chaste_interface__membrane__V + 30.0))) - (0.032750000000000001 * ((1.0 / (exp((0.068699999999999997 * var_chaste_interface__membrane__V) + 2.0609999999999999) - 1.0)) * (var_chaste_interface__membrane__V + 30.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][69] = ((15.0 * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))) + (100.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0)))) * (((( -3.0 * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)) * (1.0 / ((15.0 * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))) + (100.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0)))))) * (1.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0), 2.0))) - (((15.0 * (((( -3.0 * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)) * (1.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0), 2.0))) + (20.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0)))) - ((20.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0), 2.0)) * pow(exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0), 2.0)))) / pow((15.0 * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))) + (100.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))), 2.0)) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][70] = ((( -3.0 * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)) * (1.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0), 2.0))) + (20.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0)))) - ((20.0 / pow(1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0), 2.0)) * pow(exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0), 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][71] = (15.0 * (1.0 / ((15.0 * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))) + (100.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0)))))) * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][72] = -((15.0 * (1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 12.0)))) + (100.0 * ((1.0 / (1.0 + exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))) * exp((0.20000000000000001 * var_chaste_interface__membrane__V) + 5.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][73] = (10000.0 * (((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001)))) * (((400.0 * ((0.0001 / (((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001)))) * ((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)))) - ((400.0 * (0.0001 / (((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))))) * ((1.0 / pow(1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0)) * pow(exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0)))) - (((0.040000000000000001 * (((((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) - ((1.0 / pow(1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0)) * pow(exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0))) - ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) + ((1.0 / pow(1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001), 2.0)) * pow(exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001), 2.0)))) / pow(((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001)), 2.0)) * ((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][74] = 400.0 * (((((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) - ((1.0 / pow(1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0)) * pow(exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001), 2.0))) - ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) + ((1.0 / pow(1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001), 2.0)) * pow(exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001), 2.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][75] = 10000.0 * ((0.0001 / (((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001)))) * ((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][76] =  -10000.0 * (((1.0 / (1.0 + exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001))) * exp((0.040000000000000001 * var_chaste_interface__membrane__V) - 1.6000000000000001)) + ((1.0 / (1.0 + exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001))) * exp((-(0.040000000000000001 * var_chaste_interface__membrane__V)) - 3.6000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][77] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][78] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][79] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][80] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][81] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 9.0) * 0.044642857142857144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][82] = 1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][83] = 0.80000000000000004 - (0.65000000000000002 / (1.0 + exp((var_chaste_interface__membrane__V + 125.0) * 0.066666666666666666)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][84] = exp(var_chaste_interface__membrane__V * 0.01);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][85] = (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5) * 3.8799692706433766e-07)) + (exp(((-var_chaste_interface__membrane__V) * 96485.0) * 3.8799692706433766e-07) * 0.031854272577799742))) * 2.25;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][86] = exp((var_chaste_interface__membrane__V *  -82012.25) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][87] = (fabs(var_chaste_interface__membrane__V + 47.130000000000003) >= 1.0000000000000001e-05) ? ((320.0 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) : 3200.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][88] = 80.0 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][89] = (var_chaste_interface__membrane__V <  -40.0) ? (135.0 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][90] = (var_chaste_interface__membrane__V <  -40.0) ? ((3560.0 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1000.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][91] = (var_chaste_interface__membrane__V <  -40.0) ? ((1000.0 * (-((127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][92] = (var_chaste_interface__membrane__V <  -40.0) ? ((121.2 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((300.0 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][93] = (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][94] = (1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024)))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][95] = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][96] = (1.0 - ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][97] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 14.0)) * 0.092592592592592587));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][98] = 0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.22222222222222221)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][99] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.17857142857142858));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][100] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 21.5)) * 0.13333333333333333));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][101] = 0.001 / (((0.0013799999999999999 * (var_chaste_interface__membrane__V + 14.199999999999999)) / (1.0 - exp( -0.123 * (var_chaste_interface__membrane__V + 14.199999999999999)))) + ((0.00060999999999999997 * (var_chaste_interface__membrane__V + 38.899999999999999)) / (exp(0.14499999999999999 * (var_chaste_interface__membrane__V + 38.899999999999999)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][102] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V - 1.5)) * 0.059880239520958084));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][103] = 0.001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][104] = 0.0040000000000000001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][105] = ((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][106] = 1.0 / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][107] = (15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][108] = 1.0 / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellFaberRudy2000FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[109];
    
    // Lookup tables
    double (*_lookup_table_0)[109];
    
};

std::auto_ptr<CellFaberRudy2000FromCellMLCvodeOpt_LookupTables> CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::mpInstance;

    double CellFaberRudy2000FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 13);
    }
    
    CellFaberRudy2000FromCellMLCvodeOpt::CellFaberRudy2000FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFaberRudy2000FromCellMLCvodeOpt>::Instance();
        Init();

        NV_Ith_S(this->mParameters, 0) = 1.0; // (c,rapid_delayed_rectifier_potassium_current__ScaleFactorGkr) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (c,slow_delayed_rectifier_potassium_current__ScaleFactorGks) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 0.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellFaberRudy2000FromCellMLCvodeOpt::~CellFaberRudy2000FromCellMLCvodeOpt()
    {
    }
    
    AbstractLookupTableCollection* CellFaberRudy2000FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double CellFaberRudy2000FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[77]) - 0.61380000000000001)) / _lt_0_row[78]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[79]) - 99.0)) / _lt_0_row[80]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[79]) - 3.375)) / _lt_0_row[80]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (NV_Ith_S(mParameters, 0) * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[81] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (NV_Ith_S(mParameters, 1) * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[83] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (NV_Ith_S(mParameters, 2) * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[84] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[86] * ((_lt_0_row[79] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[86] * ((_lt_0_row[79] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[82] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[85] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[79]) - 99.0)) / _lt_0_row[80]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[79]) - 3.375)) / _lt_0_row[80]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFaberRudy2000FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2
        
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_membrane__Cm = 0.001; // microF
        const double var_chaste_interface__membrane__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_membrane__I_st = var_chaste_interface__membrane__I_st / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[77]) - 0.61380000000000001)) / _lt_0_row[78]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[79]) - 99.0)) / _lt_0_row[80]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[79]) - 3.375)) / _lt_0_row[80]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (NV_Ith_S(mParameters, 0) * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[81] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (NV_Ith_S(mParameters, 1) * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[83] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (NV_Ith_S(mParameters, 2) * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[84] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[86] * ((_lt_0_row[79] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[86] * ((_lt_0_row[79] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[82] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[85] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[79]) - 99.0)) / _lt_0_row[80]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[79]) - 3.375)) / _lt_0_row[80]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_calcium_dynamics__i_rel = ((var_chaste_interface__calcium_dynamics__Cainfluxtrack > 0.00018000000000000001) ? (((60000.0 * (var_chaste_interface__calcium_dynamics__Cainfluxtrack - 0.00018000000000000001)) / ((0.00080000000000000004 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) - 0.00018000000000000001)) * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2) * var_chaste_interface__calcium_dynamics__APtrack2) : ((var_chaste_interface__calcium_dynamics__Cainfluxtrack <= 0.00018000000000000001) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 > 0.0)) ? (4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : 0.0) * (var_chaste_interface__calcium_dynamics__Ca_JSR - var_chaste_interface__calcium_dynamics__Cai); // millimolar_per_second
        const double var_calcium_dynamics__i_up = (8.75 * var_chaste_interface__calcium_dynamics__Cai) / (var_chaste_interface__calcium_dynamics__Cai + 0.00092000000000000003); // millimolar_per_second
        const double var_calcium_dynamics__i_leak = 0.58333333333333337 * var_chaste_interface__calcium_dynamics__Ca_NSR; // millimolar_per_second
        const double var_calcium_dynamics__i_tr = (var_chaste_interface__calcium_dynamics__Ca_NSR - var_chaste_interface__calcium_dynamics__Ca_JSR) * 5.5555555555555554; // millimolar_per_second
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = 0.001 * ((_lt_0_row[87] * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - (_lt_0_row[88] * var_chaste_interface__fast_sodium_current_m_gate__m)); // 'per millisecond'
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = 0.001 * ((_lt_0_row[89] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[90] * var_chaste_interface__fast_sodium_current_h_gate__h)); // 'per millisecond'
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = 0.001 * ((_lt_0_row[91] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[92] * var_chaste_interface__fast_sodium_current_j_gate__j)); // 'per millisecond'
        const double d_dt_chaste_interface__L_type_Ca_channel_d_gate__d = 0.001 * ((_lt_0_row[93] * (1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d)) - (_lt_0_row[94] * var_chaste_interface__L_type_Ca_channel_d_gate__d)); // 'per millisecond'
        const double d_dt_chaste_interface__L_type_Ca_channel_f_gate__f = 0.001 * ((_lt_0_row[95] * (1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f)) - (_lt_0_row[96] * var_chaste_interface__L_type_Ca_channel_f_gate__f)); // 'per millisecond'
        const double d_dt_chaste_interface__T_type_Ca_channel_b_gate__b = 0.001 * ((_lt_0_row[97] - var_chaste_interface__T_type_Ca_channel_b_gate__b) / _lt_0_row[98]); // 'per millisecond'
        const double d_dt_chaste_interface__T_type_Ca_channel_g_gate__g = 0.001 * ((_lt_0_row[99] - var_chaste_interface__T_type_Ca_channel_g_gate__g) / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012)); // 'per millisecond'
        const double d_dt_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = 0.001 * ((_lt_0_row[100] - var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr) / _lt_0_row[101]); // 'per millisecond'
        const double d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = 0.001 * ((_lt_0_row[102] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) / _lt_0_row[103]); // 'per millisecond'
        const double d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = 0.001 * ((_lt_0_row[102] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2) / _lt_0_row[104]); // 'per millisecond'
        const double d_dt_chaste_interface__transient_outward_current_zdv_gate__zdv = 0.001 * ((_lt_0_row[105] - var_chaste_interface__transient_outward_current_zdv_gate__zdv) / _lt_0_row[106]); // 'per millisecond'
        const double d_dt_chaste_interface__transient_outward_current_ydv_gate__ydv = 0.001 * ((_lt_0_row[107] - var_chaste_interface__transient_outward_current_ydv_gate__ydv) / _lt_0_row[108]); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Cai = 0.001 * ((1.0 / (1.0 + (0.00011900000000000002 / pow(0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai, 2.0)) + (3.5000000000000004e-05 / pow(0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai, 2.0)))) * ((( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - (2.0 * var_Na_Ca_exchanger__i_NaCa)) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) + ((var_calcium_dynamics__i_rel * 1.824637013204952e-13) * 38686179652.867111) + (((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 2.098332565185695e-12) * 38686179652.867111))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_JSR = 0.001 * ((1.0 / (1.0 + (8.0 / pow(0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR, 2.0)))) * (var_calcium_dynamics__i_tr - var_calcium_dynamics__i_rel)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_NSR = 0.001 * (((((-var_calcium_dynamics__i_tr) * 1.824637013204952e-13) * 476568879781.69635) - var_calcium_dynamics__i_leak) + var_calcium_dynamics__i_up); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack = 0.001 * (((( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)) > 150000.0) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack3)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__APtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack = 0.001 * ((var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001) ? (( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - var_Na_Ca_exchanger__i_NaCa) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) : ((var_chaste_interface__calcium_dynamics__APtrack2 > 0.01) && (var_chaste_interface__calcium_dynamics__APtrack <= 0.20000000000000001)) ? 0.0 : ( -500.0 * var_chaste_interface__calcium_dynamics__Cainfluxtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack = 0.001 * ((((1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR))) > 0.69999999999999996) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__APtrack3 < 0.37)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Nai = 0.001 * (((-(var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_CaNa + var_sodium_background_current__i_Na_b + var_non_specific_calcium_activated_current__i_ns_Na + (var_Na_Ca_exchanger__i_NaCa * 3.0) + (var_sodium_potassium_pump__i_NaK * 3.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Ki = 0.001 * (((-(var_L_type_Ca_channel__i_CaK + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_non_specific_calcium_activated_current__i_ns_K + ((-var_sodium_potassium_pump__i_NaK) * 2.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface__membrane__V = 0.001 * (( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__L_type_Ca_channel_d_gate__d;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__L_type_Ca_channel_f_gate__f;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__T_type_Ca_channel_b_gate__b;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__T_type_Ca_channel_g_gate__g;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__transient_outward_current_zdv_gate__zdv;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__transient_outward_current_ydv_gate__ydv;
        NV_Ith_S(rDY, 13) = d_dt_chaste_interface__calcium_dynamics__Cai;
        NV_Ith_S(rDY, 14) = d_dt_chaste_interface__calcium_dynamics__Ca_JSR;
        NV_Ith_S(rDY, 15) = d_dt_chaste_interface__calcium_dynamics__Ca_NSR;
        NV_Ith_S(rDY, 16) = d_dt_chaste_interface__calcium_dynamics__APtrack;
        NV_Ith_S(rDY, 17) = d_dt_chaste_interface__calcium_dynamics__APtrack2;
        NV_Ith_S(rDY, 18) = d_dt_chaste_interface__calcium_dynamics__APtrack3;
        NV_Ith_S(rDY, 19) = d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack;
        NV_Ith_S(rDY, 20) = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack;
        NV_Ith_S(rDY, 21) = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2;
        NV_Ith_S(rDY, 22) = d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3;
        NV_Ith_S(rDY, 23) = d_dt_chaste_interface__ionic_concentrations__Nai;
        NV_Ith_S(rDY, 24) = d_dt_chaste_interface__ionic_concentrations__Ki;
    }
    
    void CellFaberRudy2000FromCellMLCvodeOpt::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_environment__time = 0.001 * var_chaste_interface__environment__time; // second
        const double var_chaste_interface__environment__fake_dt = 0.001; // second
        const double var_membrane__Cm = 0.001; // microF
        const double var_t1 = 1.0 / var_membrane__Cm; // dimensionless
        const double var_t2 = pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 2.0); // dimensionless
        const double var_t3 = var_t2 * var_chaste_interface__transient_outward_current_zdv_gate__zdv; // dimensionless
        const double var_t4 = var_t3 * NV_Ith_S(mParameters, 2); // dimensionless
        const double var_t7 = _lt_0_row[0] * var_chaste_interface__transient_outward_current_ydv_gate__ydv; // dimensionless
        const double var_t10 = 1.0 / var_chaste_interface__ionic_concentrations__Ki; // dimensionless
        const double var_t14 = (log(var_t10 * 4.5) * 1.0364305332435094e-05) * 2577340.0; // dimensionless
        const double var_t15 = var_chaste_interface__membrane__V - var_t14; // dimensionless
        const double var_t16 = var_t15 * var_t7; // dimensionless
        const double var_t17 = var_t16 * var_t4; // dimensionless
        const double var_t18 = 0.0050000000000000001 * var_t17; // dimensionless
        const double var_t23 = exp(((0.23849999999999999 * var_chaste_interface__membrane__V) - (0.23849999999999999 * var_t14)) - 14.1227775); // dimensionless
        const double var_t24 = 1.0 + var_t23; // dimensionless
        const double var_t25 = 1.0 / var_t24; // dimensionless
        const double var_t26 = var_t25 * 2.1213203435596424; // dimensionless
        const double var_t31 = exp(((0.080320000000000003 * var_chaste_interface__membrane__V) - (0.080320000000000003 * var_t14)) + 0.43983232); // dimensionless
        const double var_t36 = exp(((0.061749999999999999 * var_chaste_interface__membrane__V) - (0.061749999999999999 * var_t14)) - 36.698642499999998); // dimensionless
        const double var_t37 = (0.49124000000000001 * var_t31) + var_t36; // dimensionless
        const double var_t41 = exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) + (0.51429999999999998 * var_t14)) - 2.4444678999999998); // dimensionless
        const double var_t42 = 1.0 + var_t41; // dimensionless
        const double var_t43 = 1.0 / var_t42; // dimensionless
        const double var_t46 = (1020.0 * var_t25) + ((1000.0 * var_t43) * var_t37); // dimensionless
        const double var_t49 = var_t15 / pow(var_t46, 2.0); // dimensionless
        const double var_t51 = 1.0 / pow(var_t24, 2.0); // dimensionless
        const double var_t61 = (1.0 / pow(var_t42, 2.0)) * var_t37; // dimensionless
        const double var_t67 = ((329.20358440000001 * (((( -243.27000000000001 * var_t23) * var_t51) + ((1000.0 * var_t43) * ((0.039456396800000001 * var_t31) + (0.061749999999999999 * var_t36)))) + ((514.29999999999995 * var_t41) * var_t61))) * var_t49) * var_t26; // dimensionless
        const double var_t68 = var_t51 * 2.1213203435596424; // dimensionless
        const double var_t69 = 1.0 / var_t46; // dimensionless
        const double var_t70 = var_t15 * var_t69; // dimensionless
        const double var_t73 = ((78.515054879999994 * var_t23) * var_t70) * var_t68; // dimensionless
        const double var_t87 = pow(var_chaste_interface__ionic_concentrations__Nai, 2.0); // dimensionless
        const double var_t88 = var_t87 * var_chaste_interface__ionic_concentrations__Nai; // dimensionless
        const double var_t90 = (1.8 * var_t88) * _lt_0_row[1]; // dimensionless
        const double var_t93 = var_chaste_interface__calcium_dynamics__Cai * 2299968.0; // dimensionless
        const double var_t94 = var_t90 - var_t93; // dimensionless
        const double var_t96 = var_t90 + var_t93; // dimensionless
        const double var_t98 = 1.0 + (var_t96 * _lt_0_row[2]); // dimensionless
        const double var_t100 = 1.0 / pow(var_t98, 2.0); // dimensionless
        const double var_t101 = var_t100 * var_t94; // dimensionless
        const double var_t109 = 1.8 * var_t88; // dimensionless
        const double var_t114 = (((((((var_t96 * _lt_0_row[3]) * 3.8799692706433766e-07) * 96485.0) *  -0.84999999999999998) * 0.0001) + (((var_t109 * _lt_0_row[4]) * 11.605123887418811) * _lt_0_row[2])) * var_t101) * _lt_0_row[5]; // dimensionless
        const double var_t136 = ((_lt_0_row[6] * var_t15) / _lt_0_row[7]) * 0.0055199999999999997; // dimensionless
        const double var_t137 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t138 = var_t137 * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t139 = var_t138 * 16.0; // dimensionless
        const double var_t140 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t141 = var_t140 * var_t139; // dimensionless
        const double var_t142 = 2.1213203435596424 * NV_Ith_S(mParameters, 0); // dimensionless
        const double var_t148 = _lt_0_row[8] * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr; // dimensionless
        const double var_t149 = var_t148 * var_t142; // dimensionless
        const double var_t150 = 0.01124886496 * var_t149; // dimensionless
        const double var_t151 = 1.0 / var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t154 = 1.0 + (6.481821026e-07 * pow(var_t151, 1.3999999999999999)); // dimensionless
        const double var_t157 = 1.0 + (0.59999999999999998 / var_t154); // dimensionless
        const double var_t158 = var_t157 * NV_Ith_S(mParameters, 1); // dimensionless
        const double var_t159 = var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // dimensionless
        const double var_t160 = var_t159 * var_t158; // dimensionless
        const double var_t161 = 0.433 * var_t160; // dimensionless
        const double var_t162 = var_t7 * var_t4; // dimensionless
        const double var_t163 = 0.5 * var_t162; // dimensionless
        const double var_t164 = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f; // dimensionless
        const double var_t167 = 1.0 + (1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double var_t168 = 1.0 / var_t167; // dimensionless
        const double var_t169 = 0.00054000000000000001 * var_t168; // dimensionless
        const double var_t178 = ((_lt_0_row[9] * var_chaste_interface__calcium_dynamics__Cai) * 1.0) - 0.61380000000000001; // dimensionless
        const double var_t183 = ((_lt_0_row[10] * var_t178) * 0.0032258064516129032) * 1119720.378277604; // dimensionless
        const double var_t185 = ((4.0 * var_t183) * var_t169) * var_t164; // dimensionless
        const double var_t186 = var_t168 * var_t164; // dimensionless
        const double var_t201 = (((((_lt_0_row[11] * var_chaste_interface__calcium_dynamics__Cai) * 1.0) * 1.5054161541136895e-13) * 898213138884125.0) * (var_chaste_interface__membrane__V * 0.00054000000000000001)) * var_t186; // dimensionless
        const double var_t204 = (var_chaste_interface__membrane__V * var_t169) * var_t164; // dimensionless
        const double var_t213 = ((_lt_0_row[12] * var_t178) * 135.21845691133248) * var_t204; // dimensionless
        const double var_t214 = 1.9299999999999999e-07 * var_t168; // dimensionless
        const double var_t219 = ((_lt_0_row[1] * var_chaste_interface__ionic_concentrations__Ki) * 0.75) - 3.375; // dimensionless
        const double var_t223 = (_lt_0_row[13] * var_t219) * 0.0032258064516129032; // dimensionless
        const double var_t224 = var_t223 * 1119720.378277604; // dimensionless
        const double var_t225 = (var_t224 * var_t214) * var_t164; // dimensionless
        const double var_t233 = (((((_lt_0_row[14] * var_chaste_interface__ionic_concentrations__Ki) * 0.75) * 1.5054161541136895e-13) * 898213138884125.0) * (var_chaste_interface__membrane__V * 1.9299999999999999e-07)) * var_t186; // dimensionless
        const double var_t235 = (var_chaste_interface__membrane__V * var_t214) * var_t164; // dimensionless
        const double var_t241 = ((_lt_0_row[15] * var_t219) * 135.21845691133248) * var_t235; // dimensionless
        const double var_t242 = 6.75e-07 * var_t168; // dimensionless
        const double var_t247 = ((_lt_0_row[1] * var_chaste_interface__ionic_concentrations__Nai) * 0.75) - 99.0; // dimensionless
        const double var_t249 = (_lt_0_row[13] * var_t247) * 0.0032258064516129032; // dimensionless
        const double var_t250 = var_t249 * 1119720.378277604; // dimensionless
        const double var_t251 = (var_t250 * var_t242) * var_t164; // dimensionless
        const double var_t268 = 1.0 + ((1.0 / var_t87) * 100.0); // dimensionless
        const double var_t269 = 1.0 / var_t268; // dimensionless
        const double var_t283 = ((_lt_0_row[16] * var_t269) / _lt_0_row[17]) * 2.25; // dimensionless
        const double var_t290 = (((_lt_0_row[18] * var_t15) / _lt_0_row[19]) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr) * var_t142; // dimensionless
        const double var_t291 = pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2.0); // dimensionless
        const double var_t292 = var_t291 * 0.050000000000000003; // dimensionless
        const double var_t293 = var_chaste_interface__T_type_Ca_channel_g_gate__g * var_t292; // dimensionless
        const double var_t301 = (((((_lt_0_row[14] * var_chaste_interface__ionic_concentrations__Nai) * 0.75) * 1.5054161541136895e-13) * 898213138884125.0) * (var_chaste_interface__membrane__V * 6.75e-07)) * var_t186; // dimensionless
        const double var_t303 = (var_chaste_interface__membrane__V * var_t242) * var_t164; // dimensionless
        const double var_t307 = ((_lt_0_row[15] * var_t247) * 135.21845691133248) * var_t303; // dimensionless
        const double var_t311 = 1.0 / var_t98; // dimensionless
        const double var_t312 = var_t311 * var_t94; // dimensionless
        const double var_t314 = ((((var_t312 * _lt_0_row[3]) * 0.0032258064516129032) * 11.605123887418811) *  -0.84999999999999998) * 0.00025000000000000001; // dimensionless
        const double var_t318 = (((var_t311 * var_t109) * _lt_0_row[4]) * 11.605123887418811) * _lt_0_row[5]; // dimensionless
        const double var_t319 = var_t69 * var_t26; // dimensionless
        const double var_t320 = 329.20358440000001 * var_t319; // dimensionless
        const double var_t326 = 16.0 * var_t1; // dimensionless
        const double var_t328 = 1.0 / var_chaste_interface__ionic_concentrations__Nai; // dimensionless
        const double var_t333 = var_chaste_interface__membrane__V - ((log(var_t328 * 132.0) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t334 = var_t333 * var_t140; // dimensionless
        const double var_t343 = var_t168 * var_chaste_interface__L_type_Ca_channel_f_gate__f; // dimensionless
        const double var_t353 = var_t168 * var_chaste_interface__L_type_Ca_channel_d_gate__d; // dimensionless
        const double var_t363 = 0.050000000000000003 * var_t1; // dimensionless
        const double var_t364 = var_chaste_interface__T_type_Ca_channel_g_gate__g * var_chaste_interface__T_type_Ca_channel_b_gate__b; // dimensionless
        const double var_t370 = var_chaste_interface__membrane__V - (((0.5 * log(var_t151 * 1.8)) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t374 = var_t370 * var_t291; // dimensionless
        const double var_t381 = NV_Ith_S(mParameters, 1) * var_t1; // dimensionless
        const double var_t387 = 1.0 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai)); // dimensionless
        const double var_t392 = var_chaste_interface__membrane__V - ((log(var_t387 * 6.9195599999999997) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t400 = NV_Ith_S(mParameters, 2) * var_t1; // dimensionless
        const double var_t409 = 1.0 / pow(var_t167, 2.0); // dimensionless
        const double var_t418 = (((((_lt_0_row[20] * var_t178) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 0.00054000000000000001) * var_t409) * var_t164; // dimensionless
        const double var_t423 = _lt_0_row[21] * var_t204; // dimensionless
        const double var_t430 = (((((_lt_0_row[22] * var_t219) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 1.9299999999999999e-07) * var_t409) * var_t164; // dimensionless
        const double var_t437 = (((((_lt_0_row[22] * var_t247) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 6.75e-07) * var_t409) * var_t164; // dimensionless
        const double var_t441 = (((0.5 * var_t151) * 1.0364305332435094e-05) * 2577340.0) * var_t293; // dimensionless
        const double var_t450 = var_t392 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // dimensionless
        const double var_t453 = (((((2.3575679440000001e-07 * var_t450) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) / pow(var_chaste_interface__calcium_dynamics__Cai, 2.0)) * pow(var_t151, 0.40000000000000002)) / pow(var_t154, 2.0)) * NV_Ith_S(mParameters, 1); // dimensionless
        const double var_t455 = (var_t311 * 2299968.0) * _lt_0_row[5]; // dimensionless
        const double var_t461 = ((229.99680000000001 * var_t100) * var_t94) * _lt_0_row[23]; // dimensionless
        const double var_t462 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t463 = 1.0 / var_t462; // dimensionless
        const double var_t464 = var_t463 * 1.1499999999999999; // dimensionless
        const double var_t465 = var_chaste_interface__calcium_dynamics__Cai * 1.1499999999999999; // dimensionless
        const double var_t468 = (1.0 / pow(var_t462, 2.0)) * var_t465; // dimensionless
        const double var_t473 = (((0.5 * var_t151) * 0.003212934653054879) * 0.003016) * 8314.0; // dimensionless
        const double var_t478 = ((var_t328 * 1.0364305332435094e-05) * 2577340.0) * var_t141; // dimensionless
        const double var_t482 = _lt_0_row[24] * var_t303; // dimensionless
        const double var_t483 = var_t387 * 1.0364305332435094e-05; // dimensionless
        const double var_t487 = ((0.0079368900000000003 * var_t483) * 2577340.0) * var_t160; // dimensionless
        const double var_t489 = 1.8 * var_t87; // dimensionless
        const double var_t491 = ((var_t311 * var_t489) * _lt_0_row[1]) * _lt_0_row[5]; // dimensionless
        const double var_t496 = (((var_t489 * _lt_0_row[1]) * 0.0001) * var_t101) * _lt_0_row[23]; // dimensionless
        const double var_t500 = ((var_t328 * 0.003212934653054879) * 0.0040000000000000001) * 8314.0; // dimensionless
        const double var_t509 = ((((1.0 / var_t88) * 100.0) * 0.75) / pow(var_t268, 2.0)) * _lt_0_row[25]; // dimensionless
        const double var_t517 = var_t10 * 1.0364305332435094e-05; // dimensionless
        const double var_t518 = var_t517 * 2577340.0; // dimensionless
        const double var_t529 = var_t23 * var_t517; // dimensionless
        const double var_t560 = ((((((((_lt_0_row[24] * var_t235) + ((0.01124886496 * var_t518) * var_t149)) + (((0.433 * var_t483) * 2577340.0) * var_t160)) + ((0.000193 * var_t518) * 0.00014287100705076791)) + ((0.5 * var_t518) * var_t162)) - ((((78.515054879999994 * var_t529) * 2577340.0) * var_t70) * var_t68)) - (((329.20358440000001 * (((((( -243.27000000000001 * var_t529) * 310.0) * 8314.0) * var_t51) + ((1000.0 * var_t43) * ((((0.039456396800000001 * var_t31) * var_t517) * 2577340.0) + (((0.061749999999999999 * var_t36) * var_t517) * 2577340.0)))) + (((((514.29999999999995 * var_t41) * var_t10) * 0.003212934653054879) * 8314.0) * var_t61))) * var_t49) * var_t26)) + ((329.20358440000001 * var_t518) * var_t319)) + (((var_t10 * 0.003212934653054879) * 8314.0) * _lt_0_row[26]); // dimensionless
        const double var_t753 = 1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d; // dimensionless
        const double var_t825 = 1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f; // dimensionless
        const double var_t1084 = 0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1085 = pow(var_t1084, 2.0); // dimensionless
        const double var_t1089 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1090 = pow(var_t1089, 2.0); // dimensionless
        const double var_t1093 = (1.0 + ((1.0 / var_t1085) * 0.00011900000000000002)) + ((1.0 / var_t1090) * 3.5000000000000004e-05); // dimensionless
        const double var_t1094 = 1.0 / var_t1093; // dimensionless
        const double var_t1095 = 1.434e-07 * var_t1094; // dimensionless
        const double var_t1111 = (var_chaste_interface__membrane__V * 96485.0) * var_t169; // dimensionless
        const double var_t1117 = (_lt_0_row[27] * var_t178) * 3.8799692706433766e-07; // dimensionless
        const double var_t1129 = 272649.65708607185 * var_t370; // dimensionless
        const double var_t1138 = (4.0 * var_t183) * var_t204; // dimensionless
        const double var_t1140 = (var_t370 * var_chaste_interface__T_type_Ca_channel_g_gate__g) * var_t292; // dimensionless
        const double var_t1141 = var_t312 * _lt_0_row[5]; // dimensionless
        const double var_t1143 = var_t463 * var_t465; // dimensionless
        const double var_t1144 = var_t370 * 0.003016; // dimensionless
        const double var_t1150 = 0.00018000000000000001 < var_chaste_interface__calcium_dynamics__Cainfluxtrack; // dimensionless
        const double var_t1152 = 60000.0 * (var_chaste_interface__calcium_dynamics__Cainfluxtrack - 0.00018000000000000001); // dimensionless
        const double var_t1153 = (0.00080000000000000004 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) - 0.00018000000000000001; // dimensionless
        const double var_t1154 = 1.0 / var_t1153; // dimensionless
        const double var_t1155 = 1.0 - var_chaste_interface__calcium_dynamics__APtrack2; // dimensionless
        const double var_t1156 = var_t1155 * var_t1154; // dimensionless
        const double var_t1161 = (var_chaste_interface__calcium_dynamics__Cainfluxtrack <= 0.00018000000000000001) && (0.0 < var_chaste_interface__calcium_dynamics__OVRLDtrack2); // dimensionless
        const double var_t1163 = 4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2); // dimensionless
        const double var_t1165 = var_t1150 ? ((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1156) * var_t1152) : var_t1161 ? (var_chaste_interface__calcium_dynamics__OVRLDtrack2 * var_t1163) : 0.0; // dimensionless
        const double var_t1166 = var_chaste_interface__calcium_dynamics__Ca_JSR - var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1167 = var_t1166 * var_t1165; // dimensionless
        const double var_t1173 = var_chaste_interface__calcium_dynamics__Cai * 8.75; // dimensionless
        const double var_t1174 = var_chaste_interface__calcium_dynamics__Cai + 0.00092000000000000003; // dimensionless
        const double var_t1175 = 1.0 / var_t1174; // dimensionless
        const double var_t1196 = var_t1175 * 8.75; // dimensionless
        const double var_t1200 = (1.0 / pow(var_t1174, 2.0)) * var_t1173; // dimensionless
        const double var_t1214 = var_t1150 ? ((((-var_chaste_interface__calcium_dynamics__APtrack2) * var_t1154) * var_t1152) + (var_t1156 * var_t1152)) : var_t1161 ? 0.0 : 0.0; // dimensionless
        const double var_t1227 = var_t1150 ? ((((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1155) * var_t1154) * 60000.0) - (((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1155) / pow(var_t1153, 2.0)) * var_t1152)) : var_t1161 ? 0.0 : 0.0; // dimensionless
        const double var_t1233 = var_t1150 ? 0.0 : var_t1161 ? (( -4000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2) + var_t1163) : 0.0; // dimensionless
        const double var_t1237 = (-var_t491) + var_t496; // dimensionless
        const double var_t1242 = 0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR; // dimensionless
        const double var_t1243 = pow(var_t1242, 2.0); // dimensionless
        const double var_t1246 = 1.0 + ((1.0 / var_t1243) * 8.0); // dimensionless
        const double var_t1247 = 1.0 / var_t1246; // dimensionless
        const double var_t1308 = 150000.0 < ((-(((((((((((((((((var_t334 * var_t139) + var_t1138) + (var_t224 * var_t235)) + (var_t250 * var_t303)) + var_t1140) + (((0.01124886496 * var_t15) * var_t148) * var_t142)) + (((0.433 * var_t392) * var_t159) * var_t158)) + (((0.000193 * var_t15) * 7.1435503525383955e-09) * 20000.0)) + (0.5 * var_t17)) + ((329.20358440000001 * var_t70) * var_t26)) + (var_t15 * _lt_0_row[26])) + var_t1141) + var_t1143) + (var_t333 * 0.0040000000000000001)) + var_t1144) + ((0.75 * var_t269) * _lt_0_row[25])) + (((0.10000000000000001 <= var_environment__time) && (var_environment__time <= 100000.0) && (((var_environment__time - 0.10000000000000001) - (1.0 * floor((var_environment__time - 0.10000000000000001) * 1.0))) <= 0.002)) ?  -25.5 : 0.0))) * var_t1); // dimensionless
        const double var_t1309 = var_t1308 ? 0.0 : 0.0; // dimensionless
        const double var_t1316 = (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (0.17999999999999999 < var_chaste_interface__calcium_dynamics__APtrack); // dimensionless
        const double var_t1319 = 0.20000000000000001 < var_chaste_interface__calcium_dynamics__APtrack; // dimensionless
        const double var_t1327 = (0.01 < var_chaste_interface__calcium_dynamics__APtrack2) && (var_chaste_interface__calcium_dynamics__APtrack <= 0.20000000000000001); // dimensionless
        const double var_t1357 = var_t1319 ? 0.0 : var_t1327 ? 0.0 : 0.0; // dimensionless
        const double var_t1372 = (0.69999999999999996 < (1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR)))) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__APtrack3 < 0.37); // dimensionless
        const double var_t1373 = var_t1372 ? 0.0 : 0.0; // dimensionless
        const double var_t1375 = 0.97999999999999998 < var_chaste_interface__calcium_dynamics__OVRLDtrack; // dimensionless
        const double var_t1377 = var_t1375 && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998); // dimensionless
        const double var_t1381 = var_t1375 && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998); // dimensionless
        const double var_t1411 = 3772.3667503103788 * var_t249; // dimensionless
        const double var_t1441 = 3772.3667503103788 * var_t223; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-((((((((((((((var_t18 - var_t67) - var_t73) - var_t114) + 2.7574104360798206e-08) + var_t136) + var_t141) + var_t150) + var_t161) + var_t163) + 0.003016) + 0.0040000000000000001) + var_t185) + var_t201) + ((((((((((((((-var_t213) + var_t225) + var_t233) - var_t241) + var_t251) - var_t283) - var_t290) + var_t293) + var_t301) - var_t307) + var_t314) + var_t318) + var_t320) + _lt_0_row[26]))) * var_t1));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * (((1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[56]) + ((7.2727272727272725 * var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[57]));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * (((1.0 - var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[50]) - (var_chaste_interface__fast_sodium_current_h_gate__h * _lt_0_row[51]));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * (((1.0 - var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[53]) - (var_chaste_interface__fast_sodium_current_j_gate__j * _lt_0_row[54]));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((((((_lt_0_row[29] * var_t753) * _lt_0_row[30]) * _lt_0_row[31]) - (((_lt_0_row[32] * var_t753) * _lt_0_row[33]) * _lt_0_row[34])) + ((((0.16025641030000001 * var_chaste_interface__L_type_Ca_channel_d_gate__d) * _lt_0_row[30]) * _lt_0_row[35]) * _lt_0_row[31])) + (((_lt_0_row[32] * var_chaste_interface__L_type_Ca_channel_d_gate__d) * _lt_0_row[33]) * _lt_0_row[36]));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((((1000.0 * var_t825) * _lt_0_row[38]) * _lt_0_row[39]) + ((((19.699999999999999 * var_t825) * _lt_0_row[40]) * (( -0.0022713799999999999 * var_chaste_interface__membrane__V) - 0.022713799999999999)) * _lt_0_row[41])) + (((1000.0 * var_chaste_interface__L_type_Ca_channel_f_gate__f) * _lt_0_row[38]) * _lt_0_row[39])) - ((((19.699999999999999 * var_chaste_interface__L_type_Ca_channel_f_gate__f) * _lt_0_row[40]) * (( -0.0022713799999999999 * var_chaste_interface__membrane__V) - 0.022713799999999999)) * _lt_0_row[42]));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[44] + (_lt_0_row[45] * (_lt_0_row[46] - var_chaste_interface__T_type_Ca_channel_b_gate__b)));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[47] - ((((var_chaste_interface__membrane__V < 0.0) ?  -0.00087500000000000002 : (0.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) / pow((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012, 2.0)) * (_lt_0_row[48] - var_chaste_interface__T_type_Ca_channel_g_gate__g)));
        DENSE_ELEM(rJacobian, 8, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[58] + (_lt_0_row[59] * (_lt_0_row[60] - var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr)));
        DENSE_ELEM(rJacobian, 9, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[62] + (_lt_0_row[63] * (_lt_0_row[64] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1)));
        DENSE_ELEM(rJacobian, 10, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[66] + (_lt_0_row[67] * (_lt_0_row[64] - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2)));
        DENSE_ELEM(rJacobian, 11, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[73] + (_lt_0_row[74] * (_lt_0_row[75] - var_chaste_interface__transient_outward_current_zdv_gate__zdv)));
        DENSE_ELEM(rJacobian, 12, 0) = var_chaste_interface__environment__fake_dt * (_lt_0_row[69] + (_lt_0_row[70] * (_lt_0_row[71] - var_chaste_interface__transient_outward_current_ydv_gate__ydv)));
        DENSE_ELEM(rJacobian, 13, 0) = var_chaste_interface__environment__fake_dt * (( -200477.68899378082 * (((((((var_t185 + var_t201) - var_t213) + var_t293) - (2.0 * var_t314)) - (2.0 * var_t318)) + (2.0 * var_t114)) + 0.003016)) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 0) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 0) = var_chaste_interface__environment__fake_dt * (var_t1319 ? (( -200477.68899378082 * (((((((var_t185 + var_t201) - var_t213) + var_t293) - var_t314) - var_t318) + var_t114) + 0.003016)) * 1.434e-07) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 23, 0) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * (((((((((-var_t141) - var_t251) - var_t301) + var_t307) - 0.0040000000000000001) - (3.0 * var_t314)) - (3.0 * var_t318)) + (3.0 * var_t114)) + (3.0 * var_t283)));
        DENSE_ELEM(rJacobian, 24, 0) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * (((((((((((((((-var_t225) - var_t233) + var_t241) + var_t290) - var_t150) - var_t161) + var_t73) + var_t67) - var_t320) - var_t136) - _lt_0_row[26]) - 2.7574104360798206e-08) - var_t18) - var_t163) - (2.0 * var_t283)));
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -3.0 * var_t334) * var_t137) * var_t326));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * (_lt_0_row[55]);
        DENSE_ELEM(rJacobian, 16, 1) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 23, 1) = var_chaste_interface__environment__fake_dt * ((( -0.17249100361024905 * var_t334) * var_t137) * 16.0);
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t333) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t138) * var_t326));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (_lt_0_row[49]);
        DENSE_ELEM(rJacobian, 16, 2) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 23, 2) = var_chaste_interface__environment__fake_dt * ((( -0.057497001203416338 * var_t333) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t139);
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t333) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t138) * var_t326));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (_lt_0_row[52]);
        DENSE_ELEM(rJacobian, 16, 3) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 23, 3) = var_chaste_interface__environment__fake_dt * ((( -0.057497001203416338 * var_t333) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t139);
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-(((((4.0 * var_t183) * (var_chaste_interface__membrane__V * 0.00054000000000000001)) * var_t343) + ((var_t224 * (var_chaste_interface__membrane__V * 1.9299999999999999e-07)) * var_t343)) + ((var_t250 * (var_chaste_interface__membrane__V * 6.75e-07)) * var_t343))) * var_t1));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (_lt_0_row[28]);
        DENSE_ELEM(rJacobian, 13, 4) = var_chaste_interface__environment__fake_dt * (((( -2.9411764699999998 * var_t1117) * var_t1111) * var_chaste_interface__L_type_Ca_channel_f_gate__f) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 4) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 4) = var_chaste_interface__environment__fake_dt * (var_t1319 ? ((((( -2.9411764699999998 * var_t1117) * (96485.0 * (var_chaste_interface__membrane__V * 0.00054000000000000001))) * var_t168) * var_chaste_interface__L_type_Ca_channel_f_gate__f) * 1.434e-07) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 23, 4) = var_chaste_interface__environment__fake_dt * (((( -1.4705882349999999 * var_t1411) * (0.00012027904738994468 * (var_chaste_interface__membrane__V * 96485.0))) * 6.75e-07) * var_t343);
        DENSE_ELEM(rJacobian, 24, 4) = var_chaste_interface__environment__fake_dt * (((( -1.4705882349999999 * var_t1441) * (0.00012027904738994468 * (var_chaste_interface__membrane__V * 96485.0))) * 1.9299999999999999e-07) * var_t343);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-(((((4.0 * var_t183) * (var_chaste_interface__membrane__V * 0.00054000000000000001)) * var_t353) + ((var_t224 * (var_chaste_interface__membrane__V * 1.9299999999999999e-07)) * var_t353)) + ((var_t250 * (var_chaste_interface__membrane__V * 6.75e-07)) * var_t353))) * var_t1));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (_lt_0_row[37]);
        DENSE_ELEM(rJacobian, 13, 5) = var_chaste_interface__environment__fake_dt * (((( -2.9411764699999998 * var_t1117) * var_t1111) * var_chaste_interface__L_type_Ca_channel_d_gate__d) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 5) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 5) = var_chaste_interface__environment__fake_dt * (var_t1319 ? ((((( -2.9411764699999998 * var_t1117) * (96485.0 * (var_chaste_interface__membrane__V * 0.00054000000000000001))) * var_t168) * var_chaste_interface__L_type_Ca_channel_d_gate__d) * 1.434e-07) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 23, 5) = var_chaste_interface__environment__fake_dt * (((( -1.4705882349999999 * var_t1411) * (0.00012027904738994468 * (var_chaste_interface__membrane__V * 96485.0))) * 6.75e-07) * var_t353);
        DENSE_ELEM(rJacobian, 24, 5) = var_chaste_interface__environment__fake_dt * (((( -1.4705882349999999 * var_t1441) * (0.00012027904738994468 * (var_chaste_interface__membrane__V * 96485.0))) * 1.9299999999999999e-07) * var_t353);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -2.0 * var_t370) * var_t364) * var_t363));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (_lt_0_row[43]);
        DENSE_ELEM(rJacobian, 13, 6) = var_chaste_interface__environment__fake_dt * ((((( -1.4705882349999999 * var_t1129) * 0.050000000000000003) * var_chaste_interface__T_type_Ca_channel_b_gate__b) * var_chaste_interface__T_type_Ca_channel_g_gate__g) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 6) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 6) = var_chaste_interface__environment__fake_dt * (var_t1319 ? ((( -1.4705882349999999 * var_t1129) * var_t364) * 7.1700000000000007e-09) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t374) * var_t363));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (-(1.0 / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012)));
        DENSE_ELEM(rJacobian, 13, 7) = var_chaste_interface__environment__fake_dt * ((( -0.73529411749999996 * var_t1129) * var_t292) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 7) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 7) = var_chaste_interface__environment__fake_dt * (var_t1319 ? (( -200477.68899378082 * var_t374) * 7.1700000000000007e-09) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 0, 8) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((( -0.01124886496 * var_t15) * _lt_0_row[8]) * 2.1213203435596424) * NV_Ith_S(mParameters, 0)) * var_t1));
        DENSE_ELEM(rJacobian, 8, 8) = var_chaste_interface__environment__fake_dt * (_lt_0_row[61]);
        DENSE_ELEM(rJacobian, 16, 8) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 8) = var_chaste_interface__environment__fake_dt * ((( -0.00064677600224854429 * var_t15) * _lt_0_row[8]) * var_t142);
        DENSE_ELEM(rJacobian, 0, 9) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -0.433 * var_t392) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2) * var_t157) * var_t381));
        DENSE_ELEM(rJacobian, 9, 9) = var_chaste_interface__environment__fake_dt * (_lt_0_row[65]);
        DENSE_ELEM(rJacobian, 16, 9) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 9) = var_chaste_interface__environment__fake_dt * (( -0.024896201522838685 * var_t450) * var_t158);
        DENSE_ELEM(rJacobian, 0, 10) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -0.433 * var_t392) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) * var_t157) * var_t381));
        DENSE_ELEM(rJacobian, 10, 10) = var_chaste_interface__environment__fake_dt * (_lt_0_row[68]);
        DENSE_ELEM(rJacobian, 16, 10) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 10) = var_chaste_interface__environment__fake_dt * ((( -0.024896201522838685 * var_t392) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) * var_t158);
        DENSE_ELEM(rJacobian, 0, 11) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -1.5 * var_t16) * var_t2) * var_t400));
        DENSE_ELEM(rJacobian, 11, 11) = var_chaste_interface__environment__fake_dt * (_lt_0_row[76]);
        DENSE_ELEM(rJacobian, 16, 11) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 11) = var_chaste_interface__environment__fake_dt * ((( -0.086245501785575537 * var_t16) * var_t2) * NV_Ith_S(mParameters, 2));
        DENSE_ELEM(rJacobian, 0, 12) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -0.5 * var_t15) * _lt_0_row[0]) * var_t3) * var_t400));
        DENSE_ELEM(rJacobian, 12, 12) = var_chaste_interface__environment__fake_dt * (_lt_0_row[72]);
        DENSE_ELEM(rJacobian, 16, 12) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 12) = var_chaste_interface__environment__fake_dt * ((( -0.028748500601708169 * var_t15) * _lt_0_row[0]) * var_t4);
        DENSE_ELEM(rJacobian, 0, 13) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-(((((((((((-var_t418) + var_t423) - var_t430) - var_t437) + var_t441) + var_t453) - var_t455) - var_t461) + var_t464) - var_t468) + var_t473)) * var_t1));
        DENSE_ELEM(rJacobian, 13, 13) = var_chaste_interface__environment__fake_dt * (((( -2.0 * (((( -1.0 / var_t1085) / var_t1084) * 0.00011900000000000002) - (((1.0 / var_t1090) / var_t1089) * 3.5000000000000004e-05))) * ((((( -200477.68899378082 * ((((var_t1138 + var_t1140) - (2.0 * var_t1141)) + var_t1143) + var_t1144)) * 1.434e-07) + (0.0070588235289999997 * var_t1167)) + ((0.081176470589999994 * var_chaste_interface__calcium_dynamics__Ca_NSR) * 0.58333333333333337)) - ((0.081176470589999994 * var_t1175) * var_t1173))) / pow(var_t1093, 2.0)) + (((((( -200477.68899378082 * ((((((((-var_t418) + var_t423) + var_t441) + (2.0 * var_t455)) + (2.0 * var_t461)) + var_t464) - var_t468) + var_t473)) * 1.434e-07) - (0.0070588235289999997 * var_t1165)) - (0.081176470589999994 * var_t1196)) + (0.081176470589999994 * var_t1200)) * var_t1094));
        DENSE_ELEM(rJacobian, 14, 13) = var_chaste_interface__environment__fake_dt * (var_t1165 * var_t1247);
        DENSE_ELEM(rJacobian, 15, 13) = var_chaste_interface__environment__fake_dt * (var_t1196 - var_t1200);
        DENSE_ELEM(rJacobian, 16, 13) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 13) = var_chaste_interface__environment__fake_dt * (var_t1319 ? (( -200477.68899378082 * ((((((((-var_t418) + var_t423) + var_t441) + var_t455) + var_t461) + var_t464) - var_t468) + var_t473)) * 1.434e-07) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 23, 13) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * ((var_t437 + (3.0 * var_t455)) + (3.0 * var_t461)));
        DENSE_ELEM(rJacobian, 24, 13) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * (var_t430 - var_t453));
        DENSE_ELEM(rJacobian, 13, 14) = var_chaste_interface__environment__fake_dt * ((0.0070588235289999997 * var_t1165) * var_t1094);
        DENSE_ELEM(rJacobian, 14, 14) = var_chaste_interface__environment__fake_dt * ((((((2.0 / var_t1243) / var_t1242) * 8.0) * ((5.5555555555555554 * (var_chaste_interface__calcium_dynamics__Ca_NSR - var_chaste_interface__calcium_dynamics__Ca_JSR)) - var_t1167)) / pow(var_t1246, 2.0)) + (( -5.5555555555555554 - var_t1165) * var_t1247));
        DENSE_ELEM(rJacobian, 15, 14) = var_chaste_interface__environment__fake_dt * (0.48309178744444442);
        DENSE_ELEM(rJacobian, 20, 14) = var_chaste_interface__environment__fake_dt * (var_t1373);
        DENSE_ELEM(rJacobian, 13, 15) = var_chaste_interface__environment__fake_dt * (0.047352941177499996 * var_t1094);
        DENSE_ELEM(rJacobian, 14, 15) = var_chaste_interface__environment__fake_dt * (5.5555555555555554 * var_t1247);
        DENSE_ELEM(rJacobian, 15, 15) = var_chaste_interface__environment__fake_dt * ( -1.0664251207777777);
        DENSE_ELEM(rJacobian, 16, 16) = var_chaste_interface__environment__fake_dt * (var_t1308 ?  -100500.0 :  -500.0);
        DENSE_ELEM(rJacobian, 19, 16) = var_chaste_interface__environment__fake_dt * (var_t1357);
        DENSE_ELEM(rJacobian, 13, 17) = var_chaste_interface__environment__fake_dt * (((0.0070588235289999997 * var_t1166) * var_t1214) * var_t1094);
        DENSE_ELEM(rJacobian, 14, 17) = var_chaste_interface__environment__fake_dt * (((-var_t1166) * var_t1214) * var_t1247);
        DENSE_ELEM(rJacobian, 17, 17) = var_chaste_interface__environment__fake_dt * (var_t1316 ?  -100500.0 :  -500.0);
        DENSE_ELEM(rJacobian, 19, 17) = var_chaste_interface__environment__fake_dt * (var_t1357);
        DENSE_ELEM(rJacobian, 18, 18) = var_chaste_interface__environment__fake_dt * (var_t1316 ?  -100500.0 :  -10.0);
        DENSE_ELEM(rJacobian, 20, 18) = var_chaste_interface__environment__fake_dt * (var_t1373);
        DENSE_ELEM(rJacobian, 13, 19) = var_chaste_interface__environment__fake_dt * (((0.0070588235289999997 * var_t1166) * var_t1227) * var_t1094);
        DENSE_ELEM(rJacobian, 14, 19) = var_chaste_interface__environment__fake_dt * (((-var_t1166) * var_t1227) * var_t1247);
        DENSE_ELEM(rJacobian, 19, 19) = var_chaste_interface__environment__fake_dt * (var_t1319 ? 0.0 : var_t1327 ? 0.0 :  -500.0);
        DENSE_ELEM(rJacobian, 20, 20) = var_chaste_interface__environment__fake_dt * (var_t1372 ?  -50000.0 :  -500.0);
        DENSE_ELEM(rJacobian, 21, 20) = var_chaste_interface__environment__fake_dt * (var_t1377 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 22, 20) = var_chaste_interface__environment__fake_dt * (var_t1381 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 13, 21) = var_chaste_interface__environment__fake_dt * (((0.0070588235289999997 * var_t1166) * var_t1233) * var_t1094);
        DENSE_ELEM(rJacobian, 14, 21) = var_chaste_interface__environment__fake_dt * (((-var_t1166) * var_t1233) * var_t1247);
        DENSE_ELEM(rJacobian, 21, 21) = var_chaste_interface__environment__fake_dt * (var_t1377 ?  -50000.0 :  -500.0);
        DENSE_ELEM(rJacobian, 20, 22) = var_chaste_interface__environment__fake_dt * (var_t1373);
        DENSE_ELEM(rJacobian, 22, 22) = var_chaste_interface__environment__fake_dt * (var_t1381 ?  -50000.0 :  -10.0);
        DENSE_ELEM(rJacobian, 0, 23) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-((((((var_t478 + var_t482) + var_t487) + (3.0 * var_t491)) - (3.0 * var_t496)) + var_t500) + (2.0 * var_t509))) * var_t1));
        DENSE_ELEM(rJacobian, 13, 23) = var_chaste_interface__environment__fake_dt * (( -1202866.133962685 * var_t1237) * var_t1095);
        DENSE_ELEM(rJacobian, 16, 23) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 19, 23) = var_chaste_interface__environment__fake_dt * (var_t1319 ? (( -601433.06684501772 * var_t1237) * 1.434e-07) : var_t1327 ? 0.0 : 0.0);
        DENSE_ELEM(rJacobian, 23, 23) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * ((((((-var_t478) - var_t482) - var_t500) - (9.0 * var_t491)) + (9.0 * var_t496)) - (6.0 * var_t509)));
        DENSE_ELEM(rJacobian, 24, 23) = var_chaste_interface__environment__fake_dt * (0.057497001203416338 * ((-var_t487) + (4.0 * var_t509)));
        DENSE_ELEM(rJacobian, 0, 24) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t560) * var_t1));
        DENSE_ELEM(rJacobian, 16, 24) = var_chaste_interface__environment__fake_dt * (var_t1309);
        DENSE_ELEM(rJacobian, 24, 24) = var_chaste_interface__environment__fake_dt * ( -0.057497001203416338 * var_t560);
    }
    
template<>
void OdeSystemInformation<CellFaberRudy2000FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "LR_Dynamic_model_2000";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0008);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993771);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995727);

    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.210618e-6);

    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999837);

    this->mVariableNames.push_back("T_type_Ca_channel_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000970231);

    this->mVariableNames.push_back("T_type_Ca_channel_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994305);

    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000124042);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("transient_outward_current_zdv_gate__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("transient_outward_current_ydv_gate__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6e-5);

    this->mVariableNames.push_back("calcium_dynamics__Ca_JSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__Cainfluxtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("ionic_concentrations__Nai");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9);

    this->mVariableNames.push_back("ionic_concentrations__Ki");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.2);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFaberRudy2000FromCellMLCvodeOpt)
#endif // CHASTE_CVODE
