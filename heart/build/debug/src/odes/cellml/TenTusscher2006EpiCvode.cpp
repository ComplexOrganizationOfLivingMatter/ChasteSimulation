#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: tentusscher_model_2006_epi
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:12:55 2016
//! 
//! <autogenerated>

#include "TenTusscher2006EpiCvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> CellTenTusscher2006EpiFromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                0.0
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellTenTusscher2006EpiFromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 13);
    }
    
    CellTenTusscher2006EpiFromCellMLCvode::CellTenTusscher2006EpiFromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                19,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellTenTusscher2006EpiFromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        NV_Ith_S(this->mParameters, 0) = 1.0; // (c,rapid_time_dependent_potassium_current__ScaleFactorGkr) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (c,slow_time_dependent_potassium_current__ScaleFactorGks) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 1.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
        NV_Ith_S(this->mParameters, 3) = 2; // (c,calcium_dynamics__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 5.4; // (c,potassium_dynamics__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 140; // (c,sodium_dynamics__Na_o) [millimolar]
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellTenTusscher2006EpiFromCellMLCvode::~CellTenTusscher2006EpiFromCellMLCvode()
    {
    }
    
    double CellTenTusscher2006EpiFromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = NV_Ith_S(mParameters, 2) * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = NV_Ith_S(mParameters, 0) * 0.153 * sqrt(NV_Ith_S(mParameters, 4) * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = NV_Ith_S(mParameters, 1) * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - NV_Ith_S(mParameters, 3))) / (exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * NV_Ith_S(mParameters, 4)) / (NV_Ith_S(mParameters, 4) + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07))); // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * NV_Ith_S(mParameters, 3)) - (exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07) * pow(NV_Ith_S(mParameters, 5), 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(NV_Ith_S(mParameters, 5), 3.0)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3)) * (1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07)))); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853)); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__i_ionic = (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellTenTusscher2006EpiFromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = NV_Ith_S(mParameters, 2) * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = NV_Ith_S(mParameters, 0) * 0.153 * sqrt(NV_Ith_S(mParameters, 4) * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = NV_Ith_S(mParameters, 1) * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - NV_Ith_S(mParameters, 3))) / (exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * NV_Ith_S(mParameters, 4)) / (NV_Ith_S(mParameters, 4) + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07))); // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * NV_Ith_S(mParameters, 3)) - (exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07) * pow(NV_Ith_S(mParameters, 5), 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(NV_Ith_S(mParameters, 5), 3.0)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3)) * (1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07)))); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853)); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_calcium_dynamics__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__calcium_dynamics__Ca_SR, 2.0))); // dimensionless
        const double var_calcium_dynamics__k1 = 0.14999999999999999 / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__i_rel = 0.10199999999999999 * ((var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0) * var_chaste_interface__calcium_dynamics__R_prime) / (0.059999999999999998 + (var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0)))) * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = 0.0063749999999999996 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_leak = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        const double d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = ((1.0 / (1.0 + exp(( -26.0 - var_chaste_interface__membrane__V) * 0.14285714285714285))) - var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1) / ((450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432)))); // per_millisecond
        const double d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 88.0) * 0.041666666666666664))) - var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) / ((3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003)))); // per_millisecond
        const double d_dt_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = ((1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.071428571428571425))) - var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) / (((1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = ((1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__membrane__V) * 0.11074197120708749), 2.0)) - var_chaste_interface__fast_sodium_current_m_gate__m) / ((1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001))))); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = ((1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) - var_chaste_interface__fast_sodium_current_h_gate__h) / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp((-(var_chaste_interface__membrane__V + 80.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))))))); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = ((1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) - var_chaste_interface__fast_sodium_current_j_gate__j) / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))))))); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_d_gate__d = ((1.0 / (1.0 + exp(( -8.0 - var_chaste_interface__membrane__V) * 0.13333333333333333))) - var_chaste_interface__L_type_Ca_current_d_gate__d) / ((((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)))); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_gate__f = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.14285714285714285))) - var_chaste_interface__L_type_Ca_current_f_gate__f) / ((1102.5 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))) + 20.0); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f2_gate__f2 = (((0.67000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.14285714285714285))) + 0.33000000000000002) - var_chaste_interface__L_type_Ca_current_f2_gate__f2) / ((562.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001)))); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass = (((0.59999999999999998 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) / ((80.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 2.0); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_current_s_gate__s = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.20000000000000001))) - var_chaste_interface__transient_outward_current_s_gate__s) / ((85.0 * exp((-pow(var_chaste_interface__membrane__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__membrane__V - 20.0) * 0.20000000000000001))) + 3.0); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_current_r_gate__r = ((1.0 / (1.0 + exp((20.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) - var_chaste_interface__transient_outward_current_r_gate__r) / ((9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004); // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__calcium_dynamics__Ca_i + 0.001, 2.0)))) * (((((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_calcium_dynamics__i_xfer) - ((((var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) - (2.0 * var_sodium_calcium_exchanger_current__i_NaCa)) * var_membrane__Cm) * 0.00031590674984870111)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999, 2.0)))) * (var_calcium_dynamics__i_up - (var_calcium_dynamics__i_rel + var_calcium_dynamics__i_leak)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001, 2.0)))) * (((((-var_L_type_Ca_current__i_CaL) * var_membrane__Cm) * 0.094772024954610345) + ((var_calcium_dynamics__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_calcium_dynamics__i_xfer * 0.016403999999999998) * 18288.2223847842)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__R_prime = ((-(0.044999999999999998 * var_calcium_dynamics__kcasr)) * var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__calcium_dynamics__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__sodium_dynamics__Na_i = ((-(var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + (3.0 * var_sodium_potassium_pump_current__i_NaK) + (3.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00063181349969740222) * var_membrane__Cm; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__potassium_dynamics__K_i = ((-((var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_potassium_pump_current__i_p_K + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_sodium_potassium_pump_current__i_NaK))) / (0.016403999999999998 * var_potassium_dynamics__F)) * var_membrane__Cm; // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface__membrane__V =  -1.0 * (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__L_type_Ca_current_f2_gate__f2;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__transient_outward_current_s_gate__s;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__transient_outward_current_r_gate__r;
        NV_Ith_S(rDY, 13) = d_dt_chaste_interface__calcium_dynamics__Ca_i;
        NV_Ith_S(rDY, 14) = d_dt_chaste_interface__calcium_dynamics__Ca_SR;
        NV_Ith_S(rDY, 15) = d_dt_chaste_interface__calcium_dynamics__Ca_ss;
        NV_Ith_S(rDY, 16) = d_dt_chaste_interface__calcium_dynamics__R_prime;
        NV_Ith_S(rDY, 17) = d_dt_chaste_interface__sodium_dynamics__Na_i;
        NV_Ith_S(rDY, 18) = d_dt_chaste_interface__potassium_dynamics__K_i;
    }
    
    void CellTenTusscher2006EpiFromCellMLCvode::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 13);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_t4 = 1.0 / var_chaste_interface__potassium_dynamics__K_i; // dimensionless
        const double var_t8 = 26.713760659695648 * log(NV_Ith_S(mParameters, 4) * var_t4); // dimensionless
        const double var_t11 = exp(((0.059999999999999998 * var_chaste_interface__membrane__V) - (0.059999999999999998 * var_t8)) - 12.0); // dimensionless
        const double var_t12 = 1.0 + var_t11; // dimensionless
        const double var_t14 = 1.0 / pow(var_t12, 2.0); // dimensionless
        const double var_t15 = 5.4050000000000002 * var_t14; // dimensionless
        const double var_t16 = 1.0 / var_t12; // dimensionless
        const double var_t21 = exp(((0.00020000000000000001 * var_chaste_interface__membrane__V) - (0.00020000000000000001 * var_t8)) + 0.02); // dimensionless
        const double var_t23 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t26 = exp((var_t23 - (0.10000000000000001 * var_t8)) - 1.0); // dimensionless
        const double var_t27 = (3.0 * var_t21) + var_t26; // dimensionless
        const double var_t31 = exp(( -0.5 * var_chaste_interface__membrane__V) + (0.5 * var_t8)); // dimensionless
        const double var_t32 = 1.0 + var_t31; // dimensionless
        const double var_t33 = 1.0 / var_t32; // dimensionless
        const double var_t35 = (0.10000000000000001 * var_t16) + (var_t27 * var_t33); // dimensionless
        const double var_t36 = 1.0 / var_t35; // dimensionless
        const double var_t37 = var_chaste_interface__membrane__V - var_t8; // dimensionless
        const double var_t38 = var_t36 * var_t37; // dimensionless
        const double var_t41 = ((0.0060000000000000001 * var_t15) * var_t38) * var_t11; // dimensionless
        const double var_t42 = 5.4050000000000002 * var_t16; // dimensionless
        const double var_t45 = (1.0 / pow(var_t35, 2.0)) * var_t37; // dimensionless
        const double var_t54 = var_t27 / pow(var_t32, 2.0); // dimensionless
        const double var_t60 = ((0.10000000000000001 * var_t42) * var_t45) * (((( -0.0060000000000000001 * var_t14) * var_t11) + (((0.00059999999999999995 * var_t21) + (0.10000000000000001 * var_t26)) * var_t33)) + ((0.5 * var_t54) * var_t31)); // dimensionless
        const double var_t61 = var_t42 * var_t36; // dimensionless
        const double var_t62 = 0.10000000000000001 * var_t61; // dimensionless
        const double var_t63 = NV_Ith_S(mParameters, 2) * 0.29399999999999998; // dimensionless
        const double var_t65 = (var_t63 * var_chaste_interface__transient_outward_current_r_gate__r) * var_chaste_interface__transient_outward_current_s_gate__s; // dimensionless
        const double var_t66 = NV_Ith_S(mParameters, 0) * 0.153; // dimensionless
        const double var_t67 = pow(NV_Ith_S(mParameters, 4), 0.5); // dimensionless
        const double var_t68 = var_t67 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1; // dimensionless
        const double var_t71 = ((0.43033148290000001 * var_t66) * var_t68) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t72 = NV_Ith_S(mParameters, 1) * 0.39200000000000002; // dimensionless
        const double var_t73 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0); // dimensionless
        const double var_t74 = var_t72 * var_t73; // dimensionless
        const double var_t75 = 3.9799999999999998e-05 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t76 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2; // dimensionless
        const double var_t78 = (var_t75 * var_t76) * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t83 = var_chaste_interface__membrane__V - 15.0; // dimensionless
        const double var_t88 = exp(((2.0 * var_t83) * 96485.341499999995) * 3.8797490106562429e-07); // dimensionless
        const double var_t89 = var_chaste_interface__calcium_dynamics__Ca_ss * var_t88; // dimensionless
        const double var_t91 = (0.25 * var_t89) - NV_Ith_S(mParameters, 3); // dimensionless
        const double var_t93 = var_t88 - 1.0; // dimensionless
        const double var_t94 = 1.0 / var_t93; // dimensionless
        const double var_t96 = (3611.8217397063131 * var_t91) * var_t94; // dimensionless
        const double var_t99 = var_t75 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t100 = var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t101 = var_t100 * var_t83; // dimensionless
        const double var_t102 = var_t99 * var_t101; // dimensionless
        const double var_t115 = 1.0 / pow(var_t93, 2.0); // dimensionless
        const double var_t121 = 2.7240000000000002 * NV_Ith_S(mParameters, 4); // dimensionless
        const double var_t123 = 1.0 / (NV_Ith_S(mParameters, 4) + 1.0); // dimensionless
        const double var_t124 = var_t121 * var_t123; // dimensionless
        const double var_t125 = var_chaste_interface__sodium_dynamics__Na_i + 40.0; // dimensionless
        const double var_t126 = 1.0 / var_t125; // dimensionless
        const double var_t129 = (var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07; // dimensionless
        const double var_t131 = exp( -0.10000000000000001 * var_t129); // dimensionless
        const double var_t133 = exp(-var_t129); // dimensionless
        const double var_t135 = (1.0 + (0.1245 * var_t131)) + (0.035299999999999998 * var_t133); // dimensionless
        const double var_t148 = (((var_t124 * var_chaste_interface__sodium_dynamics__Na_i) * var_t126) / pow(var_t135, 2.0)) * (( -0.00046605194074318104 * var_t131) - (0.0013214163460429152 * var_t133)); // dimensionless
        const double var_t149 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t151 = (14.837999999999999 * var_t149) * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t152 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t153 = var_t151 * var_t152; // dimensionless
        const double var_t159 = exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473); // dimensionless
        const double var_t161 = pow(var_chaste_interface__sodium_dynamics__Na_i, 2.0); // dimensionless
        const double var_t162 = var_t161 * var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t171 = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473); // dimensionless
        const double var_t173 = pow(NV_Ith_S(mParameters, 5), 2.0) * NV_Ith_S(mParameters, 5); // dimensionless
        const double var_t176 = ((var_t171 * var_t173) * var_chaste_interface__calcium_dynamics__Ca_i) * 2.5; // dimensionless
        const double var_t183 = 1.0 / (669921.875 + var_t173); // dimensionless
        const double var_t185 = 1.0 / (1.3799999999999999 + NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_t186 = var_t183 * var_t185; // dimensionless
        const double var_t188 = 1.0 + (0.10000000000000001 * var_t171); // dimensionless
        const double var_t189 = 1.0 / var_t188; // dimensionless
        const double var_t190 = var_t186 * var_t189; // dimensionless
        const double var_t191 = (1000.0 * ((((0.013101861787960915 * var_t159) * var_t162) * NV_Ith_S(mParameters, 3)) - ( -0.024332029034784559 * var_t176))) * var_t190; // dimensionless
        const double var_t195 = 1000.0 * (((var_t159 * var_t162) * NV_Ith_S(mParameters, 3)) - var_t176); // dimensionless
        const double var_t204 = ((((((var_t195 * var_t186) / pow(var_t188, 2.0)) * 0.10000000000000001) *  -0.65000000000000002) * 96485.341499999995) * 3.8797490106562429e-07) * var_t171; // dimensionless
        const double var_t207 = exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t208 = 1.0 + var_t207; // dimensionless
        const double var_t209 = 1.0 / var_t208; // dimensionless
        const double var_t210 = 0.0146 * var_t209; // dimensionless
        const double var_t216 = ((0.0024414715723799999 * var_t37) / pow(var_t208, 2.0)) * var_t207; // dimensionless
        const double var_t218 = var_t67 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t229 = 1.0 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i)); // dimensionless
        const double var_t234 = var_chaste_interface__membrane__V - (26.713760659695648 * log((NV_Ith_S(mParameters, 4) + (0.029999999999999999 * NV_Ith_S(mParameters, 5))) * var_t229)); // dimensionless
        const double var_t238 = 14.837999999999999 * var_t149; // dimensionless
        const double var_t239 = 1.0 / var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t244 = var_chaste_interface__membrane__V - (26.713760659695648 * log(NV_Ith_S(mParameters, 5) * var_t239)); // dimensionless
        const double var_t260 = (var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) * var_t83; // dimensionless
        const double var_t264 = var_t76 * var_t83; // dimensionless
        const double var_t272 = 1000.0 * var_t171; // dimensionless
        const double var_t275 = var_t185 * var_t189; // dimensionless
        const double var_t277 = (((var_t272 * var_t173) * 2.5) * var_t183) * var_t275; // dimensionless
        const double var_t280 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t283 = 0.0079072731552699109 * var_t280; // dimensionless
        const double var_t284 = var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t285 = 1.0 / var_t284; // dimensionless
        const double var_t286 = 0.12379999999999999 * var_t285; // dimensionless
        const double var_t287 = 0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t290 = var_t287 / pow(var_t284, 2.0); // dimensionless
        const double var_t292 = var_t83 * 9309421124.3716221; // dimensionless
        const double var_t303 = ((((var_t72 * var_t73) * 8314.4719999999998) * 0.0032129232812012176) * var_t229) * 0.029999999999999999; // dimensionless
        const double var_t305 = 1.0 / var_t135; // dimensionless
        const double var_t307 = ((var_t121 * var_t123) * var_t126) * var_t305; // dimensionless
        const double var_t312 = ((var_t124 * var_chaste_interface__sodium_dynamics__Na_i) / pow(var_t125, 2.0)) * var_t305; // dimensionless
        const double var_t315 = ((var_t153 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t239; // dimensionless
        const double var_t318 = 0.0077469905913117379 * var_t239; // dimensionless
        const double var_t323 = ((((1000.0 * var_t159) * var_t161) * NV_Ith_S(mParameters, 3)) * var_t183) * var_t275; // dimensionless
        const double var_t327 = 1.0364268649036186e-05 * var_t4; // dimensionless
        const double var_t328 = var_t327 * var_t11; // dimensionless
        const double var_t353 = 2577486.3199999998 * var_t327; // dimensionless
        const double var_t357 = var_t66 * var_t68; // dimensionless
        const double var_t370 = (((((((((0.0060000000000000001 * var_t15) * var_t38) * 2577486.3199999998) * var_t328) + (((0.10000000000000001 * var_t42) * var_t45) * (((((( -0.0060000000000000001 * var_t14) * 8314.4719999999998) * 310.0) * var_t328) + ((((1546.4917919999998 * var_t327) * var_t21) + ((257748.63199999998 * var_t327) * var_t26)) * var_t33)) + (((((0.5 * var_t54) * 8314.4719999999998) * 0.0032129232812012176) * var_t4) * var_t31)))) - ((0.10000000000000001 * var_t61) * var_t353)) - (var_t65 * var_t353)) - (((((0.43033148290000001 * var_t357) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) * 8314.4719999999998) * 0.0032129232812012176) * var_t4)) - (((var_t74 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t229)) - ((37631.300272 * var_t327) * var_t209); // dimensionless
        const double var_t371 = 0.14285714285714285 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t373 = exp( -3.7142857142857144 - var_t371); // dimensionless
        const double var_t374 = 1.0 + var_t373; // dimensionless
        const double var_t378 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t380 = exp( -4.5 - var_t378); // dimensionless
        const double var_t381 = 1.0 + var_t380; // dimensionless
        const double var_t384 = exp((0.086956521740000001 * var_chaste_interface__membrane__V) + 2.6086956520000002); // dimensionless
        const double var_t385 = 1.0 + var_t384; // dimensionless
        const double var_t386 = var_t381 * var_t385; // dimensionless
        const double var_t390 = (1.0 / var_t374) - var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1; // dimensionless
        const double var_t401 = exp((0.041666666666666664 * var_chaste_interface__membrane__V) + 3.6666666666666665); // dimensionless
        const double var_t402 = 1.0 + var_t401; // dimensionless
        const double var_t406 = 0.050000000000000003 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t408 = exp( -3.0 - var_t406); // dimensionless
        const double var_t409 = 1.0 + var_t408; // dimensionless
        const double var_t411 = exp(var_t406 - 3.0); // dimensionless
        const double var_t412 = 1.0 + var_t411; // dimensionless
        const double var_t413 = var_t409 * var_t412; // dimensionless
        const double var_t417 = (1.0 / var_t402) - var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t428 = exp( -0.35714285714285715 - (0.071428571428571425 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t429 = 1.0 + var_t428; // dimensionless
        const double var_t433 = 0.16666666666666666 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t435 = exp(0.83333333333333337 - var_t433); // dimensionless
        const double var_t436 = 1.0 + var_t435; // dimensionless
        const double var_t437 = pow(var_t436, 0.5); // dimensionless
        const double var_t438 = 1.0 / var_t437; // dimensionless
        const double var_t441 = exp((0.066666666666666666 * var_chaste_interface__membrane__V) - 2.3333333333333335); // dimensionless
        const double var_t442 = 1.0 + var_t441; // dimensionless
        const double var_t443 = 1.0 / var_t442; // dimensionless
        const double var_t446 = ((1400.0 * var_t438) * var_t443) + 80.0; // dimensionless
        const double var_t447 = 1.0 / var_t446; // dimensionless
        const double var_t470 = exp( -6.2967884820000002 - (0.1107419712 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t471 = 1.0 + var_t470; // dimensionless
        const double var_t472 = pow(var_t471, 2.0); // dimensionless
        const double var_t476 = 0.20000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t478 = exp( -12.0 - var_t476); // dimensionless
        const double var_t479 = 1.0 + var_t478; // dimensionless
        const double var_t481 = exp(var_t476 + 7.0); // dimensionless
        const double var_t482 = 1.0 + var_t481; // dimensionless
        const double var_t487 = exp((0.0050000000000000001 * var_chaste_interface__membrane__V) - 0.25); // dimensionless
        const double var_t488 = 1.0 + var_t487; // dimensionless
        const double var_t491 = (0.10000000000000001 / var_t482) + (0.10000000000000001 / var_t488); // dimensionless
        const double var_t492 = 1.0 / var_t491; // dimensionless
        const double var_t493 = var_t479 * var_t492; // dimensionless
        const double var_t497 = (1.0 / var_t472) - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t518 = exp((0.134589502 * var_chaste_interface__membrane__V) + 9.6298788680000005); // dimensionless
        const double var_t519 = 1.0 + var_t518; // dimensionless
        const double var_t520 = pow(var_t519, 2.0); // dimensionless
        const double var_t523 = ((1.0 / var_t520) / var_t519) * var_t518; // dimensionless
        const double var_t524 = var_chaste_interface__membrane__V <  -40.0; // dimensionless
        const double var_t527 = exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999); // dimensionless
        const double var_t539 = exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995); // dimensionless
        const double var_t545 = (var_t524 ? (0.057000000000000002 * var_t527) : 0.0) + (var_t524 ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 + (0.13 * var_t539)))); // dimensionless
        const double var_t548 = 1.0 / var_t520; // dimensionless
        const double var_t550 = var_chaste_interface__membrane__V <  -40.0; // dimensionless
        const double var_t553 =  -40.0 < var_chaste_interface__membrane__V; // dimensionless
        const double var_t606 = (var_t524 ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) : 0.0) + (var_t524 ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp((-var_t23) - 3.2000000000000002)))); // dimensionless
        const double var_t611 = exp(0.24440000000000001 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t614 = exp( -0.043909999999999998 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t617 = var_chaste_interface__membrane__V + 37.780000000000001; // dimensionless
        const double var_t621 = exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999); // dimensionless
        const double var_t622 = 1.0 + var_t621; // dimensionless
        const double var_t623 = 1.0 / var_t622; // dimensionless
        const double var_t627 = ( -25428.0 * var_t611) - (6.9480000000000002e-06 * var_t614); // dimensionless
        const double var_t638 = exp( -0.01052 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t641 = exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001); // dimensionless
        const double var_t642 = 1.0 + var_t641; // dimensionless
        const double var_t653 = exp(0.057000000000000002 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t656 = exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002); // dimensionless
        const double var_t657 = 1.0 + var_t656; // dimensionless
        const double var_t673 = exp( -1.0666666659999999 - (0.1333333333 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t674 = 1.0 + var_t673; // dimensionless
        const double var_t680 = exp( -2.6923076923076925 - (0.076923076923076927 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t681 = 1.0 + var_t680; // dimensionless
        const double var_t684 = (1.3999999999999999 / var_t681) + 0.25; // dimensionless
        const double var_t686 = exp(var_t476 + 1.0); // dimensionless
        const double var_t687 = 1.0 + var_t686; // dimensionless
        const double var_t688 = 1.0 / var_t687; // dimensionless
        const double var_t692 = exp(2.5 - var_t406); // dimensionless
        const double var_t693 = 1.0 + var_t692; // dimensionless
        const double var_t695 = ((1.3999999999999999 * var_t684) * var_t688) + (1.0 / var_t693); // dimensionless
        const double var_t696 = 1.0 / var_t695; // dimensionless
        const double var_t722 = exp(var_t371 + 2.8571428571428572); // dimensionless
        const double var_t723 = 1.0 + var_t722; // dimensionless
        const double var_t728 = pow(var_chaste_interface__membrane__V + 27.0, 2.0); // dimensionless
        const double var_t730 = exp( -0.0044444444444444444 * var_t728); // dimensionless
        const double var_t733 = exp(1.3 - var_t378); // dimensionless
        const double var_t734 = 1.0 + var_t733; // dimensionless
        const double var_t738 = exp(var_t378 + 3.0); // dimensionless
        const double var_t739 = 1.0 + var_t738; // dimensionless
        const double var_t740 = 1.0 / var_t739; // dimensionless
        const double var_t742 = (((1102.5 * var_t730) + (200.0 / var_t734)) + (180.0 * var_t740)) + 20.0; // dimensionless
        const double var_t743 = 1.0 / var_t742; // dimensionless
        const double var_t761 = (1.0 / pow(var_t739, 2.0)) * var_t738; // dimensionless
        const double var_t767 = exp(var_t371 + 5.0); // dimensionless
        const double var_t768 = 1.0 + var_t767; // dimensionless
        const double var_t773 = exp( -0.0041666666666666666 * var_t728); // dimensionless
        const double var_t776 = exp(2.5 - var_t378); // dimensionless
        const double var_t777 = 1.0 + var_t776; // dimensionless
        const double var_t781 = ((562.0 * var_t773) + (31.0 / var_t777)) + (80.0 * var_t740); // dimensionless
        const double var_t782 = 1.0 / var_t781; // dimensionless
        const double var_t803 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0); // dimensionless
        const double var_t805 = 1.0 + (400.0 * var_t803); // dimensionless
        const double var_t806 = 1.0 / var_t805; // dimensionless
        const double var_t808 = (80.0 * var_t806) + 2.0; // dimensionless
        const double var_t809 = 1.0 / var_t808; // dimensionless
        const double var_t812 = (1.0 / pow(var_t805, 2.0)) * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t824 = exp(var_t476 + 4.0); // dimensionless
        const double var_t825 = 1.0 + var_t824; // dimensionless
        const double var_t832 = exp( -0.0031250000000000002 * pow(var_chaste_interface__membrane__V + 45.0, 2.0)); // dimensionless
        const double var_t835 = exp(var_t476 - 4.0); // dimensionless
        const double var_t836 = 1.0 + var_t835; // dimensionless
        const double var_t839 = ((85.0 * var_t832) + (5.0 / var_t836)) + 3.0; // dimensionless
        const double var_t840 = 1.0 / var_t839; // dimensionless
        const double var_t859 = exp(3.3333333333333335 - var_t433); // dimensionless
        const double var_t860 = 1.0 + var_t859; // dimensionless
        const double var_t867 = exp( -0.00055555555555555556 * pow(40.0 + var_chaste_interface__membrane__V, 2.0)); // dimensionless
        const double var_t869 = (9.5 * var_t867) + 0.80000000000000004; // dimensionless
        const double var_t870 = 1.0 / var_t869; // dimensionless
        const double var_t885 = var_chaste_interface__calcium_dynamics__Ca_i + 0.001; // dimensionless
        const double var_t886 = pow(var_t885, 2.0); // dimensionless
        const double var_t889 = 1.0 + (0.00020000000000000001 / var_t886); // dimensionless
        const double var_t890 = 1.0 / var_t889; // dimensionless
        const double var_t897 = (var_membrane__Cm * 60.960741282614002) * 1.0364268649036186e-05; // dimensionless
        const double var_t903 = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t905 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t908 = 1.0 + (6.2499999999999997e-08 / var_t905); // dimensionless
        const double var_t910 = 0.0063749999999999996 / var_t908; // dimensionless
        const double var_t915 = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t946 =  -0.00036000000000000002 - ((((0.012749999999999999 / pow(var_t908, 2.0)) * 6.2499999999999997e-08) / var_t905) / var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t969 = var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t970 = pow(var_t969, 2.0); // dimensionless
        const double var_t973 = 1.0 + (3.0 / var_t970); // dimensionless
        const double var_t974 = 1.0 / var_t973; // dimensionless
        const double var_t981 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0); // dimensionless
        const double var_t984 = 1.0 + (2.25 / var_t981); // dimensionless
        const double var_t987 = 2.5 - (1.5 / var_t984); // dimensionless
        const double var_t988 = 1.0 / var_t987; // dimensionless
        const double var_t989 = 0.015299999999999998 * var_t988; // dimensionless
        const double var_t990 = var_t803 * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t991 = 0.14999999999999999 * var_t988; // dimensionless
        const double var_t993 = 0.059999999999999998 + (var_t991 * var_t803); // dimensionless
        const double var_t994 = 1.0 / var_t993; // dimensionless
        const double var_t995 = var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t996 = var_t994 * var_t995; // dimensionless
        const double var_t1006 = pow(var_t987, 2.0); // dimensionless
        const double var_t1007 = 1.0 / var_t1006; // dimensionless
        const double var_t1013 = 1.0 / pow(var_t984, 2.0); // dimensionless
        const double var_t1016 = (1.0 / var_t981) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t1017 = (var_t1013 * 2.25) * var_t1016; // dimensionless
        const double var_t1024 = (1.0 / var_t1006) / var_t987; // dimensionless
        const double var_t1025 = pow(var_t803, 2.0); // dimensionless
        const double var_t1030 = 1.0 / pow(var_t993, 2.0); // dimensionless
        const double var_t1031 = var_t1030 * var_t995; // dimensionless
        const double var_t1036 = var_t990 * var_t994; // dimensionless
        const double var_t1037 = var_t989 * var_t1036; // dimensionless
        const double var_t1041 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t1046 = var_t803 * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t1055 = var_t988 * var_t803; // dimensionless
        const double var_t1059 = var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001; // dimensionless
        const double var_t1060 = pow(var_t1059, 2.0); // dimensionless
        const double var_t1063 = 1.0 + (0.0001 / var_t1060); // dimensionless
        const double var_t1064 = 1.0 / var_t1063; // dimensionless
        const double var_t1075 = (var_t99 * var_t100) * var_t292; // dimensionless
        const double var_t1079 = var_membrane__Cm * 18288.2223847842; // dimensionless
        const double var_t1080 = (var_t88 * var_t94) * var_t1079; // dimensionless
        const double var_t1093 = var_t1064 * 3.9799999999999998e-05; // dimensionless
        const double var_t1098 = ((0.037433890822745473 * var_t91) * var_t94) * var_t1079; // dimensionless
        const double var_t1101 = var_t1093 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t1117 = (var_t995 * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1119 = 2.25 * var_t1016; // dimensionless
        const double var_t1121 = ((var_t1117 * 1.5) * var_t1013) * var_t1119; // dimensionless
        const double var_t1130 = 0.015299999999999998 * var_t1055; // dimensionless
        const double var_t1131 = var_chaste_interface__calcium_dynamics__R_prime * var_t994; // dimensionless
        const double var_t1134 = ((var_t1130 * var_t1131) * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1141 = var_t1131 * var_t1117; // dimensionless
        const double var_t1179 = 0.044999999999999998 * var_t987; // dimensionless
        const double var_t1188 = 1.0364268649036186e-05 * var_membrane__Cm; // dimensionless
        const double var_t1192 = (var_t244 * 60.960741282614002) * var_t1188; // dimensionless
        const double var_t1217 = (var_t37 * 60.960741282614002) * var_t1188; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((((((var_t41 + var_t60) - var_t62) - var_t65) - var_t71) - var_t74) - ((4.0 * var_t78) * var_t96)) - ((((2.0 * var_t102) * 135.20454067538475) * var_t89) * var_t94)) + (((((8.0 * var_t102) * 135.20454067538475) * var_t91) * var_t115) * var_t88)) + var_t148) - var_t153) - 0.00029) - var_t191) + var_t204) - 0.00059199999999999997) - var_t210) - var_t216));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * (((((5.2910052910052912e-05 / pow(var_t374, 2.0)) * var_t373) * var_t386) - (((3.7037037037037037e-05 * var_t390) * var_t380) * var_t385)) + (((3.2206119159999999e-05 * var_t390) * var_t381) * var_t384));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((((( -0.01240079365 / pow(var_t402, 2.0)) * var_t401) * var_t413) - (((0.01488095238 * var_t417) * var_t408) * var_t412)) + (((0.01488095238 * var_t417) * var_t409) * var_t411));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * ((((0.071428571428571425 / pow(var_t429, 2.0)) * var_t428) * var_t447) - ((((1.0 / var_t429) - var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) / pow(var_t446, 2.0)) * (((((116.66666666666667 / var_t437) / var_t436) * var_t443) * var_t435) - (((93.333333333333329 * var_t438) / pow(var_t442, 2.0)) * var_t441))));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((((((0.22148394239999999 / var_t472) / var_t471) * var_t470) * var_t493) - (((0.20000000000000001 * var_t497) * var_t478) * var_t492)) - (((var_t497 * var_t479) / pow(var_t491, 2.0)) * ((( -0.02 / pow(var_t482, 2.0)) * var_t481) - ((0.00050000000000000001 / pow(var_t488, 2.0)) * var_t487))));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((( -0.269179004 * var_t523) * var_t545) + ((var_t548 - var_chaste_interface__fast_sodium_current_h_gate__h) * ((var_t550 ? ( -0.0083823529409999993 * var_t527) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) + ((var_chaste_interface__membrane__V <=  -40.0) ? ((0.21329999999999999 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (108035.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : var_t553 ? ((0.009018018018 / pow(0.13 + (0.13 * var_t539), 2.0)) * var_t539) : NAN))));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * ((( -0.269179004 * var_t523) * var_t606) + ((var_t548 - var_chaste_interface__fast_sodium_current_j_gate__j) * ((var_t550 ? (((((( -6214.6031999999996 * var_t611) + (3.0508668000000001e-07 * var_t614)) * var_t617) * var_t623) + (var_t627 * var_t623)) - ((((0.311 * var_t627) * var_t617) / pow(var_t622, 2.0)) * var_t621)) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) + ((var_chaste_interface__membrane__V <=  -40.0) ? ((( -0.00025500479999999997 * var_t638) / var_t642) + (((0.003340272 * var_t638) / pow(var_t642, 2.0)) * var_t641)) : var_t553 ? (((0.034200000000000001 * var_t653) / var_t657) + (((0.059999999999999998 * var_t653) / pow(var_t657, 2.0)) * var_t656)) : NAN))));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * ((((0.1333333333 / pow(var_t674, 2.0)) * var_t673) * var_t696) - ((((1.0 / var_t674) - var_chaste_interface__L_type_Ca_current_d_gate__d) / pow(var_t695, 2.0)) * (((((0.15076923079999999 / pow(var_t681, 2.0)) * var_t680) * var_t688) - (((0.28000000000000003 * var_t684) / pow(var_t687, 2.0)) * var_t686)) + ((0.050000000000000003 / pow(var_t693, 2.0)) * var_t692))));
        DENSE_ELEM(rJacobian, 8, 0) = var_chaste_interface__environment__fake_dt * (((( -0.14285714285714285 / pow(var_t723, 2.0)) * var_t722) * var_t743) - ((((1.0 / var_t723) - var_chaste_interface__L_type_Ca_current_f_gate__f) / pow(var_t742, 2.0)) * ((((1102.5 * (( -0.0088888888888888889 * var_chaste_interface__membrane__V) - 0.23999999999999999)) * var_t730) + ((20.0 / pow(var_t734, 2.0)) * var_t733)) - (18.0 * var_t761))));
        DENSE_ELEM(rJacobian, 9, 0) = var_chaste_interface__environment__fake_dt * (((( -0.09571428572 / pow(var_t768, 2.0)) * var_t767) * var_t782) - (((((0.67000000000000004 / var_t768) + 0.33000000000000002) - var_chaste_interface__L_type_Ca_current_f2_gate__f2) / pow(var_t781, 2.0)) * ((((562.0 * (( -0.0083333333333333332 * var_chaste_interface__membrane__V) - 0.22500000000000001)) * var_t773) + ((3.1000000000000001 / pow(var_t777, 2.0)) * var_t776)) - (8.0 * var_t761))));
        DENSE_ELEM(rJacobian, 11, 0) = var_chaste_interface__environment__fake_dt * (((( -0.20000000000000001 / pow(var_t825, 2.0)) * var_t824) * var_t840) - ((((1.0 / var_t825) - var_chaste_interface__transient_outward_current_s_gate__s) / pow(var_t839, 2.0)) * (((85.0 * (( -0.0062500000000000003 * var_chaste_interface__membrane__V) - 0.28125)) * var_t832) - ((1.0 / pow(var_t836, 2.0)) * var_t835))));
        DENSE_ELEM(rJacobian, 12, 0) = var_chaste_interface__environment__fake_dt * ((((0.16666666666666666 / pow(var_t860, 2.0)) * var_t859) * var_t870) - ((((9.5 * ((1.0 / var_t860) - var_chaste_interface__transient_outward_current_r_gate__r)) / pow(var_t869, 2.0)) * ( -0.044444444444444446 - (0.0011111111111111111 * var_chaste_interface__membrane__V))) * var_t867));
        DENSE_ELEM(rJacobian, 13, 0) = var_chaste_interface__environment__fake_dt * ((( -0.5 * var_t890) * ((0.00059199999999999997 - (2.0 * var_t191)) + (2.0 * var_t204))) * var_t897);
        DENSE_ELEM(rJacobian, 15, 0) = var_chaste_interface__environment__fake_dt * (var_t1064 * (((((((((( -2.0 * var_t99) * var_t100) * 96485.341499999995) * 3.8797490106562429e-07) * var_t91) * var_t94) * var_membrane__Cm) * 18288.2223847842) - ((((1.0 * var_t1075) * 1.5052452385688096e-13) * var_chaste_interface__calcium_dynamics__Ca_ss) * var_t1080)) + (((((((4.0 * var_t1075) * 1.5052452385688096e-13) * var_t91) * var_t115) * var_membrane__Cm) * 18288.2223847842) * var_t88)));
        DENSE_ELEM(rJacobian, 17, 0) = var_chaste_interface__environment__fake_dt * (((((((-var_t153) - 0.00029) + (3.0 * var_t148)) - (3.0 * var_t191)) + (3.0 * var_t204)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 18, 0) = var_chaste_interface__environment__fake_dt * ((((((((((var_t41 + var_t60) - var_t62) - var_t65) - var_t71) - var_t74) - var_t210) - var_t216) - (2.0 * var_t148)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.43033148290000001 * var_t66) * var_t218) * var_t37));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * ( -0.00037037037037037035 * var_t386);
        DENSE_ELEM(rJacobian, 18, 1) = var_chaste_interface__environment__fake_dt * ((( -0.43033148290000001 * var_t66) * var_t218) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.43033148290000001 * var_t66) * var_t68) * var_t37));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * ( -0.29761904760000002 * var_t413);
        DENSE_ELEM(rJacobian, 18, 2) = var_chaste_interface__environment__fake_dt * (( -0.43033148290000001 * var_t357) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -2.0 * var_t72) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) * var_t234));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (-var_t447);
        DENSE_ELEM(rJacobian, 18, 3) = var_chaste_interface__environment__fake_dt * ((((( -2.0 * var_t72) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs) * var_t234) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -3.0 * var_t238) * var_t152) * var_t244));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (-var_t493);
        DENSE_ELEM(rJacobian, 17, 4) = var_chaste_interface__environment__fake_dt * ((( -3.0 * var_t238) * var_t152) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t151) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t244));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (-var_t545);
        DENSE_ELEM(rJacobian, 17, 5) = var_chaste_interface__environment__fake_dt * (((-var_t151) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t151) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t244));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (-var_t606);
        DENSE_ELEM(rJacobian, 17, 6) = var_chaste_interface__environment__fake_dt * (((-var_t151) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t1192);
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -0.00015919999999999999 * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t101) * var_t96));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (-var_t696);
        DENSE_ELEM(rJacobian, 15, 7) = var_chaste_interface__environment__fake_dt * (((( -2.0 * var_t1093) * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t101) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 8) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t101) * var_t96));
        DENSE_ELEM(rJacobian, 8, 8) = var_chaste_interface__environment__fake_dt * (-var_t743);
        DENSE_ELEM(rJacobian, 15, 8) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t101) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 9) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t260) * var_t96));
        DENSE_ELEM(rJacobian, 9, 9) = var_chaste_interface__environment__fake_dt * (-var_t782);
        DENSE_ELEM(rJacobian, 15, 9) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t260) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 10) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -4.0 * var_t75) * var_t264) * var_t96));
        DENSE_ELEM(rJacobian, 10, 10) = var_chaste_interface__environment__fake_dt * (-var_t809);
        DENSE_ELEM(rJacobian, 15, 10) = var_chaste_interface__environment__fake_dt * ((( -2.0 * var_t1101) * var_t264) * var_t1098);
        DENSE_ELEM(rJacobian, 0, 11) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t63) * var_chaste_interface__transient_outward_current_r_gate__r) * var_t37));
        DENSE_ELEM(rJacobian, 11, 11) = var_chaste_interface__environment__fake_dt * (-var_t840);
        DENSE_ELEM(rJacobian, 18, 11) = var_chaste_interface__environment__fake_dt * (((-var_t63) * var_chaste_interface__transient_outward_current_r_gate__r) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 12) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t63) * var_chaste_interface__transient_outward_current_s_gate__s) * var_t37));
        DENSE_ELEM(rJacobian, 12, 12) = var_chaste_interface__environment__fake_dt * (-var_t870);
        DENSE_ELEM(rJacobian, 18, 12) = var_chaste_interface__environment__fake_dt * (((-var_t63) * var_chaste_interface__transient_outward_current_s_gate__s) * var_t1217);
        DENSE_ELEM(rJacobian, 0, 13) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((var_t277 - var_t283) - var_t286) + var_t290));
        DENSE_ELEM(rJacobian, 13, 13) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t889, 2.0)) * (((((var_t903 - var_t910) * 0.0010939999999999999) * 60.960741282614002) + var_t915) - (((0.5 * (((0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(NV_Ith_S(mParameters, 3) * var_t280)))) + (var_t287 * var_t285)) - ((2.0 * var_t195) * var_t190))) * var_membrane__Cm) * 0.00063181349969740233))) * 0.00020000000000000001) / var_t886) / var_t885) + (var_t890 * ((((var_t946 * 0.0010939999999999999) * 60.960741282614002) - 0.0038) - (((0.5 * (((var_t283 + var_t286) - var_t290) + (2.0 * var_t277))) * var_membrane__Cm) * 0.00063181349969740233))));
        DENSE_ELEM(rJacobian, 14, 13) = var_chaste_interface__environment__fake_dt * ((-var_t974) * var_t946);
        DENSE_ELEM(rJacobian, 15, 13) = var_chaste_interface__environment__fake_dt * ((var_t1064 * 0.0038) * 300.0);
        DENSE_ELEM(rJacobian, 17, 13) = var_chaste_interface__environment__fake_dt * ((((((3.0 * var_t272) * var_t173) * 2.5) * var_t183) * var_t275) * var_t897);
        DENSE_ELEM(rJacobian, 13, 14) = var_chaste_interface__environment__fake_dt * (((var_t890 * 0.00036000000000000002) * 0.0010939999999999999) * 60.960741282614002);
        DENSE_ELEM(rJacobian, 14, 14) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t973, 2.0)) * ((var_t910 - ((var_t989 * var_t990) * var_t996)) - var_t903)) * 3.0) / var_t970) / var_t969) + (var_t974 * ((((((((( -0.030599999999999995 * var_t1007) * var_t803) * var_chaste_interface__calcium_dynamics__R_prime) * var_t996) * 1.5) * var_t1017) + ((((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031) * 1.5) * var_t1017)) - var_t1037) - 0.00036000000000000002)));
        DENSE_ELEM(rJacobian, 15, 14) = var_chaste_interface__environment__fake_dt * (var_t1064 * (((((0.030599999999999995 * var_t1007) * var_t1036) * var_t1121) - (((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1121)) + var_t1134));
        DENSE_ELEM(rJacobian, 16, 14) = var_chaste_interface__environment__fake_dt * (((0.13500000000000001 * var_t1013) * var_t1119) * var_t1041);
        DENSE_ELEM(rJacobian, 0, 15) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((((( -1.0 * var_t78) * var_t292) * 0.00012027221933034354) * 0.0032258064516129032) * var_t88) * var_t94));
        DENSE_ELEM(rJacobian, 10, 15) = var_chaste_interface__environment__fake_dt * ((( -480.0 * var_t812) * var_t809) + (((64000.0 * (((0.59999999999999998 * var_t806) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass)) / pow(var_t808, 2.0)) * var_t812));
        DENSE_ELEM(rJacobian, 13, 15) = var_chaste_interface__environment__fake_dt * (var_t890 * 0.0038);
        DENSE_ELEM(rJacobian, 14, 15) = var_chaste_interface__environment__fake_dt * (var_t974 * ((((( -2.0 * var_t989) * var_t1041) * var_t996) + ((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031)) + var_t1037));
        DENSE_ELEM(rJacobian, 15, 15) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t1063, 2.0)) * (((( -2.0 * var_t102) * var_t1098) + (var_t1130 * var_t1141)) - (var_t915 * 300.0))) * 0.0001) / var_t1060) / var_t1059) + (var_t1064 * ((((((( -0.5 * var_t102) * 0.037433890822745473) * var_t1080) + (((0.030599999999999995 * var_t988) * var_chaste_interface__calcium_dynamics__Ca_ss) * var_t1141)) - (((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1117)) - var_t1134) - 1.1399999999999999)));
        DENSE_ELEM(rJacobian, 16, 15) = var_chaste_interface__environment__fake_dt * ((-var_t1179) * var_chaste_interface__calcium_dynamics__R_prime);
        DENSE_ELEM(rJacobian, 14, 16) = var_chaste_interface__environment__fake_dt * (((((-var_t974) * 0.10199999999999999) * 0.14999999999999999) * var_t1055) * var_t996);
        DENSE_ELEM(rJacobian, 15, 16) = var_chaste_interface__environment__fake_dt * (((((var_t1064 * 0.10199999999999999) * var_t991) * var_t803) * var_t994) * var_t1117);
        DENSE_ELEM(rJacobian, 16, 16) = var_chaste_interface__environment__fake_dt * (((-var_t1179) * var_chaste_interface__calcium_dynamics__Ca_ss) - 0.0050000000000000001);
        DENSE_ELEM(rJacobian, 0, 17) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((-var_t303) - var_t307) + var_t312) - var_t315) - var_t318) - (3.0 * var_t323)));
        DENSE_ELEM(rJacobian, 13, 17) = var_chaste_interface__environment__fake_dt * (((((((3.0 * var_t890) * 1000.0) * var_t159) * var_t161) * NV_Ith_S(mParameters, 3)) * var_t190) * var_t897);
        DENSE_ELEM(rJacobian, 17, 17) = var_chaste_interface__environment__fake_dt * (((((((-var_t315) - var_t318) - (3.0 * var_t307)) + (3.0 * var_t312)) - (9.0 * var_t323)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 18, 17) = var_chaste_interface__environment__fake_dt * (((((-var_t303) + (2.0 * var_t307)) - (2.0 * var_t312)) * 60.960741282614002) * var_t1188);
        DENSE_ELEM(rJacobian, 0, 18) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : var_t370);
        DENSE_ELEM(rJacobian, 18, 18) = var_chaste_interface__environment__fake_dt * ((var_t370 * 60.960741282614002) * var_t1188);
    }
    
    N_Vector CellTenTusscher2006EpiFromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        // Mathematics
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        
        N_Vector dqs = N_VNew_Serial(1);
        NV_Ith_S(dqs, 0) = var_potassium_dynamics__F;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellTenTusscher2006EpiFromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_epi";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane__V");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.23);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00621);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4712);

    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0095);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00172);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7444);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7045);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.373e-5);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7888);

    this->mVariableNames.push_back("L_type_Ca_current_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9755);

    this->mVariableNames.push_back("L_type_Ca_current_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999998);

    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.42e-8);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000126);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.64);

    this->mVariableNames.push_back("calcium_dynamics__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9073);

    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.604);

    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(136.89);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mDerivedQuantityNames.push_back("K_F");
    this->mDerivedQuantityUnits.push_back("coulomb_per_millimole");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellTenTusscher2006EpiFromCellMLCvode)
#endif // CHASTE_CVODE
