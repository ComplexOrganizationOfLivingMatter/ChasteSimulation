//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: LR_Dynamic_model_2000
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:41:38 2016
//! 
//! <autogenerated>

#include "FaberRudy2000BackwardEuler.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFaberRudy2000FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFaberRudy2000FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFaberRudy2000FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<61; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellFaberRudy2000FromCellMLBackwardEuler_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellFaberRudy2000FromCellMLBackwardEuler_LookupTables(const CellFaberRudy2000FromCellMLBackwardEuler_LookupTables&);
    CellFaberRudy2000FromCellMLBackwardEuler_LookupTables& operator= (const CellFaberRudy2000FromCellMLBackwardEuler_LookupTables&);
    CellFaberRudy2000FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 61;
        mTableMins[0] = -100.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 99.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][61];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = 0.001 * (((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 0.001 * ((((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))))) *  -1.0) - (((1.0 - (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024)))) / ((fabs(var_chaste_interface__membrane__V + 10.0) < 1.0000000000000001e-05) ? 0.0045787545787545781 : ((0.001 * (1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) * (1.0 - exp((-(var_chaste_interface__membrane__V + 10.0)) * 0.16025641025641024))) / (0.035000000000000003 * (var_chaste_interface__membrane__V + 10.0))))) * 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = 0.001 * ((((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = 0.001 * (((((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003)))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02))) *  -1.0) - (((1.0 - ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 32.0) * 0.125))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))))) / (0.001 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__membrane__V + 10.0), 2.0))) + 0.02))) * 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = 0.001 * ((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 14.0)) * 0.092592592592592587))) / (0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.22222222222222221)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 0.001 * ( -1.0 / (0.0037000000000000002 + (0.0061000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.22222222222222221)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 0.001 * ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.17857142857142858))) / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 0.001 * (((var_chaste_interface__membrane__V <  -40.0) ? (135.0 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = 0.001 * ((((var_chaste_interface__membrane__V <  -40.0) ? (135.0 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0) *  -1.0) - (((var_chaste_interface__membrane__V <  -40.0) ? ((3560.0 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1000.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))))) * 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = 0.001 * (((var_chaste_interface__membrane__V <  -40.0) ? ((1000.0 * (-((127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 0.001 * ((((var_chaste_interface__membrane__V <  -40.0) ? ((1000.0 * (-((127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) + (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V)))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) *  -1.0) - (((var_chaste_interface__membrane__V <  -40.0) ? ((121.2 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((300.0 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))))) * 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = 0.001 * (((fabs(var_chaste_interface__membrane__V + 47.130000000000003) >= 1.0000000000000001e-05) ? ((320.0 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) : 3200.0) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = 0.001 * ((((fabs(var_chaste_interface__membrane__V + 47.130000000000003) >= 1.0000000000000001e-05) ? ((320.0 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) : 3200.0) *  -1.0) - ((80.0 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912)) * 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 0.001 * ((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V + 21.5)) * 0.13333333333333333))) / (0.001 / (((0.0013799999999999999 * (var_chaste_interface__membrane__V + 14.199999999999999)) / (1.0 - exp( -0.123 * (var_chaste_interface__membrane__V + 14.199999999999999)))) + ((0.00060999999999999997 * (var_chaste_interface__membrane__V + 38.899999999999999)) / (exp(0.14499999999999999 * (var_chaste_interface__membrane__V + 38.899999999999999)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = 0.001 * ( -1.0 / (0.001 / (((0.0013799999999999999 * (var_chaste_interface__membrane__V + 14.199999999999999)) / (1.0 - exp( -0.123 * (var_chaste_interface__membrane__V + 14.199999999999999)))) + ((0.00060999999999999997 * (var_chaste_interface__membrane__V + 38.899999999999999)) / (exp(0.14499999999999999 * (var_chaste_interface__membrane__V + 38.899999999999999)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = 0.001 * ((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V - 1.5)) * 0.059880239520958084))) / (0.001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = 0.001 * ( -1.0 / (0.001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = 0.001 * ((1.0 / (1.0 + exp((-(var_chaste_interface__membrane__V - 1.5)) * 0.059880239520958084))) / (0.0040000000000000001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = 0.001 * ( -1.0 / (0.0040000000000000001 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V + 30.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V + 30.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V + 30.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V + 30.0)) - 1.0)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = 0.001 * (((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))))) / (1.0 / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 0.001 * ( -1.0 / (1.0 / ((15.0 / (1.0 + exp((var_chaste_interface__membrane__V + 60.0) * 0.20000000000000001))) + ((100.0 * exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V + 25.0) * 0.20000000000000001))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 0.001 * ((((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))))) / (1.0 / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = 0.001 * ( -1.0 / (1.0 / (((10000.0 * exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__membrane__V - 40.0) * 0.040000000000000001))) + ((10000.0 * exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__membrane__V + 90.0)) * 0.040000000000000001))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = exp(0.01 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998) * 0.0001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) * 0.0032258064516129032;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998) * 0.00025000000000000001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 0.16722408029999999 * exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = pow(1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / (1.0 + exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = 1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = (8.0 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0))) * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = (8.0 * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) / pow(exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0, 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = 1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = (1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0)) * exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) * (1.0 / pow(exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0, 2.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = (((( -0.012449999999999999 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 0.0032258064516129032) * 11.605123887418811) - ((((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 3.8799692706433766e-07) * 96485.0) * 6.1090385761878618)) * 0.75;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][40] = pow((1.0 + (0.1245 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))))) + ((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 6.1090385761878618), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][41] = 0.00050218147139999996 * exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][42] = pow(1.0 + exp((0.044642857139999999 * var_chaste_interface__membrane__V) + 0.40178571429999999), 2.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][43] = 6666.666666666667 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][44] = (((4.0 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0))) * exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 1.0) * 3612.0012202503353;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][45] = 1666.6666666666667 * (1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][46] = pow(exp((0.037435883507802616 * var_chaste_interface__membrane__V) *  -0.84999999999999998), 2.0) * 0.00025000000000000001;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][47] = (1.0 / ((1.0 + (0.1245 * exp( -0.10000000000000001 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))))) + ((0.0052142857139999997 * exp(-(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)))) * 6.1090385761878618))) * 2.25;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][48] = 26306602163.949642 * (1.0 / (exp(2.0 * (3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][49] = (1.0 / (1.0 + exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)))) * 0.0055199999999999997;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][50] = (((1.0 / (exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0)) - 1.0)) * exp(3.8799692706433766e-07 * (var_chaste_interface__membrane__V * 96485.0))) * 0.75) * 3612.0012202503353;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][51] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][52] = exp((var_chaste_interface__membrane__V * 192970.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][53] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][54] = exp((var_chaste_interface__membrane__V * 96485.0) * 3.8799692706433766e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][55] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 9.0) * 0.044642857142857144));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][56] = 1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][57] = 0.80000000000000004 - (0.65000000000000002 / (1.0 + exp((var_chaste_interface__membrane__V + 125.0) * 0.066666666666666666)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][58] = exp(var_chaste_interface__membrane__V * 0.01);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][59] = (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5) * 3.8799692706433766e-07)) + (exp(((-var_chaste_interface__membrane__V) * 96485.0) * 3.8799692706433766e-07) * 0.031854272577799742))) * 2.25;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][60] = exp((var_chaste_interface__membrane__V *  -82012.25) * 3.8799692706433766e-07);
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellFaberRudy2000FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[61];
    
    // Lookup tables
    double (*_lookup_table_0)[61];
    
};

std::auto_ptr<CellFaberRudy2000FromCellMLBackwardEuler_LookupTables> CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::mpInstance;

    double CellFaberRudy2000FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[13];
    }
    
    CellFaberRudy2000FromCellMLBackwardEuler::CellFaberRudy2000FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<12>(
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFaberRudy2000FromCellMLBackwardEuler>::Instance();
        Init();

        this->mParameters[0] = 1.0; // (c,rapid_delayed_rectifier_potassium_current__ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (c,slow_delayed_rectifier_potassium_current__ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 0.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
    }
    
    CellFaberRudy2000FromCellMLBackwardEuler::~CellFaberRudy2000FromCellMLBackwardEuler()
    {
    }
    
    AbstractLookupTableCollection* CellFaberRudy2000FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double CellFaberRudy2000FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = rY[13];
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__ionic_concentrations__Nai = rY[23];
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = rY[24];
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[51]) - 0.61380000000000001)) / _lt_0_row[52]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (mParameters[0] * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[55] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (mParameters[1] * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[57] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (mParameters[2] * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[58] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[56] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[59] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFaberRudy2000FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[12], double rResidual[12])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        
        double var_chaste_interface__calcium_dynamics__APtrack = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__APtrack2 = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__APtrack3 = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_JSR = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__Ca_NSR = rCurrentGuess[4];
        double var_chaste_interface__calcium_dynamics__Cai = rCurrentGuess[5];
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = rCurrentGuess[6];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = rCurrentGuess[7];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = rCurrentGuess[8];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = rCurrentGuess[9];
        double var_chaste_interface__ionic_concentrations__Ki = rCurrentGuess[10];
        double var_chaste_interface__ionic_concentrations__Nai = rCurrentGuess[11];
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_membrane__Cm = 0.001; // microF
        const double var_chaste_interface__membrane__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_membrane__I_st = var_chaste_interface__membrane__I_st / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[51]) - 0.61380000000000001)) / _lt_0_row[52]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (mParameters[0] * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[55] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (mParameters[1] * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[57] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (mParameters[2] * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[58] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[56] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[59] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double var_calcium_dynamics__i_rel = ((var_chaste_interface__calcium_dynamics__Cainfluxtrack > 0.00018000000000000001) ? (((60000.0 * (var_chaste_interface__calcium_dynamics__Cainfluxtrack - 0.00018000000000000001)) / ((0.00080000000000000004 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) - 0.00018000000000000001)) * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2) * var_chaste_interface__calcium_dynamics__APtrack2) : ((var_chaste_interface__calcium_dynamics__Cainfluxtrack <= 0.00018000000000000001) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 > 0.0)) ? (4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : 0.0) * (var_chaste_interface__calcium_dynamics__Ca_JSR - var_chaste_interface__calcium_dynamics__Cai); // millimolar_per_second
        const double var_calcium_dynamics__i_up = (8.75 * var_chaste_interface__calcium_dynamics__Cai) / (var_chaste_interface__calcium_dynamics__Cai + 0.00092000000000000003); // millimolar_per_second
        const double var_calcium_dynamics__i_leak = 0.58333333333333337 * var_chaste_interface__calcium_dynamics__Ca_NSR; // millimolar_per_second
        const double var_calcium_dynamics__i_tr = (var_chaste_interface__calcium_dynamics__Ca_NSR - var_chaste_interface__calcium_dynamics__Ca_JSR) * 5.5555555555555554; // millimolar_per_second
        const double d_dt_chaste_interface__calcium_dynamics__Cai = 0.001 * ((1.0 / (1.0 + (0.00011900000000000002 / pow(0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai, 2.0)) + (3.5000000000000004e-05 / pow(0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai, 2.0)))) * ((( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - (2.0 * var_Na_Ca_exchanger__i_NaCa)) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) + ((var_calcium_dynamics__i_rel * 1.824637013204952e-13) * 38686179652.867111) + (((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 2.098332565185695e-12) * 38686179652.867111))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_JSR = 0.001 * ((1.0 / (1.0 + (8.0 / pow(0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR, 2.0)))) * (var_calcium_dynamics__i_tr - var_calcium_dynamics__i_rel)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_NSR = 0.001 * (((((-var_calcium_dynamics__i_tr) * 1.824637013204952e-13) * 476568879781.69635) - var_calcium_dynamics__i_leak) + var_calcium_dynamics__i_up); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack = 0.001 * (((( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)) > 150000.0) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__APtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__APtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999)) ? ((100000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack3)) - (500.0 * var_chaste_interface__calcium_dynamics__APtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__APtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack = 0.001 * ((var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001) ? (( -1.434e-07 * (((var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T) - var_Na_Ca_exchanger__i_NaCa) + var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_background_current__i_Ca_b)) * 200477.68903387632) : ((var_chaste_interface__calcium_dynamics__APtrack2 > 0.01) && (var_chaste_interface__calcium_dynamics__APtrack <= 0.20000000000000001)) ? 0.0 : ( -500.0 * var_chaste_interface__calcium_dynamics__Cainfluxtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack = 0.001 * ((((1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR))) > 0.69999999999999996) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__APtrack3 < 0.37)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2)) : ( -500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2)); // 'per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (50000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack3)) : ( -10.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3)); // 'per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Nai = 0.001 * (((-(var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_CaNa + var_sodium_background_current__i_Na_b + var_non_specific_calcium_activated_current__i_ns_Na + (var_Na_Ca_exchanger__i_NaCa * 3.0) + (var_sodium_potassium_pump__i_NaK * 3.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__ionic_concentrations__Ki = 0.001 * (((-(var_L_type_Ca_channel__i_CaK + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_non_specific_calcium_activated_current__i_ns_K + ((-var_sodium_potassium_pump__i_NaK) * 2.0))) * 1.434e-07) * 400955.37806775264); // 'millimole per litre per millisecond'
        
        rResidual[5] = rCurrentGuess[5] - rY[13] - mDt*d_dt_chaste_interface__calcium_dynamics__Cai;
        rResidual[3] = rCurrentGuess[3] - rY[14] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_JSR;
        rResidual[4] = rCurrentGuess[4] - rY[15] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_NSR;
        rResidual[0] = rCurrentGuess[0] - rY[16] - mDt*d_dt_chaste_interface__calcium_dynamics__APtrack;
        rResidual[1] = rCurrentGuess[1] - rY[17] - mDt*d_dt_chaste_interface__calcium_dynamics__APtrack2;
        rResidual[2] = rCurrentGuess[2] - rY[18] - mDt*d_dt_chaste_interface__calcium_dynamics__APtrack3;
        rResidual[6] = rCurrentGuess[6] - rY[19] - mDt*d_dt_chaste_interface__calcium_dynamics__Cainfluxtrack;
        rResidual[7] = rCurrentGuess[7] - rY[20] - mDt*d_dt_chaste_interface__calcium_dynamics__OVRLDtrack;
        rResidual[8] = rCurrentGuess[8] - rY[21] - mDt*d_dt_chaste_interface__calcium_dynamics__OVRLDtrack2;
        rResidual[9] = rCurrentGuess[9] - rY[22] - mDt*d_dt_chaste_interface__calcium_dynamics__OVRLDtrack3;
        rResidual[11] = rCurrentGuess[11] - rY[23] - mDt*d_dt_chaste_interface__ionic_concentrations__Nai;
        rResidual[10] = rCurrentGuess[10] - rY[24] - mDt*d_dt_chaste_interface__ionic_concentrations__Ki;
    }
    
    void CellFaberRudy2000FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[12], double rJacobian[12][12])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        
        double var_chaste_interface__calcium_dynamics__APtrack = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__APtrack2 = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__APtrack3 = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_JSR = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__Ca_NSR = rCurrentGuess[4];
        double var_chaste_interface__calcium_dynamics__Cai = rCurrentGuess[5];
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = rCurrentGuess[6];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = rCurrentGuess[7];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = rCurrentGuess[8];
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = rCurrentGuess[9];
        double var_chaste_interface__ionic_concentrations__Ki = rCurrentGuess[10];
        double var_chaste_interface__ionic_concentrations__Nai = rCurrentGuess[11];
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_environment__time = 0.001 * var_chaste_interface__environment__time; // second
        const double var_environment__dt = 0.001 * var_chaste_interface__environment__dt; // second
        const double var_membrane__Cm = 0.001; // microF
        const double var_t1 = 1.0 / var_membrane__Cm; // dimensionless
        const double var_t4 = (pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 2.0) * var_chaste_interface__transient_outward_current_zdv_gate__zdv) * mParameters[2]; // dimensionless
        const double var_t7 = _lt_0_row[23] * var_chaste_interface__transient_outward_current_ydv_gate__ydv; // dimensionless
        const double var_t10 = 1.0 / var_chaste_interface__ionic_concentrations__Ki; // dimensionless
        const double var_t14 = (log(var_t10 * 4.5) * 1.0364305332435094e-05) * 2577340.0; // dimensionless
        const double var_t15 = var_chaste_interface__membrane__V - var_t14; // dimensionless
        const double var_t17 = (var_t15 * var_t7) * var_t4; // dimensionless
        const double var_t23 = exp(((0.23849999999999999 * var_chaste_interface__membrane__V) - (0.23849999999999999 * var_t14)) - 14.1227775); // dimensionless
        const double var_t24 = 1.0 + var_t23; // dimensionless
        const double var_t25 = 1.0 / var_t24; // dimensionless
        const double var_t26 = var_t25 * 2.1213203435596424; // dimensionless
        const double var_t31 = exp(((0.080320000000000003 * var_chaste_interface__membrane__V) - (0.080320000000000003 * var_t14)) + 0.43983232); // dimensionless
        const double var_t36 = exp(((0.061749999999999999 * var_chaste_interface__membrane__V) - (0.061749999999999999 * var_t14)) - 36.698642499999998); // dimensionless
        const double var_t37 = (0.49124000000000001 * var_t31) + var_t36; // dimensionless
        const double var_t41 = exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) + (0.51429999999999998 * var_t14)) - 2.4444678999999998); // dimensionless
        const double var_t42 = 1.0 + var_t41; // dimensionless
        const double var_t43 = 1.0 / var_t42; // dimensionless
        const double var_t46 = (1020.0 * var_t25) + ((1000.0 * var_t43) * var_t37); // dimensionless
        const double var_t49 = var_t15 / pow(var_t46, 2.0); // dimensionless
        const double var_t51 = 1.0 / pow(var_t24, 2.0); // dimensionless
        const double var_t61 = (1.0 / pow(var_t42, 2.0)) * var_t37; // dimensionless
        const double var_t68 = var_t51 * 2.1213203435596424; // dimensionless
        const double var_t69 = 1.0 / var_t46; // dimensionless
        const double var_t70 = var_t15 * var_t69; // dimensionless
        const double var_t87 = pow(var_chaste_interface__ionic_concentrations__Nai, 2.0); // dimensionless
        const double var_t88 = var_t87 * var_chaste_interface__ionic_concentrations__Nai; // dimensionless
        const double var_t90 = (1.8 * var_t88) * _lt_0_row[24]; // dimensionless
        const double var_t93 = var_chaste_interface__calcium_dynamics__Cai * 2299968.0; // dimensionless
        const double var_t94 = var_t90 - var_t93; // dimensionless
        const double var_t96 = var_t90 + var_t93; // dimensionless
        const double var_t98 = 1.0 + (var_t96 * _lt_0_row[25]); // dimensionless
        const double var_t100 = 1.0 / pow(var_t98, 2.0); // dimensionless
        const double var_t101 = var_t100 * var_t94; // dimensionless
        const double var_t139 = (pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0) * var_chaste_interface__fast_sodium_current_m_gate__m) * 16.0; // dimensionless
        const double var_t140 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t141 = var_t140 * var_t139; // dimensionless
        const double var_t142 = 2.1213203435596424 * mParameters[0]; // dimensionless
        const double var_t148 = _lt_0_row[31] * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr; // dimensionless
        const double var_t149 = var_t148 * var_t142; // dimensionless
        const double var_t151 = 1.0 / var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t154 = 1.0 + (6.481821026e-07 * pow(var_t151, 1.3999999999999999)); // dimensionless
        const double var_t158 = (1.0 + (0.59999999999999998 / var_t154)) * mParameters[1]; // dimensionless
        const double var_t159 = var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // dimensionless
        const double var_t160 = var_t159 * var_t158; // dimensionless
        const double var_t162 = var_t7 * var_t4; // dimensionless
        const double var_t164 = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f; // dimensionless
        const double var_t167 = 1.0 + (1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double var_t168 = 1.0 / var_t167; // dimensionless
        const double var_t169 = 0.00054000000000000001 * var_t168; // dimensionless
        const double var_t178 = ((_lt_0_row[32] * var_chaste_interface__calcium_dynamics__Cai) * 1.0) - 0.61380000000000001; // dimensionless
        const double var_t183 = ((_lt_0_row[33] * var_t178) * 0.0032258064516129032) * 1119720.378277604; // dimensionless
        const double var_t204 = (var_chaste_interface__membrane__V * var_t169) * var_t164; // dimensionless
        const double var_t214 = 1.9299999999999999e-07 * var_t168; // dimensionless
        const double var_t219 = ((_lt_0_row[24] * var_chaste_interface__ionic_concentrations__Ki) * 0.75) - 3.375; // dimensionless
        const double var_t223 = (_lt_0_row[36] * var_t219) * 0.0032258064516129032; // dimensionless
        const double var_t224 = var_t223 * 1119720.378277604; // dimensionless
        const double var_t235 = (var_chaste_interface__membrane__V * var_t214) * var_t164; // dimensionless
        const double var_t242 = 6.75e-07 * var_t168; // dimensionless
        const double var_t247 = ((_lt_0_row[24] * var_chaste_interface__ionic_concentrations__Nai) * 0.75) - 99.0; // dimensionless
        const double var_t249 = (_lt_0_row[36] * var_t247) * 0.0032258064516129032; // dimensionless
        const double var_t250 = var_t249 * 1119720.378277604; // dimensionless
        const double var_t268 = 1.0 + ((1.0 / var_t87) * 100.0); // dimensionless
        const double var_t269 = 1.0 / var_t268; // dimensionless
        const double var_t291 = pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2.0); // dimensionless
        const double var_t292 = var_t291 * 0.050000000000000003; // dimensionless
        const double var_t293 = var_chaste_interface__T_type_Ca_channel_g_gate__g * var_t292; // dimensionless
        const double var_t303 = (var_chaste_interface__membrane__V * var_t242) * var_t164; // dimensionless
        const double var_t311 = 1.0 / var_t98; // dimensionless
        const double var_t312 = var_t311 * var_t94; // dimensionless
        const double var_t319 = var_t69 * var_t26; // dimensionless
        const double var_t328 = 1.0 / var_chaste_interface__ionic_concentrations__Nai; // dimensionless
        const double var_t333 = var_chaste_interface__membrane__V - ((log(var_t328 * 132.0) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t370 = var_chaste_interface__membrane__V - (((0.5 * log(var_t151 * 1.8)) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t387 = 1.0 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai)); // dimensionless
        const double var_t392 = var_chaste_interface__membrane__V - ((log(var_t387 * 6.9195599999999997) * 1.0364305332435094e-05) * 2577340.0); // dimensionless
        const double var_t409 = 1.0 / pow(var_t167, 2.0); // dimensionless
        const double var_t418 = (((((_lt_0_row[43] * var_t178) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 0.00054000000000000001) * var_t409) * var_t164; // dimensionless
        const double var_t423 = _lt_0_row[44] * var_t204; // dimensionless
        const double var_t430 = (((((_lt_0_row[45] * var_t219) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 1.9299999999999999e-07) * var_t409) * var_t164; // dimensionless
        const double var_t437 = (((((_lt_0_row[45] * var_t247) * 3612.0012202503353) * var_chaste_interface__membrane__V) * 6.75e-07) * var_t409) * var_t164; // dimensionless
        const double var_t441 = (((0.5 * var_t151) * 1.0364305332435094e-05) * 2577340.0) * var_t293; // dimensionless
        const double var_t453 = (((((2.3575679440000001e-07 * (var_t392 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2)) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1) / pow(var_chaste_interface__calcium_dynamics__Cai, 2.0)) * pow(var_t151, 0.40000000000000002)) / pow(var_t154, 2.0)) * mParameters[1]; // dimensionless
        const double var_t455 = (var_t311 * 2299968.0) * _lt_0_row[28]; // dimensionless
        const double var_t461 = ((229.99680000000001 * var_t100) * var_t94) * _lt_0_row[46]; // dimensionless
        const double var_t462 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t463 = 1.0 / var_t462; // dimensionless
        const double var_t464 = var_t463 * 1.1499999999999999; // dimensionless
        const double var_t465 = var_chaste_interface__calcium_dynamics__Cai * 1.1499999999999999; // dimensionless
        const double var_t468 = (1.0 / pow(var_t462, 2.0)) * var_t465; // dimensionless
        const double var_t473 = (((0.5 * var_t151) * 0.003212934653054879) * 0.003016) * 8314.0; // dimensionless
        const double var_t483 = var_t387 * 1.0364305332435094e-05; // dimensionless
        const double var_t489 = 1.8 * var_t87; // dimensionless
        const double var_t491 = ((var_t311 * var_t489) * _lt_0_row[24]) * _lt_0_row[28]; // dimensionless
        const double var_t496 = (((var_t489 * _lt_0_row[24]) * 0.0001) * var_t101) * _lt_0_row[46]; // dimensionless
        const double var_t509 = ((((1.0 / var_t88) * 100.0) * 0.75) / pow(var_t268, 2.0)) * _lt_0_row[47]; // dimensionless
        const double var_t517 = var_t10 * 1.0364305332435094e-05; // dimensionless
        const double var_t518 = var_t517 * 2577340.0; // dimensionless
        const double var_t529 = var_t23 * var_t517; // dimensionless
        const double var_t1084 = 0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1085 = pow(var_t1084, 2.0); // dimensionless
        const double var_t1089 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1090 = pow(var_t1089, 2.0); // dimensionless
        const double var_t1093 = (1.0 + ((1.0 / var_t1085) * 0.00011900000000000002)) + ((1.0 / var_t1090) * 3.5000000000000004e-05); // dimensionless
        const double var_t1094 = 1.0 / var_t1093; // dimensionless
        const double var_t1138 = (4.0 * var_t183) * var_t204; // dimensionless
        const double var_t1140 = (var_t370 * var_chaste_interface__T_type_Ca_channel_g_gate__g) * var_t292; // dimensionless
        const double var_t1141 = var_t312 * _lt_0_row[28]; // dimensionless
        const double var_t1143 = var_t463 * var_t465; // dimensionless
        const double var_t1144 = var_t370 * 0.003016; // dimensionless
        const double var_t1150 = 0.00018000000000000001 < var_chaste_interface__calcium_dynamics__Cainfluxtrack; // dimensionless
        const double var_t1152 = 60000.0 * (var_chaste_interface__calcium_dynamics__Cainfluxtrack - 0.00018000000000000001); // dimensionless
        const double var_t1153 = (0.00080000000000000004 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) - 0.00018000000000000001; // dimensionless
        const double var_t1154 = 1.0 / var_t1153; // dimensionless
        const double var_t1155 = 1.0 - var_chaste_interface__calcium_dynamics__APtrack2; // dimensionless
        const double var_t1156 = var_t1155 * var_t1154; // dimensionless
        const double var_t1161 = (var_chaste_interface__calcium_dynamics__Cainfluxtrack <= 0.00018000000000000001) && (0.0 < var_chaste_interface__calcium_dynamics__OVRLDtrack2); // dimensionless
        const double var_t1163 = 4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2); // dimensionless
        const double var_t1165 = var_t1150 ? ((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1156) * var_t1152) : var_t1161 ? (var_chaste_interface__calcium_dynamics__OVRLDtrack2 * var_t1163) : 0.0; // dimensionless
        const double var_t1166 = var_chaste_interface__calcium_dynamics__Ca_JSR - var_chaste_interface__calcium_dynamics__Cai; // dimensionless
        const double var_t1167 = var_t1166 * var_t1165; // dimensionless
        const double var_t1173 = var_chaste_interface__calcium_dynamics__Cai * 8.75; // dimensionless
        const double var_t1174 = var_chaste_interface__calcium_dynamics__Cai + 0.00092000000000000003; // dimensionless
        const double var_t1175 = 1.0 / var_t1174; // dimensionless
        const double var_t1196 = var_t1175 * 8.75; // dimensionless
        const double var_t1200 = (1.0 / pow(var_t1174, 2.0)) * var_t1173; // dimensionless
        const double var_t1214 = var_t1150 ? ((((-var_chaste_interface__calcium_dynamics__APtrack2) * var_t1154) * var_t1152) + (var_t1156 * var_t1152)) : var_t1161 ? 0.0 : 0.0; // dimensionless
        const double var_t1227 = var_t1150 ? ((((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1155) * var_t1154) * 60000.0) - (((var_chaste_interface__calcium_dynamics__APtrack2 * var_t1155) / pow(var_t1153, 2.0)) * var_t1152)) : var_t1161 ? 0.0 : 0.0; // dimensionless
        const double var_t1233 = var_t1150 ? 0.0 : var_t1161 ? (( -4000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2) + var_t1163) : 0.0; // dimensionless
        const double var_t1237 = (-var_t491) + var_t496; // dimensionless
        const double var_t1242 = 0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR; // dimensionless
        const double var_t1243 = pow(var_t1242, 2.0); // dimensionless
        const double var_t1246 = 1.0 + ((1.0 / var_t1243) * 8.0); // dimensionless
        const double var_t1247 = 1.0 / var_t1246; // dimensionless
        const double var_t1308 = 150000.0 < ((-((((((((((((((((((var_t333 * var_t140) * var_t139) + var_t1138) + (var_t224 * var_t235)) + (var_t250 * var_t303)) + var_t1140) + (((0.01124886496 * var_t15) * var_t148) * var_t142)) + (((0.433 * var_t392) * var_t159) * var_t158)) + (((0.000193 * var_t15) * 7.1435503525383955e-09) * 20000.0)) + (0.5 * var_t17)) + ((329.20358440000001 * var_t70) * var_t26)) + (var_t15 * _lt_0_row[49])) + var_t1141) + var_t1143) + (var_t333 * 0.0040000000000000001)) + var_t1144) + ((0.75 * var_t269) * _lt_0_row[47])) + (((0.10000000000000001 <= var_environment__time) && (var_environment__time <= 100000.0) && (((var_environment__time - 0.10000000000000001) - (1.0 * floor((var_environment__time - 0.10000000000000001) * 1.0))) <= 0.002)) ?  -25.5 : 0.0))) * var_t1); // dimensionless
        const double var_t1309 = var_t1308 ? 0.0 : 0.0; // dimensionless
        const double var_t1316 = (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001) && (0.17999999999999999 < var_chaste_interface__calcium_dynamics__APtrack); // dimensionless
        const double var_t1319 = 0.20000000000000001 < var_chaste_interface__calcium_dynamics__APtrack; // dimensionless
        const double var_t1327 = (0.01 < var_chaste_interface__calcium_dynamics__APtrack2) && (var_chaste_interface__calcium_dynamics__APtrack <= 0.20000000000000001); // dimensionless
        const double var_t1357 = var_t1319 ? 0.0 : var_t1327 ? 0.0 : 0.0; // dimensionless
        const double var_t1372 = (0.69999999999999996 < (1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR)))) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__APtrack3 < 0.37); // dimensionless
        const double var_t1373 = var_t1372 ? 0.0 : 0.0; // dimensionless
        const double var_t1375 = 0.97999999999999998 < var_chaste_interface__calcium_dynamics__OVRLDtrack; // dimensionless
        const double var_t1377 = var_t1375 && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998); // dimensionless
        const double var_t1381 = var_t1375 && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998); // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_environment__dt * (var_t1308 ?  -100500.0 :  -500.0));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = 0.0;
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = -(var_environment__dt * var_t1309);
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = -(var_environment__dt * var_t1309);
        rJacobian[0][11] = -(var_environment__dt * var_t1309);
        rJacobian[1][0] = -(var_environment__dt * 0.0);
        rJacobian[1][1] = 1.0 - (var_environment__dt * (var_t1316 ?  -100500.0 :  -500.0));
        rJacobian[1][2] = 0.0;
        rJacobian[1][3] = 0.0;
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = 0.0;
        rJacobian[1][9] = 0.0;
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[2][0] = -(var_environment__dt * 0.0);
        rJacobian[2][1] = 0.0;
        rJacobian[2][2] = 1.0 - (var_environment__dt * (var_t1316 ?  -100500.0 :  -10.0));
        rJacobian[2][3] = 0.0;
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = -(var_environment__dt * (((-var_t1166) * var_t1214) * var_t1247));
        rJacobian[3][2] = 0.0;
        rJacobian[3][3] = 1.0 - (var_environment__dt * ((((((2.0 / var_t1243) / var_t1242) * 8.0) * ((5.5555555555555554 * (var_chaste_interface__calcium_dynamics__Ca_NSR - var_chaste_interface__calcium_dynamics__Ca_JSR)) - var_t1167)) / pow(var_t1246, 2.0)) + (( -5.5555555555555554 - var_t1165) * var_t1247)));
        rJacobian[3][4] = -(var_environment__dt * (5.5555555555555554 * var_t1247));
        rJacobian[3][5] = -(var_environment__dt * (var_t1165 * var_t1247));
        rJacobian[3][6] = -(var_environment__dt * (((-var_t1166) * var_t1227) * var_t1247));
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = -(var_environment__dt * (((-var_t1166) * var_t1233) * var_t1247));
        rJacobian[3][9] = 0.0;
        rJacobian[3][10] = 0.0;
        rJacobian[3][11] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = -(var_environment__dt * 0.48309178744444442);
        rJacobian[4][4] = 1.0 - (var_environment__dt *  -1.0664251207777777);
        rJacobian[4][5] = -(var_environment__dt * (var_t1196 - var_t1200));
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = -(var_environment__dt * (((0.0070588235289999997 * var_t1166) * var_t1214) * var_t1094));
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = -(var_environment__dt * ((0.0070588235289999997 * var_t1165) * var_t1094));
        rJacobian[5][4] = -(var_environment__dt * (0.047352941177499996 * var_t1094));
        rJacobian[5][5] = 1.0 - (var_environment__dt * (((( -2.0 * (((( -1.0 / var_t1085) / var_t1084) * 0.00011900000000000002) - (((1.0 / var_t1090) / var_t1089) * 3.5000000000000004e-05))) * ((((( -200477.68899378082 * ((((var_t1138 + var_t1140) - (2.0 * var_t1141)) + var_t1143) + var_t1144)) * 1.434e-07) + (0.0070588235289999997 * var_t1167)) + ((0.081176470589999994 * var_chaste_interface__calcium_dynamics__Ca_NSR) * 0.58333333333333337)) - ((0.081176470589999994 * var_t1175) * var_t1173))) / pow(var_t1093, 2.0)) + (((((( -200477.68899378082 * ((((((((-var_t418) + var_t423) + var_t441) + (2.0 * var_t455)) + (2.0 * var_t461)) + var_t464) - var_t468) + var_t473)) * 1.434e-07) - (0.0070588235289999997 * var_t1165)) - (0.081176470589999994 * var_t1196)) + (0.081176470589999994 * var_t1200)) * var_t1094)));
        rJacobian[5][6] = -(var_environment__dt * (((0.0070588235289999997 * var_t1166) * var_t1227) * var_t1094));
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = -(var_environment__dt * (((0.0070588235289999997 * var_t1166) * var_t1233) * var_t1094));
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = -(var_environment__dt * (( -1202866.133962685 * var_t1237) * (1.434e-07 * var_t1094)));
        rJacobian[6][0] = -(var_environment__dt * var_t1357);
        rJacobian[6][1] = -(var_environment__dt * var_t1357);
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = -(var_environment__dt * (var_t1319 ? (( -200477.68899378082 * ((((((((-var_t418) + var_t423) + var_t441) + var_t455) + var_t461) + var_t464) - var_t468) + var_t473)) * 1.434e-07) : var_t1327 ? 0.0 : 0.0));
        rJacobian[6][6] = 1.0 - (var_environment__dt * (var_t1319 ? 0.0 : var_t1327 ? 0.0 :  -500.0));
        rJacobian[6][7] = 0.0;
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = -(var_environment__dt * (var_t1319 ? (( -601433.06684501772 * var_t1237) * 1.434e-07) : var_t1327 ? 0.0 : 0.0));
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = -(var_environment__dt * var_t1373);
        rJacobian[7][3] = -(var_environment__dt * var_t1373);
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = 0.0;
        rJacobian[7][7] = 1.0 - (var_environment__dt * (var_t1372 ?  -50000.0 :  -500.0));
        rJacobian[7][8] = 0.0;
        rJacobian[7][9] = -(var_environment__dt * var_t1373);
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = 0.0;
        rJacobian[8][7] = -(var_environment__dt * (var_t1377 ? 0.0 : 0.0));
        rJacobian[8][8] = 1.0 - (var_environment__dt * (var_t1377 ?  -50000.0 :  -500.0));
        rJacobian[8][9] = 0.0;
        rJacobian[8][10] = 0.0;
        rJacobian[8][11] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = 0.0;
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = 0.0;
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = 0.0;
        rJacobian[9][7] = -(var_environment__dt * (var_t1381 ? 0.0 : 0.0));
        rJacobian[9][8] = 0.0;
        rJacobian[9][9] = 1.0 - (var_environment__dt * (var_t1381 ?  -50000.0 :  -10.0));
        rJacobian[9][10] = 0.0;
        rJacobian[9][11] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = -(var_environment__dt * (0.057497001203416338 * (var_t430 - var_t453)));
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = 0.0;
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (var_environment__dt * ( -0.057497001203416338 * (((((((((_lt_0_row[50] * var_t235) + ((0.01124886496 * var_t518) * var_t149)) + (((0.433 * var_t483) * 2577340.0) * var_t160)) + ((0.000193 * var_t518) * 0.00014287100705076791)) + ((0.5 * var_t518) * var_t162)) - ((((78.515054879999994 * var_t529) * 2577340.0) * var_t70) * var_t68)) - (((329.20358440000001 * (((((( -243.27000000000001 * var_t529) * 310.0) * 8314.0) * var_t51) + ((1000.0 * var_t43) * ((((0.039456396800000001 * var_t31) * var_t517) * 2577340.0) + (((0.061749999999999999 * var_t36) * var_t517) * 2577340.0)))) + (((((514.29999999999995 * var_t41) * var_t10) * 0.003212934653054879) * 8314.0) * var_t61))) * var_t49) * var_t26)) + ((329.20358440000001 * var_t518) * var_t319)) + (((var_t10 * 0.003212934653054879) * 8314.0) * _lt_0_row[49]))));
        rJacobian[10][11] = -(var_environment__dt * (0.057497001203416338 * ((-(((0.0079368900000000003 * var_t483) * 2577340.0) * var_t160)) + (4.0 * var_t509))));
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = 0.0;
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = -(var_environment__dt * (0.057497001203416338 * ((var_t437 + (3.0 * var_t455)) + (3.0 * var_t461))));
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = 0.0;
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (var_environment__dt * (0.057497001203416338 * ((((((-(((var_t328 * 1.0364305332435094e-05) * 2577340.0) * var_t141)) - (_lt_0_row[50] * var_t303)) - (((var_t328 * 0.003212934653054879) * 0.0040000000000000001) * 8314.0)) - (9.0 * var_t491)) + (9.0 * var_t496)) - (6.0 * var_t509))));
    }
    
    void CellFaberRudy2000FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Cai = rY[13];
        // Units: millimolar; Initial value: 6e-5
        double var_chaste_interface__ionic_concentrations__Nai = rY[23];
        // Units: millimolar; Initial value: 9
        double var_chaste_interface__ionic_concentrations__Ki = rY[24];
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_membrane__Cm = 0.001; // microF
        const double var_chaste_interface__membrane__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_membrane__I_st = var_chaste_interface__membrane__I_st / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1.0 / (1.0 + (var_chaste_interface__calcium_dynamics__Cai * 1666.6666666666667)); // dimensionless
        const double var_L_type_Ca_channel__i_CaCa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 20108207.285999998) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[51]) - 0.61380000000000001)) / _lt_0_row[52]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 6283.8147768749996) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_L_type_Ca_channel_f_Ca_gate__f_Ca * ((((var_chaste_interface__membrane__V * 1796.7055584249999) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]); // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (mParameters[0] * 0.023862446088641735) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr * _lt_0_row[55] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (mParameters[1] * 0.433 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))))) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 * (var_chaste_interface__membrane__V - (26.712338705498265 * log(6.9195599999999997 / (var_chaste_interface__ionic_concentrations__Ki + (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai))))); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.0 * (0.84999999999999998 / (1.0 + pow(66.0 / var_chaste_interface__ionic_concentrations__Nai, 2.7999999999999998))) * _lt_0_row[57] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-08 * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_transient_outward_current__i_to = (mParameters[2] * 0.5) * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3.0) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[58] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (0.00025000000000000001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) - (2299968.0 * var_chaste_interface__calcium_dynamics__Cai))) / (1.0 + (0.0001 * _lt_0_row[60] * ((_lt_0_row[53] * pow(var_chaste_interface__ionic_concentrations__Nai, 3.0) * 1.8) + (2299968.0 * var_chaste_interface__calcium_dynamics__Cai)))); // microA_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1020.0 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 59.215000000000003))); // per_second
        const double var_time_independent_potassium_current__i_K1 = 0.68465319688145754 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + ((1000.0 * ((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[56] * (var_chaste_interface__membrane__V - var_time_independent_potassium_current__E_K); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai) / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * (var_chaste_interface__membrane__V - var_fast_sodium_current__E_Na); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * (var_chaste_interface__membrane__V - var_calcium_background_current__E_Ca); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = ((_lt_0_row[59] / (1.0 + pow(10.0 / var_chaste_interface__ionic_concentrations__Nai, 2.0))) * 4.5) * 0.16666666666666666; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[53]) - 99.0)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = (((((var_chaste_interface__membrane__V * 0.0) * 3.8799692706433766e-07) * ((0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[53]) - 3.375)) / _lt_0_row[54]) * 1.0) / (1.0 + pow(0.0011999999999999999 / var_chaste_interface__calcium_dynamics__Cai, 3.0)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_Na + var_non_specific_calcium_activated_current__i_ns_K; // microA_per_microF
        const double d_dt_chaste_interface__membrane__V = 0.001 * (( -1.0 / var_membrane__Cm) * (var_fast_sodium_current__i_Na + var_L_type_Ca_channel__i_Ca_L + var_T_type_Ca_channel__i_Ca_T + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_ATP_sensitive_potassium_current__i_K_ATP + var_transient_outward_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + var_sodium_potassium_pump__i_NaK + var_non_specific_calcium_activated_current__i_ns_Ca + var_membrane__I_st)); // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__membrane__V;
    }
    
    void CellFaberRudy2000FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 3.210618e-6
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = rY[6];
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = rY[7];
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = rY[8];
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = rY[9];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = rY[10];
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = rY[11];
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = rY[12];
        // Units: dimensionless; Initial value: 0.5
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        
        rY[4] = (var_chaste_interface__L_type_Ca_channel_d_gate__d + (_lt_0_row[0] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[1] * var_chaste_interface__environment__dt));
        rY[5] = (var_chaste_interface__L_type_Ca_channel_f_gate__f + (_lt_0_row[2] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[3] * var_chaste_interface__environment__dt));
        rY[6] = (var_chaste_interface__T_type_Ca_channel_b_gate__b + (_lt_0_row[4] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[5] * var_chaste_interface__environment__dt));
        rY[7] = (var_chaste_interface__T_type_Ca_channel_g_gate__g + (_lt_0_row[6] * var_chaste_interface__environment__dt)) / (1.0 - ((0.001 * ( -1.0 / ((var_chaste_interface__membrane__V <= 0.0) ? (( -0.00087500000000000002 * var_chaste_interface__membrane__V) + 0.012) : 0.012))) * var_chaste_interface__environment__dt));
        rY[2] = (var_chaste_interface__fast_sodium_current_h_gate__h + (_lt_0_row[7] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[8] * var_chaste_interface__environment__dt));
        rY[3] = (var_chaste_interface__fast_sodium_current_j_gate__j + (_lt_0_row[9] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[10] * var_chaste_interface__environment__dt));
        rY[1] = (var_chaste_interface__fast_sodium_current_m_gate__m + (_lt_0_row[11] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[12] * var_chaste_interface__environment__dt));
        rY[8] = (var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr + (_lt_0_row[13] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[14] * var_chaste_interface__environment__dt));
        rY[9] = (var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 + (_lt_0_row[15] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[16] * var_chaste_interface__environment__dt));
        rY[10] = (var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 + (_lt_0_row[17] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[18] * var_chaste_interface__environment__dt));
        rY[12] = (var_chaste_interface__transient_outward_current_ydv_gate__ydv + (_lt_0_row[19] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[20] * var_chaste_interface__environment__dt));
        rY[11] = (var_chaste_interface__transient_outward_current_zdv_gate__zdv + (_lt_0_row[21] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[22] * var_chaste_interface__environment__dt));
        
        double _guess[12] = {rY[16],rY[17],rY[18],rY[14],rY[15],rY[13],rY[19],rY[20],rY[21],rY[22],rY[24],rY[23]};
        CardiacNewtonSolver<12,CellFaberRudy2000FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<12,CellFaberRudy2000FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[16] = _guess[0];
        rY[17] = _guess[1];
        rY[18] = _guess[2];
        rY[14] = _guess[3];
        rY[15] = _guess[4];
        rY[13] = _guess[5];
        rY[19] = _guess[6];
        rY[20] = _guess[7];
        rY[21] = _guess[8];
        rY[22] = _guess[9];
        rY[24] = _guess[10];
        rY[23] = _guess[11];
    }
    
template<>
void OdeSystemInformation<CellFaberRudy2000FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "LR_Dynamic_model_2000";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0008);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993771);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995727);

    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.210618e-6);

    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999837);

    this->mVariableNames.push_back("T_type_Ca_channel_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000970231);

    this->mVariableNames.push_back("T_type_Ca_channel_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994305);

    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000124042);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    this->mVariableNames.push_back("transient_outward_current_zdv_gate__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("transient_outward_current_ydv_gate__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6e-5);

    this->mVariableNames.push_back("calcium_dynamics__Ca_JSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    this->mVariableNames.push_back("calcium_dynamics__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__Cainfluxtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mVariableNames.push_back("ionic_concentrations__Nai");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9);

    this->mVariableNames.push_back("ionic_concentrations__Ki");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.2);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFaberRudy2000FromCellMLBackwardEuler)
