#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fox_model_2002
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:13:40 2016
//! 
//! <autogenerated>

#include "FoxModel2002Cvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> CellFoxModel2002FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 50.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellFoxModel2002FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 11);
    }
    
    CellFoxModel2002FromCellMLCvode::CellFoxModel2002FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                13,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFoxModel2002FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellFoxModel2002FromCellMLCvode::~CellFoxModel2002FromCellMLCvode()
    {
    }
    
    double CellFoxModel2002FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        
        const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761)) - 682.0)) / (exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761) - 1.0); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * ((149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761)) - 4.0)) / (exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761) - 1.0); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = (1.0 / (1.0 + (2.5 * exp(0.10000000000000001 * (var_chaste_interface__membrane__V + 28.0))))) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
        const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1 = (((1.0 / (2.0 + exp(0.060655559607967903 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 11.199999999999999) * 0.058823529411764705) * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0022160000000000001 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (1500.0 / ((1.0 + (0.20000000000000001 * exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761))) * 11147219297.5)) * ((exp((var_chaste_interface__membrane__V * 33.774999999999999) * 0.00038799692706433761) * 2000000.0) - (exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761) * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = (((0.69299999999999995 * (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9.6500000000000004) * 0.00038799692706433761)) + (exp(((-var_chaste_interface__membrane__V) * 96.5) * 0.00038799692706433761) * 0.035310840049036757)))) * 0.5) * 4.0) * 0.18181818181818182; // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sodium_potassium_pump__i_NaK + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFoxModel2002FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761)) - 682.0)) / (exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761) - 1.0); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (1500.0 / ((1.0 + (0.20000000000000001 * exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761))) * 11147219297.5)) * ((exp((var_chaste_interface__membrane__V * 33.774999999999999) * 0.00038799692706433761) * 2000000.0) - (exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761) * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_fast_sodium_current_m_gate__E0_m = var_chaste_interface__membrane__V + 47.130000000000003; // millivolt
        const double var_L_type_Ca_current_d_gate__E0_m = var_chaste_interface__membrane__V + 40.0; // millivolt
        const double var_calcium_dynamics__J_rel = (6.0 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * (((1.0 / (1.0 + pow(2000.0 / var_chaste_interface__calcium_dynamics__Ca_SR, 3.0))) * var_chaste_interface__calcium_dynamics__Ca_SR) - var_chaste_interface__calcium_dynamics__Ca_i)) / (1.0 + (1.6499999999999999 * exp(var_chaste_interface__membrane__V * 0.050000000000000003))); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_leak = 9.9999999999999995e-07 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = 0.10000000000000001 / (1.0 + pow(0.32000000000000001 / var_chaste_interface__calcium_dynamics__Ca_i, 2.0)); // micromolar_per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (((0.32000000000000001 * var_fast_sodium_current_m_gate__E0_m) / (1.0 - exp( -0.10000000000000001 * var_fast_sodium_current_m_gate__E0_m))) * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - ((0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912)) * var_chaste_interface__fast_sodium_current_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = ((0.13500000000000001 * exp((var_chaste_interface__membrane__V + 80.0) *  -0.14705882352941177)) * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - ((7.5 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 11.0)))) * var_chaste_interface__fast_sodium_current_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (((0.17499999999999999 * exp((var_chaste_interface__membrane__V + 100.0) *  -0.043478260869565216)) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 79.0)))) * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - ((0.29999999999999999 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)))) * var_chaste_interface__fast_sodium_current_j_gate__j); // per_millisecond
        const double d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = ((1.0 / (1.0 + exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V)))) - var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) / (43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V))))); // per_millisecond
        const double d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 16.0) *  -0.073529411764705885))) - var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) / (1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V - 10.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V - 10.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V - 10.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V - 10.0)) - 1.0)))); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = ((0.045159999999999999 * exp(0.035770000000000003 * var_chaste_interface__membrane__V)) * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to)) - ((0.098900000000000002 * exp( -0.062370000000000002 * var_chaste_interface__membrane__V)) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = (((0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)))) * (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) - (((0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)))) * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_gate__f = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 12.5) * 0.20000000000000001))) - var_chaste_interface__L_type_Ca_current_f_gate__f) / (30.0 + (200.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.10526315789473684)))); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_d_gate__d = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 10.0) *  -0.16025641025641024))) - var_chaste_interface__L_type_Ca_current_d_gate__d) / (1.0 / (((0.25 * exp( -0.01 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V))) + ((0.070000000000000007 * exp( -0.050000000000000003 * var_L_type_Ca_current_d_gate__E0_m)) / (1.0 + exp(0.050000000000000003 * var_L_type_Ca_current_d_gate__E0_m))))); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = ((1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 5.5555555555555554, 3.0))) - var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * 0.033333333333333333; // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (20.0 / pow(2.0 + var_chaste_interface__calcium_dynamics__Ca_i, 2.0)))) * (((var_calcium_dynamics__J_rel + var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_up) - (0.03075923579139864 * ((var_L_type_Ca_current__i_Ca + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) - (2.0 * var_Na_Ca_exchanger__i_NaCa)))); // 'micromole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = ((1.0 / (1.0 + (6000000.0 / pow(600.0 + var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)))) * ((var_calcium_dynamics__J_up - var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_rel) * 2.584e-05) * 500000.0; // 'micromole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
            const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * ((149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761)) - 4.0)) / (exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761) - 1.0); // microA_per_microF
            const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = (1.0 / (1.0 + (2.5 * exp(0.10000000000000001 * (var_chaste_interface__membrane__V + 28.0))))) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
            const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
            const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
            const double var_time_independent_potassium_current__i_K1 = (((1.0 / (2.0 + exp(0.060655559607967903 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 11.199999999999999) * 0.058823529411764705) * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
            const double var_plateau_potassium_current__i_Kp = 0.0022160000000000001 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
            const double var_sodium_potassium_pump__i_NaK = (((0.69299999999999995 * (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9.6500000000000004) * 0.00038799692706433761)) + (exp(((-var_chaste_interface__membrane__V) * 96.5) * 0.00038799692706433761) * 0.035310840049036757)))) * 0.5) * 4.0) * 0.18181818181818182; // microA_per_microF
            const double var_sodium_background_current__i_Na_b = 0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = -(var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_Na_Ca_exchanger__i_NaCa + var_sodium_potassium_pump__i_NaK + var_sarcolemmal_calcium_pump__i_p_Ca + var_sodium_background_current__i_Na_b + var_calcium_background_current__i_Ca_b + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
        NV_Ith_S(rDY, 8) = d_dt_chaste_interface__L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY, 9) = d_dt_chaste_interface__L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY, 10) = d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        NV_Ith_S(rDY, 11) = d_dt_chaste_interface__calcium_dynamics__Ca_i;
        NV_Ith_S(rDY, 12) = d_dt_chaste_interface__calcium_dynamics__Ca_SR;
    }
    
    void CellFoxModel2002FromCellMLCvode::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 11);
        // Units: micromolar; Initial value: 0.0472
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_t1 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t3 = (12.800000000000001 * var_t1) * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t4 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t16 = (var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433767; // dimensionless
        const double var_t18 = exp(2.0 * var_t16); // dimensionless
        const double var_t19 = var_chaste_interface__calcium_dynamics__Ca_i * var_t18; // dimensionless
        const double var_t21 = var_t19 - 682.0; // dimensionless
        const double var_t22 = var_t18 - 1.0; // dimensionless
        const double var_t23 = 1.0 / var_t22; // dimensionless
        const double var_t24 = var_t21 * var_t23; // dimensionless
        const double var_t25 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t26 = var_t25 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t29 = (0.00018210146895636584 * var_t24) * var_t26; // dimensionless
        const double var_t38 = (((1.26e-05 * var_chaste_interface__membrane__V) * 898632.125) * 0.014467049241032556) * 1.040582726326743e-05; // dimensionless
        const double var_t42 = (((8.0 * var_t38) * var_t19) * var_t23) * var_t26; // dimensionless
        const double var_t44 = 1.0 / pow(var_t22, 2.0); // dimensionless
        const double var_t47 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t51 = (((((8.0 * var_t38) * var_t21) * var_t44) * var_chaste_interface__L_type_Ca_current_f_gate__f) * var_t47) * var_t18; // dimensionless
        const double var_t53 = 5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t54 = var_chaste_interface__membrane__V * 9312.25; // dimensionless
        const double var_t61 = 1.0 + ((((5.0399999999999999e-05 * var_t54) * 0.00038799692706433767) * var_t24) *  -3.773584905660377); // dimensionless
        const double var_t63 = 1.0 / pow(var_t61, 2.0); // dimensionless
        const double var_t66 = var_t54 * 0.12027904738994467; // dimensionless
        const double var_t67 = exp(var_t16); // dimensionless
        const double var_t69 = (149.40000000000001 * var_t67) - 4.0; // dimensionless
        const double var_t70 = 0.0032258064516129032 * var_t69; // dimensionless
        const double var_t71 = var_t67 - 1.0; // dimensionless
        const double var_t72 = 1.0 / var_t71; // dimensionless
        const double var_t74 = 0.0032258064516129032 * var_t21; // dimensionless
        const double var_t75 = var_t23 *  -3.773584905660377; // dimensionless
        const double var_t80 = (var_chaste_interface__membrane__V * 898632.125) * 0.014467049241032556; // dimensionless
        const double var_t81 = 1.26e-05 * var_t80; // dimensionless
        const double var_t101 = 1.0 / var_t61; // dimensionless
        const double var_t104 = var_t70 * var_t72; // dimensionless
        const double var_t108 = var_t47 * var_t101; // dimensionless
        const double var_t109 = var_t53 * var_t108; // dimensionless
        const double var_t124 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t126 = exp(var_t124 + 2.7999999999999998); // dimensionless
        const double var_t128 = 1.0 + (2.5 * var_t126); // dimensionless
        const double var_t141 = var_chaste_interface__membrane__V -  -96.692526697705418; // dimensionless
        const double var_t142 = 2.0 * var_t141; // dimensionless
        const double var_t147 = 0.013599999999999999 / var_t128; // dimensionless
        const double var_t154 = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to; // dimensionless
        const double var_t160 = exp(0.06065555960796791 * var_t141); // dimensionless
        const double var_t161 = 2.0 + var_t160; // dimensionless
        const double var_t179 = exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t180 = 1.0 + var_t179; // dimensionless
        const double var_t202 = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037441703461708581); // dimensionless
        const double var_t204 = 1.0 + (0.20000000000000001 * var_t202); // dimensionless
        const double var_t210 = exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037441703461708581); // dimensionless
        const double var_t217 = ((var_t210 * 1000.0) * 2000.0) - ((var_t202 * 2628072.0) * var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t224 = ((((((1.3456270662374128e-07 / pow(var_t204, 2.0)) * var_t217) * 0.20000000000000001) *  -0.65000000000000002) * 96.5) * 0.00038799692706433767) * var_t202; // dimensionless
        const double var_t225 = 1.0 / var_t204; // dimensionless
        const double var_t226 = 0.00029585798816568048 * var_t225; // dimensionless
        const double var_t241 = (0.00045482194838824554 * var_t226) * ((((0.013104596211598004 * var_t210) * 1000.0) * 2000.0) - ((( -0.024337107250110582 * var_t202) * 2628072.0) * var_chaste_interface__calcium_dynamics__Ca_i)); // dimensionless
        const double var_t243 = exp( -0.10000000000000001 * var_t16); // dimensionless
        const double var_t248 = exp(-var_t16); // dimensionless
        const double var_t281 = var_chaste_interface__membrane__V - 70.100138334982347; // dimensionless
        const double var_t307 = 1.26e-05 * var_t66; // dimensionless
        const double var_t309 = (var_t23 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t314 = var_t66 * var_t104; // dimensionless
        const double var_t318 = var_t23 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t319 = var_t318 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t323 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // dimensionless
        const double var_t329 = var_t318 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t342 = ((((4.0 * var_t307) * 0.0032258064516129032) * var_t18) * var_t23) * var_t26; // dimensionless
        const double var_t364 = ((1.3456270662374128e-07 * var_t225) * var_t202) * 2628072.0; // dimensionless
        const double var_t365 = 0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t366 = 1.0 / var_t365; // dimensionless
        const double var_t367 = 0.050000000000000003 * var_t366; // dimensionless
        const double var_t368 = 0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t371 = var_t368 / pow(var_t365, 2.0); // dimensionless
        const double var_t374 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t377 = 0.0051306426321243524 * var_t374; // dimensionless
        const double var_t380 = exp((-var_t124) - 4.7130000000000001); // dimensionless
        const double var_t381 = 1.0 - var_t380; // dimensionless
        const double var_t382 = 1.0 / var_t381; // dimensionless
        const double var_t383 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t386 = var_chaste_interface__membrane__V + 47.130000000000003; // dimensionless
        const double var_t394 = exp( -0.090909090909090912 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t404 = exp(( -0.14705882349999999 * var_chaste_interface__membrane__V) - 11.764705879999999); // dimensionless
        const double var_t409 = exp((-var_t124) - 1.1000000000000001); // dimensionless
        const double var_t410 = 1.0 + var_t409; // dimensionless
        const double var_t423 = exp(( -0.043478260869565216 * var_chaste_interface__membrane__V) - 4.3478260869565215); // dimensionless
        const double var_t426 = exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 11.85); // dimensionless
        const double var_t427 = 1.0 + var_t426; // dimensionless
        const double var_t429 = var_t423 / var_t427; // dimensionless
        const double var_t430 = 1.0 - var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t440 = exp((-var_t124) - 3.2000000000000002); // dimensionless
        const double var_t441 = 1.0 + var_t440; // dimensionless
        const double var_t454 = exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t455 = 1.0 + var_t454; // dimensionless
        const double var_t461 = exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t464 = exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t465 = var_t461 + var_t464; // dimensionless
        const double var_t467 = 43.0 + (1.0 / var_t465); // dimensionless
        const double var_t468 = 1.0 / var_t467; // dimensionless
        const double var_t486 = exp(( -0.073529411759999996 * var_chaste_interface__membrane__V) + 1.1764705879999999); // dimensionless
        const double var_t487 = 1.0 + var_t486; // dimensionless
        const double var_t491 = var_chaste_interface__membrane__V - 10.0; // dimensionless
        const double var_t494 = exp(( -0.14799999999999999 * var_chaste_interface__membrane__V) + 1.48); // dimensionless
        const double var_t495 = 1.0 - var_t494; // dimensionless
        const double var_t496 = 1.0 / var_t495; // dimensionless
        const double var_t501 = exp((0.068699999999999997 * var_chaste_interface__membrane__V) - 0.68700000000000006); // dimensionless
        const double var_t502 = var_t501 - 1.0; // dimensionless
        const double var_t503 = 1.0 / var_t502; // dimensionless
        const double var_t506 = ((7.1899999999999999e-05 * var_t491) * var_t496) + ((0.00013100000000000001 * var_t491) * var_t503); // dimensionless
        const double var_t527 = exp(0.035770000000000003 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t532 = exp( -0.062370000000000002 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t539 = 0.20000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t540 = (-var_t539) - 6.7000000000000002; // dimensionless
        const double var_t541 = exp(var_t540); // dimensionless
        const double var_t543 = 1.0 + (0.051334999999999999 * var_t541); // dimensionless
        const double var_t545 = var_t541 / var_t543; // dimensionless
        const double var_t546 = 1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // dimensionless
        const double var_t555 = exp(-var_t540); // dimensionless
        const double var_t557 = 1.0 + (0.051334999999999999 * var_t555); // dimensionless
        const double var_t559 = var_t555 / var_t557; // dimensionless
        const double var_t573 = exp(var_t539 + 2.5); // dimensionless
        const double var_t574 = 1.0 + var_t573; // dimensionless
        const double var_t580 = exp((0.1052631579 * var_chaste_interface__membrane__V) + 2.1052631580000001); // dimensionless
        const double var_t581 = 1.0 + var_t580; // dimensionless
        const double var_t584 = 30.0 + (200.0 / var_t581); // dimensionless
        const double var_t585 = 1.0 / var_t584; // dimensionless
        const double var_t601 = exp(( -0.16025641030000001 * var_chaste_interface__membrane__V) - 1.602564103); // dimensionless
        const double var_t602 = 1.0 + var_t601; // dimensionless
        const double var_t607 = exp( -0.01 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t609 = exp( -0.070000000000000007 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t610 = 1.0 + var_t609; // dimensionless
        const double var_t612 = var_t607 / var_t610; // dimensionless
        const double var_t615 = ( -0.050000000000000003 * var_chaste_interface__membrane__V) - 2.0; // dimensionless
        const double var_t616 = exp(var_t615); // dimensionless
        const double var_t617 = exp(-var_t615); // dimensionless
        const double var_t618 = 1.0 + var_t617; // dimensionless
        const double var_t620 = var_t616 / var_t618; // dimensionless
        const double var_t622 = (0.25 * var_t612) + (0.070000000000000007 * var_t620); // dimensionless
        const double var_t642 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t643 = var_t642 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t655 = 2.0 + var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t656 = pow(var_t655, 2.0); // dimensionless
        const double var_t659 = 1.0 + (20.0 / var_t656); // dimensionless
        const double var_t660 = 1.0 / var_t659; // dimensionless
        const double var_t661 = 6.0 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t662 = var_t661 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t665 = (1.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t667 = 1.0 + (8000000000.0 * var_t665); // dimensionless
        const double var_t668 = 1.0 / var_t667; // dimensionless
        const double var_t670 = (var_t668 * var_chaste_interface__calcium_dynamics__Ca_SR) - var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t671 = var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_t670; // dimensionless
        const double var_t673 = exp(0.050000000000000003 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t675 = 1.0 + (1.6499999999999999 * var_t673); // dimensionless
        const double var_t677 = 1.0 / pow(var_t675, 2.0); // dimensionless
        const double var_t694 = 1.0 / var_t675; // dimensionless
        const double var_t695 = var_t671 * var_t694; // dimensionless
        const double var_t700 = 0.0072182298761609906 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t701 = 0.00038799692706433767 * var_t21; // dimensionless
        const double var_t723 = var_t662 * var_t695; // dimensionless
        const double var_t725 = 9.9999999999999995e-07 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t729 = 1.0 + (0.1024 / var_t642); // dimensionless
        const double var_t731 = 0.10000000000000001 / var_t729; // dimensionless
        const double var_t759 = (var_t661 * var_t47) * var_t694; // dimensionless
        const double var_t766 = ((0.20000000000000001 / pow(var_t729, 2.0)) * 0.1024) / var_t643; // dimensionless
        const double var_t783 = (((var_t662 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * (((24000000000.0 / pow(var_t667, 2.0)) * var_t665) + var_t668)) * var_t694) + 9.9999999999999995e-07; // dimensionless
        const double var_t786 = 600.0 + var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t787 = pow(var_t786, 2.0); // dimensionless
        const double var_t790 = 1.0 + (6000000.0 / var_t787); // dimensionless
        const double var_t791 = 1.0 / var_t790; // dimensionless
        const double var_t792 = var_t791 * 6.0; // dimensionless
        const double var_t804 = (var_t670 * var_t694) * 12.92; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((-var_t3) * var_t4) - var_t29) - var_t42) + var_t51) + (((((((1000.0 * var_t53) * var_t47) * var_t63) * var_t66) * var_t70) * var_t72) * ((((0.056451455376473413 * var_t74) * var_t75) + ((((((8.0 * var_t81) * 1.040582726326743e-05) * var_chaste_interface__calcium_dynamics__Ca_i) * var_t18) * var_t23) *  -3.773584905660377)) - ((((((8.0 * var_t81) * 1.040582726326743e-05) * var_t21) * var_t44) *  -3.773584905660377) * var_t18)))) - (((((0.00057899999999999998 * var_t26) * var_t101) * 9312.25) * 0.12027904738994467) * var_t104)) - ((((((1000.0 * var_t109) * var_t80) * 1.040582726326743e-05) * 149.40000000000001) * var_t67) * var_t72)) + ((((((1000.0 * var_t109) * var_t80) * 1.040582726326743e-05) * var_t69) / pow(var_t71, 2.0)) * var_t67)) + ((((0.0016999999999999999 / pow(var_t128, 2.0)) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) * var_t142) * var_t126)) - (((0.5 * var_t147) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) * 2.0)) + ((((((((((( -0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0)) - (var_t154 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) + ((((((4.5359999999999996 / pow(var_t161, 2.0)) * 0.23529411764705882) * var_t141) * 96.5) * 0.00038799692706433767) * var_t160)) - ((2.7999999999999998 / var_t161) * 0.23529411764705882)) - (((0.00037056856194479999 / pow(var_t180, 2.0)) * var_t141) * var_t179)) - (0.0022160000000000001 / var_t180)) + var_t224) - var_t241) + (((((0.69299999999999995 / pow((1.0 + (0.1245 * var_t243)) + (0.03531084004485828 * var_t248), 2.0)) * 0.5) * 4.0) * 0.18181818181818182) * (( -0.00046614920809827181 * var_t243) - (0.0013220980019434084 * var_t248)))) - 0.0030999999999999999) - 0.00038420000000000001)));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((((0.32000000000000001 * var_t382) * var_t383) - ((((0.032000000000000001 * var_t386) / pow(var_t381, 2.0)) * var_t383) * var_t380)) + ((0.0072727272729999999 * var_t394) * var_chaste_interface__fast_sodium_current_m_gate__m));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((( -0.019852941169999999 * var_t404) * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (((0.75 / pow(var_t410, 2.0)) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t409));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * (((( -0.0076086956520000004 * var_t429) * var_t430) - ((((0.026249999999999999 * var_t423) / pow(var_t427, 2.0)) * var_t430) * var_t426)) - (((0.029999999999999999 / pow(var_t441, 2.0)) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t440));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((((0.18190000000000001 / pow(var_t455, 2.0)) * var_t454) * var_t468) + (((((1.0 / var_t455) - var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) / pow(var_t467, 2.0)) / pow(var_t465, 2.0)) * ((0.1691 * var_t461) - (0.012800000000000001 * var_t464))));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((0.073529411759999996 / pow(var_t487, 2.0)) * var_t486) * var_t506) + (((1.0 / var_t487) - var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) * ((((7.1899999999999999e-05 * var_t496) - (((1.0641200000000001e-05 * var_t491) / pow(var_t495, 2.0)) * var_t494)) + (0.00013100000000000001 * var_t503)) - (((8.9996999999999996e-06 * var_t491) / pow(var_t502, 2.0)) * var_t501))));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * (((0.0016153732000000001 * var_t527) * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to)) + ((0.0061683930000000003 * var_t532) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * ((((( -0.001083 * var_t545) * var_t546) + (((5.5595805000000001e-05 * pow(var_t541, 2.0)) / pow(var_t543, 2.0)) * var_t546)) - ((0.001083 * var_t559) * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) + (((5.5595805000000001e-05 * pow(var_t555, 2.0)) / pow(var_t557, 2.0)) * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to));
        DENSE_ELEM(rJacobian, 8, 0) = var_chaste_interface__environment__fake_dt * (((( -0.20000000000000001 / pow(var_t574, 2.0)) * var_t573) * var_t585) + ((((21.05263158 * ((1.0 / var_t574) - var_chaste_interface__L_type_Ca_current_f_gate__f)) / pow(var_t584, 2.0)) / pow(var_t581, 2.0)) * var_t580));
        DENSE_ELEM(rJacobian, 9, 0) = var_chaste_interface__environment__fake_dt * ((((0.16025641030000001 / pow(var_t602, 2.0)) * var_t601) * var_t622) + (((1.0 / var_t602) - var_chaste_interface__L_type_Ca_current_d_gate__d) * (((( -0.0025000000000000001 * var_t612) + (((0.017500000000000002 * var_t607) / pow(var_t610, 2.0)) * var_t609)) - (0.0035000000000000001 * var_t620)) - (((0.0035000000000000001 * var_t616) / pow(var_t618, 2.0)) * var_t617))));
        DENSE_ELEM(rJacobian, 11, 0) = var_chaste_interface__environment__fake_dt * (var_t660 * ((((( -0.082500000000000004 * var_t662) * var_t671) * var_t677) * var_t673) - (0.030759235791398644 * (((((var_t29 + var_t42) - var_t51) + 0.00038420000000000001) + (2.0 * var_t224)) - (2.0 * var_t241)))));
        DENSE_ELEM(rJacobian, 12, 0) = var_chaste_interface__environment__fake_dt * (((((((0.082500000000000004 * var_t792) * var_t26) * var_t670) * var_t677) * var_t673) * 2.584e-05) * 500000.0);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((( -38.400000000000006 * var_t1) * var_t4) * var_t281));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * ((( -0.32000000000000001 * var_t386) * var_t382) - (0.080000000000000002 * var_t394));
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t3) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t281));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * (( -0.13500000000000001 * var_t404) - (7.5 / var_t410));
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t3) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t281));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (( -0.17499999999999999 * var_t429) - (0.29999999999999999 / var_t441));
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (( -0.5 * var_t147) * var_t142));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (-var_t468);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (( -0.049000000000000002 * var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) * (var_chaste_interface__membrane__V -  -83.637138326059628)));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (-var_t506);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (( -0.23815 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to) * var_t141));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (( -0.045159999999999999 * var_t527) - (0.098900000000000002 * var_t532));
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t154) * var_t141));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (( -0.0054149999999999997 * var_t545) - (0.0054149999999999997 * var_t559));
        DENSE_ELEM(rJacobian, 0, 8) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * var_t307) * var_t74) * var_t309) - ((0.00057899999999999998 * var_t108) * var_t314)));
        DENSE_ELEM(rJacobian, 8, 8) = var_chaste_interface__environment__fake_dt * (-var_t585);
        DENSE_ELEM(rJacobian, 11, 8) = var_chaste_interface__environment__fake_dt * (var_t660 * (((6.0 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_t695) - (((2.0 * var_t700) * var_t701) * var_t309)));
        DENSE_ELEM(rJacobian, 12, 8) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t47) * var_t804);
        DENSE_ELEM(rJacobian, 0, 9) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * var_t307) * var_t74) * var_t319) - (((0.00057899999999999998 * var_t323) * var_t101) * var_t314)));
        DENSE_ELEM(rJacobian, 9, 9) = var_chaste_interface__environment__fake_dt * (-var_t622);
        DENSE_ELEM(rJacobian, 11, 9) = var_chaste_interface__environment__fake_dt * (var_t660 * ((var_t661 * var_t695) - (((2.0 * var_t700) * var_t701) * var_t319)));
        DENSE_ELEM(rJacobian, 12, 9) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t323) * var_t804);
        DENSE_ELEM(rJacobian, 0, 10) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -4.0 * var_t307) * var_t74) * var_t329) - (((0.00057899999999999998 * var_t25) * var_t101) * var_t314)));
        DENSE_ELEM(rJacobian, 10, 10) = var_chaste_interface__environment__fake_dt * ( -0.033333333333333333);
        DENSE_ELEM(rJacobian, 11, 10) = var_chaste_interface__environment__fake_dt * (var_t660 * ((((var_t661 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_t670) * var_t694) - (((2.0 * var_t700) * var_t701) * var_t329)));
        DENSE_ELEM(rJacobian, 12, 10) = var_chaste_interface__environment__fake_dt * (((-var_t792) * var_t25) * var_t804);
        DENSE_ELEM(rJacobian, 0, 11) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((-var_t342) + ((((((((((((0.0023159999999999999 * var_t25) * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * var_t63) * pow(var_chaste_interface__membrane__V, 2.0)) * 86718000.0625) * 0.014467049241032556) * 1.040582726326743e-05) * var_t69) * var_t72) * 1.26e-05) * var_t18) * var_t75)) + var_t364) - var_t367) + var_t371) - var_t377));
        DENSE_ELEM(rJacobian, 10, 11) = var_chaste_interface__environment__fake_dt * ((( -0.10000000000000001 / pow(1.0 + (var_t643 * 171.46776406035667), 2.0)) * var_t642) * 171.46776406035667);
        DENSE_ELEM(rJacobian, 11, 11) = var_chaste_interface__environment__fake_dt * ((((((2.0 / pow(var_t659, 2.0)) * (((var_t723 + var_t725) - var_t731) - (0.030759235791398644 * (((((((4.0 * var_t307) * var_t74) * var_t23) * var_t26) + (0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 * var_t374))))) + (var_t368 * var_t366)) - ((0.00090964389677649108 * var_t226) * var_t217))))) * 20.0) / var_t656) / var_t655) + (var_t660 * ((((-var_t759) - 9.9999999999999995e-07) - var_t766) - (0.030759235791398644 * ((((var_t342 + var_t377) + var_t367) - var_t371) + (2.0 * var_t364))))));
        DENSE_ELEM(rJacobian, 12, 11) = var_chaste_interface__environment__fake_dt * ((var_t791 * ((var_t766 + 9.9999999999999995e-07) + var_t759)) * 12.92);
        DENSE_ELEM(rJacobian, 11, 12) = var_chaste_interface__environment__fake_dt * (var_t660 * var_t783);
        DENSE_ELEM(rJacobian, 12, 12) = var_chaste_interface__environment__fake_dt * (((((((((2.0 / pow(var_t790, 2.0)) * ((var_t731 - var_t725) - var_t723)) * 2.584e-05) * 500000.0) * 10000.0) * 600.0) / var_t787) / var_t786) - ((var_t791 * var_t783) * 12.92));
    }
    
template<>
void OdeSystemInformation<CellFoxModel2002FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "fox_model_2002";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-94.7);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00024676);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99869);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99887);

    this->mVariableNames.push_back("rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.229);

    this->mVariableNames.push_back("slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("transient_outward_potassium_current_X_to_gate__X_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00003742);

    this->mVariableNames.push_back("transient_outward_potassium_current_Y_to_gate__Y_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.983);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("L_type_Ca_current_f_Ca_gate__f_Ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.942);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0472);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(320);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFoxModel2002FromCellMLCvode)
#endif // CHASTE_CVODE
