//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: tentusscher_model_2006_epi
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:13:11 2016
//! 
//! <autogenerated>

#include "TenTusscher2006EpiBackwardEuler.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<40; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables(const CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables&);
    CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables& operator= (const CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables&);
    CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane__V";
        mNumberOfTables[0] = 40;
        mTableMins[0] = -250.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 549.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][40];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = (1.0 / (1.0 + exp(( -8.0 - var_chaste_interface__membrane__V) * 0.13333333333333333))) / ((((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] =  -1.0 / ((((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = ((0.67000000000000004 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.14285714285714285))) + 0.33000000000000002) / ((562.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] =  -1.0 / ((562.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = (1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.14285714285714285))) / ((1102.5 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))) + 20.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] =  -1.0 / ((1102.5 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.10000000000000001))) + 20.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = (1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp((-(var_chaste_interface__membrane__V + 80.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901)))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] =  -1.0 / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp((-(var_chaste_interface__membrane__V + 80.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901)))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = (1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] =  -1.0 / (1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)))))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = (1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__membrane__V) * 0.11074197120708749), 2.0)) / ((1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] =  -1.0 / ((1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001)))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = (1.0 / (1.0 + exp(( -26.0 - var_chaste_interface__membrane__V) * 0.14285714285714285))) / ((450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] =  -1.0 / ((450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 88.0) * 0.041666666666666664))) / ((3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] =  -1.0 / ((3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = (1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.071428571428571425))) / (((1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] =  -1.0 / (((1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 35.0) * 0.066666666666666666)))) + 80.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = (1.0 / (1.0 + exp((20.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) / ((9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] =  -1.0 / ((9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = (1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.20000000000000001))) / ((85.0 * exp((-pow(var_chaste_interface__membrane__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__membrane__V - 20.0) * 0.20000000000000001))) + 3.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] =  -1.0 / ((85.0 * exp((-pow(var_chaste_interface__membrane__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__membrane__V - 20.0) * 0.20000000000000001))) + 3.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = 1.0 / (1.0 + (0.10000000000000001 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 1.0 / ((1.0 + (0.1245 * exp( -0.10000000000000001 * ((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07)))) + (0.035299999999999998 * exp(-((var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = 1.0 / (exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) - 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 1000.0 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) * (1.0 / (exp(((2.0 * (var_chaste_interface__membrane__V - 15.0)) * 96485.341499999995) * 3.8797490106562429e-07) - 1.0));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 1.0 / (1.0 + exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 3.0 * (1000.0 * exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = 1000.0 * exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][33] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][34] = exp(((var_chaste_interface__membrane__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][35] = 1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][36] = exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][37] = exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][38] = 1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][39] = 1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853);
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[40];
    
    // Lookup tables
    double (*_lookup_table_0)[40];
    
};

std::auto_ptr<CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables> CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellTenTusscher2006EpiFromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                0.0
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellTenTusscher2006EpiFromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[13];
    }
    
    CellTenTusscher2006EpiFromCellMLBackwardEuler::CellTenTusscher2006EpiFromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<7>(
                19,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellTenTusscher2006EpiFromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 1.0; // (c,rapid_time_dependent_potassium_current__ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (c,slow_time_dependent_potassium_current__ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 1.0; // (c,transient_outward_current__ScaleFactorIto) [dimensionless]
        this->mParameters[3] = 2; // (c,calcium_dynamics__Ca_o) [millimolar]
        this->mParameters[4] = 5.4; // (c,potassium_dynamics__K_o) [millimolar]
        this->mParameters[5] = 140; // (c,sodium_dynamics__Na_o) [millimolar]
    }
    
    CellTenTusscher2006EpiFromCellMLBackwardEuler::~CellTenTusscher2006EpiFromCellMLBackwardEuler()
    {
    }
    
    AbstractLookupTableCollection* CellTenTusscher2006EpiFromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double CellTenTusscher2006EpiFromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rY[10];
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[13];
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_ss = rY[15];
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = rY[17];
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = rY[18];
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[4] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[2] * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[0] * 0.153 * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[1] * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[4] + (0.029999999999999999 * mParameters[5])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[33]) - mParameters[3])) / _lt_0_row[34]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * mParameters[4]) / (mParameters[4] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[35]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((_lt_0_row[36] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[3]) - (_lt_0_row[37] * pow(mParameters[5], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[5], 3.0)) * (1.3799999999999999 + mParameters[3]) * _lt_0_row[38]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[3] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[39]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__i_ionic = (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellTenTusscher2006EpiFromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[7], double rResidual[7])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.42e-8
        
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__R_prime = rCurrentGuess[4];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[5];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[6];
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[4] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[2] * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[0] * 0.153 * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[1] * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[4] + (0.029999999999999999 * mParameters[5])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[33]) - mParameters[3])) / _lt_0_row[34]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * mParameters[4]) / (mParameters[4] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[35]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((_lt_0_row[36] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[3]) - (_lt_0_row[37] * pow(mParameters[5], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[5], 3.0)) * (1.3799999999999999 + mParameters[3]) * _lt_0_row[38]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[3] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[39]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_calcium_dynamics__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__calcium_dynamics__Ca_SR, 2.0))); // dimensionless
        const double var_calcium_dynamics__k1 = 0.14999999999999999 / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__i_rel = 0.10199999999999999 * ((var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0) * var_chaste_interface__calcium_dynamics__R_prime) / (0.059999999999999998 + (var_calcium_dynamics__k1 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0)))) * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = 0.0063749999999999996 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_leak = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        const double d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass = (((0.59999999999999998 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass) / ((80.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_ss * 20.0, 2.0))) + 2.0); // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__calcium_dynamics__Ca_i + 0.001, 2.0)))) * (((((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_calcium_dynamics__i_xfer) - ((((var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) - (2.0 * var_sodium_calcium_exchanger_current__i_NaCa)) * var_membrane__Cm) * 0.00031590674984870111)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999, 2.0)))) * (var_calcium_dynamics__i_up - (var_calcium_dynamics__i_rel + var_calcium_dynamics__i_leak)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001, 2.0)))) * (((((-var_L_type_Ca_current__i_CaL) * var_membrane__Cm) * 0.094772024954610345) + ((var_calcium_dynamics__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_calcium_dynamics__i_xfer * 0.016403999999999998) * 18288.2223847842)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__R_prime = ((-(0.044999999999999998 * var_calcium_dynamics__kcasr)) * var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__calcium_dynamics__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__sodium_dynamics__Na_i = ((-(var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + (3.0 * var_sodium_potassium_pump_current__i_NaK) + (3.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00063181349969740222) * var_membrane__Cm; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__potassium_dynamics__K_i = ((-((var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_potassium_pump_current__i_p_K + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_sodium_potassium_pump_current__i_NaK))) / (0.016403999999999998 * var_potassium_dynamics__F)) * var_membrane__Cm; // 'millimole per litre per millisecond'
        
        rResidual[0] = rCurrentGuess[0] - rY[10] - mDt*d_dt_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        rResidual[2] = rCurrentGuess[2] - rY[13] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_i;
        rResidual[1] = rCurrentGuess[1] - rY[14] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_SR;
        rResidual[3] = rCurrentGuess[3] - rY[15] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_ss;
        rResidual[4] = rCurrentGuess[4] - rY[16] - mDt*d_dt_chaste_interface__calcium_dynamics__R_prime;
        rResidual[6] = rCurrentGuess[6] - rY[17] - mDt*d_dt_chaste_interface__sodium_dynamics__Na_i;
        rResidual[5] = rCurrentGuess[5] - rY[18] - mDt*d_dt_chaste_interface__potassium_dynamics__K_i;
    }
    
    void CellTenTusscher2006EpiFromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[7], double rJacobian[7][7])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.42e-8
        
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__calcium_dynamics__R_prime = rCurrentGuess[4];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[5];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[6];
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_membrane__Cm = 0.185; // microF_per_cm2
        const double var_t4 = 1.0 / var_chaste_interface__potassium_dynamics__K_i; // dimensionless
        const double var_t8 = 26.713760659695648 * log(mParameters[4] * var_t4); // dimensionless
        const double var_t11 = exp(((0.059999999999999998 * var_chaste_interface__membrane__V) - (0.059999999999999998 * var_t8)) - 12.0); // dimensionless
        const double var_t12 = 1.0 + var_t11; // dimensionless
        const double var_t14 = 1.0 / pow(var_t12, 2.0); // dimensionless
        const double var_t15 = 5.4050000000000002 * var_t14; // dimensionless
        const double var_t16 = 1.0 / var_t12; // dimensionless
        const double var_t21 = exp(((0.00020000000000000001 * var_chaste_interface__membrane__V) - (0.00020000000000000001 * var_t8)) + 0.02); // dimensionless
        const double var_t26 = exp(((0.10000000000000001 * var_chaste_interface__membrane__V) - (0.10000000000000001 * var_t8)) - 1.0); // dimensionless
        const double var_t27 = (3.0 * var_t21) + var_t26; // dimensionless
        const double var_t31 = exp(( -0.5 * var_chaste_interface__membrane__V) + (0.5 * var_t8)); // dimensionless
        const double var_t32 = 1.0 + var_t31; // dimensionless
        const double var_t33 = 1.0 / var_t32; // dimensionless
        const double var_t35 = (0.10000000000000001 * var_t16) + (var_t27 * var_t33); // dimensionless
        const double var_t36 = 1.0 / var_t35; // dimensionless
        const double var_t37 = var_chaste_interface__membrane__V - var_t8; // dimensionless
        const double var_t38 = var_t36 * var_t37; // dimensionless
        const double var_t42 = 5.4050000000000002 * var_t16; // dimensionless
        const double var_t45 = (1.0 / pow(var_t35, 2.0)) * var_t37; // dimensionless
        const double var_t54 = var_t27 / pow(var_t32, 2.0); // dimensionless
        const double var_t61 = var_t42 * var_t36; // dimensionless
        const double var_t65 = ((mParameters[2] * 0.29399999999999998) * var_chaste_interface__transient_outward_current_r_gate__r) * var_chaste_interface__transient_outward_current_s_gate__s; // dimensionless
        const double var_t66 = mParameters[0] * 0.153; // dimensionless
        const double var_t67 = pow(mParameters[4], 0.5); // dimensionless
        const double var_t68 = var_t67 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1; // dimensionless
        const double var_t72 = mParameters[1] * 0.39200000000000002; // dimensionless
        const double var_t73 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0); // dimensionless
        const double var_t74 = var_t72 * var_t73; // dimensionless
        const double var_t75 = 3.9799999999999998e-05 * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t76 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2; // dimensionless
        const double var_t89 = var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[22]; // dimensionless
        const double var_t91 = (0.25 * var_t89) - mParameters[3]; // dimensionless
        const double var_t99 = var_t75 * var_chaste_interface__L_type_Ca_current_f_gate__f; // dimensionless
        const double var_t100 = var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass; // dimensionless
        const double var_t102 = var_t99 * (var_t100 * (var_chaste_interface__membrane__V - 15.0)); // dimensionless
        const double var_t121 = 2.7240000000000002 * mParameters[4]; // dimensionless
        const double var_t123 = 1.0 / (mParameters[4] + 1.0); // dimensionless
        const double var_t124 = var_t121 * var_t123; // dimensionless
        const double var_t125 = var_chaste_interface__sodium_dynamics__Na_i + 40.0; // dimensionless
        const double var_t126 = 1.0 / var_t125; // dimensionless
        const double var_t149 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t153 = ((14.837999999999999 * var_t149) * var_chaste_interface__fast_sodium_current_m_gate__m) * (var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j); // dimensionless
        const double var_t161 = pow(var_chaste_interface__sodium_dynamics__Na_i, 2.0); // dimensionless
        const double var_t162 = var_t161 * var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t173 = pow(mParameters[5], 2.0) * mParameters[5]; // dimensionless
        const double var_t176 = ((_lt_0_row[23] * var_t173) * var_chaste_interface__calcium_dynamics__Ca_i) * 2.5; // dimensionless
        const double var_t183 = 1.0 / (669921.875 + var_t173); // dimensionless
        const double var_t185 = 1.0 / (1.3799999999999999 + mParameters[3]); // dimensionless
        const double var_t186 = var_t183 * var_t185; // dimensionless
        const double var_t190 = var_t186 * _lt_0_row[24]; // dimensionless
        const double var_t195 = 1000.0 * (((_lt_0_row[25] * var_t162) * mParameters[3]) - var_t176); // dimensionless
        const double var_t229 = 1.0 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i)); // dimensionless
        const double var_t239 = 1.0 / var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t275 = var_t185 * _lt_0_row[24]; // dimensionless
        const double var_t280 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t284 = var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t285 = 1.0 / var_t284; // dimensionless
        const double var_t287 = 0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t307 = ((var_t121 * var_t123) * var_t126) * _lt_0_row[26]; // dimensionless
        const double var_t312 = ((var_t124 * var_chaste_interface__sodium_dynamics__Na_i) / pow(var_t125, 2.0)) * _lt_0_row[26]; // dimensionless
        const double var_t327 = 1.0364268649036186e-05 * var_t4; // dimensionless
        const double var_t328 = var_t327 * var_t11; // dimensionless
        const double var_t353 = 2577486.3199999998 * var_t327; // dimensionless
        const double var_t803 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2.0); // dimensionless
        const double var_t805 = 1.0 + (400.0 * var_t803); // dimensionless
        const double var_t806 = 1.0 / var_t805; // dimensionless
        const double var_t808 = (80.0 * var_t806) + 2.0; // dimensionless
        const double var_t809 = 1.0 / var_t808; // dimensionless
        const double var_t812 = (1.0 / pow(var_t805, 2.0)) * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t885 = var_chaste_interface__calcium_dynamics__Ca_i + 0.001; // dimensionless
        const double var_t886 = pow(var_t885, 2.0); // dimensionless
        const double var_t889 = 1.0 + (0.00020000000000000001 / var_t886); // dimensionless
        const double var_t890 = 1.0 / var_t889; // dimensionless
        const double var_t897 = (var_membrane__Cm * 60.960741282614002) * 1.0364268649036186e-05; // dimensionless
        const double var_t903 = 0.00036000000000000002 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t905 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t908 = 1.0 + (6.2499999999999997e-08 / var_t905); // dimensionless
        const double var_t910 = 0.0063749999999999996 / var_t908; // dimensionless
        const double var_t915 = 0.0038 * (var_chaste_interface__calcium_dynamics__Ca_ss - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t946 =  -0.00036000000000000002 - ((((0.012749999999999999 / pow(var_t908, 2.0)) * 6.2499999999999997e-08) / var_t905) / var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t969 = var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t970 = pow(var_t969, 2.0); // dimensionless
        const double var_t973 = 1.0 + (3.0 / var_t970); // dimensionless
        const double var_t974 = 1.0 / var_t973; // dimensionless
        const double var_t981 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0); // dimensionless
        const double var_t984 = 1.0 + (2.25 / var_t981); // dimensionless
        const double var_t987 = 2.5 - (1.5 / var_t984); // dimensionless
        const double var_t988 = 1.0 / var_t987; // dimensionless
        const double var_t989 = 0.015299999999999998 * var_t988; // dimensionless
        const double var_t990 = var_t803 * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t991 = 0.14999999999999999 * var_t988; // dimensionless
        const double var_t993 = 0.059999999999999998 + (var_t991 * var_t803); // dimensionless
        const double var_t994 = 1.0 / var_t993; // dimensionless
        const double var_t995 = var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t996 = var_t994 * var_t995; // dimensionless
        const double var_t1006 = pow(var_t987, 2.0); // dimensionless
        const double var_t1007 = 1.0 / var_t1006; // dimensionless
        const double var_t1013 = 1.0 / pow(var_t984, 2.0); // dimensionless
        const double var_t1016 = (1.0 / var_t981) / var_chaste_interface__calcium_dynamics__Ca_SR; // dimensionless
        const double var_t1017 = (var_t1013 * 2.25) * var_t1016; // dimensionless
        const double var_t1024 = (1.0 / var_t1006) / var_t987; // dimensionless
        const double var_t1025 = pow(var_t803, 2.0); // dimensionless
        const double var_t1030 = 1.0 / pow(var_t993, 2.0); // dimensionless
        const double var_t1031 = var_t1030 * var_t995; // dimensionless
        const double var_t1036 = var_t990 * var_t994; // dimensionless
        const double var_t1037 = var_t989 * var_t1036; // dimensionless
        const double var_t1041 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime; // dimensionless
        const double var_t1046 = var_t803 * var_chaste_interface__calcium_dynamics__Ca_ss; // dimensionless
        const double var_t1055 = var_t988 * var_t803; // dimensionless
        const double var_t1059 = var_chaste_interface__calcium_dynamics__Ca_ss + 0.00025000000000000001; // dimensionless
        const double var_t1060 = pow(var_t1059, 2.0); // dimensionless
        const double var_t1063 = 1.0 + (0.0001 / var_t1060); // dimensionless
        const double var_t1064 = 1.0 / var_t1063; // dimensionless
        const double var_t1079 = var_membrane__Cm * 18288.2223847842; // dimensionless
        const double var_t1098 = ((0.037433890822745473 * var_t91) * _lt_0_row[27]) * var_t1079; // dimensionless
        const double var_t1117 = (var_t995 * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1119 = 2.25 * var_t1016; // dimensionless
        const double var_t1121 = ((var_t1117 * 1.5) * var_t1013) * var_t1119; // dimensionless
        const double var_t1130 = 0.015299999999999998 * var_t1055; // dimensionless
        const double var_t1131 = var_chaste_interface__calcium_dynamics__R_prime * var_t994; // dimensionless
        const double var_t1134 = ((var_t1130 * var_t1131) * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1141 = var_t1131 * var_t1117; // dimensionless
        const double var_t1179 = 0.044999999999999998 * var_t987; // dimensionless
        const double var_t1188 = 1.0364268649036186e-05 * var_membrane__Cm; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__environment__dt * (-var_t809));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = 0.0;
        rJacobian[0][3] = -(var_chaste_interface__environment__dt * ((( -480.0 * var_t812) * var_t809) + (((64000.0 * (((0.59999999999999998 * var_t806) + 0.40000000000000002) - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass)) / pow(var_t808, 2.0)) * var_t812)));
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / pow(var_t973, 2.0)) * ((var_t910 - ((var_t989 * var_t990) * var_t996)) - var_t903)) * 3.0) / var_t970) / var_t969) + (var_t974 * ((((((((( -0.030599999999999995 * var_t1007) * var_t803) * var_chaste_interface__calcium_dynamics__R_prime) * var_t996) * 1.5) * var_t1017) + ((((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031) * 1.5) * var_t1017)) - var_t1037) - 0.00036000000000000002))));
        rJacobian[1][2] = -(var_chaste_interface__environment__dt * ((-var_t974) * var_t946));
        rJacobian[1][3] = -(var_chaste_interface__environment__dt * (var_t974 * ((((( -2.0 * var_t989) * var_t1041) * var_t996) + ((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1031)) + var_t1037)));
        rJacobian[1][4] = -(var_chaste_interface__environment__dt * (((((-var_t974) * 0.10199999999999999) * 0.14999999999999999) * var_t1055) * var_t996));
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[2][0] = 0.0;
        rJacobian[2][1] = -(var_chaste_interface__environment__dt * (((var_t890 * 0.00036000000000000002) * 0.0010939999999999999) * 60.960741282614002));
        rJacobian[2][2] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / pow(var_t889, 2.0)) * (((((var_t903 - var_t910) * 0.0010939999999999999) * 60.960741282614002) + var_t915) - (((0.5 * (((0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[3] * var_t280)))) + (var_t287 * var_t285)) - ((2.0 * var_t195) * var_t190))) * var_membrane__Cm) * 0.00063181349969740233))) * 0.00020000000000000001) / var_t886) / var_t885) + (var_t890 * ((((var_t946 * 0.0010939999999999999) * 60.960741282614002) - 0.0038) - (((0.5 * ((((0.0079072731552699109 * var_t280) + (0.12379999999999999 * var_t285)) - (var_t287 / pow(var_t284, 2.0))) + (2.0 * ((((_lt_0_row[28] * var_t173) * 2.5) * var_t183) * var_t275)))) * var_membrane__Cm) * 0.00063181349969740233)))));
        rJacobian[2][3] = -(var_chaste_interface__environment__dt * (var_t890 * 0.0038));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = -(var_chaste_interface__environment__dt * (((((((3.0 * var_t890) * 1000.0) * _lt_0_row[25]) * var_t161) * mParameters[3]) * var_t190) * var_t897));
        rJacobian[3][0] = -(var_chaste_interface__environment__dt * ((( -2.0 * ((var_t1064 * 3.9799999999999998e-05) * var_chaste_interface__L_type_Ca_current_d_gate__d)) * (var_t76 * (var_chaste_interface__membrane__V - 15.0))) * var_t1098));
        rJacobian[3][1] = -(var_chaste_interface__environment__dt * (var_t1064 * (((((0.030599999999999995 * var_t1007) * var_t1036) * var_t1121) - (((((0.0045899999999999995 * var_t1024) * var_t1025) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1121)) + var_t1134)));
        rJacobian[3][2] = -(var_chaste_interface__environment__dt * ((var_t1064 * 0.0038) * 300.0));
        rJacobian[3][3] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / pow(var_t1063, 2.0)) * (((( -2.0 * var_t102) * var_t1098) + (var_t1130 * var_t1141)) - (var_t915 * 300.0))) * 0.0001) / var_t1060) / var_t1059) + (var_t1064 * ((((((( -0.5 * var_t102) * 0.037433890822745473) * (_lt_0_row[29] * var_t1079)) + (((0.030599999999999995 * var_t988) * var_chaste_interface__calcium_dynamics__Ca_ss) * var_t1141)) - (((((0.0045899999999999995 * var_t1007) * var_t1046) * var_chaste_interface__calcium_dynamics__R_prime) * var_t1030) * var_t1117)) - var_t1134) - 1.1399999999999999))));
        rJacobian[3][4] = -(var_chaste_interface__environment__dt * (((((var_t1064 * 0.10199999999999999) * var_t991) * var_t803) * var_t994) * var_t1117));
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = -(var_chaste_interface__environment__dt * (((0.13500000000000001 * var_t1013) * var_t1119) * var_t1041));
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = -(var_chaste_interface__environment__dt * ((-var_t1179) * var_chaste_interface__calcium_dynamics__R_prime));
        rJacobian[4][4] = 1.0 - (var_chaste_interface__environment__dt * (((-var_t1179) * var_chaste_interface__calcium_dynamics__Ca_ss) - 0.0050000000000000001));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (var_chaste_interface__environment__dt * ((((((((((((0.0060000000000000001 * var_t15) * var_t38) * 2577486.3199999998) * var_t328) + (((0.10000000000000001 * var_t42) * var_t45) * (((((( -0.0060000000000000001 * var_t14) * 8314.4719999999998) * 310.0) * var_t328) + ((((1546.4917919999998 * var_t327) * var_t21) + ((257748.63199999998 * var_t327) * var_t26)) * var_t33)) + (((((0.5 * var_t54) * 8314.4719999999998) * 0.0032129232812012176) * var_t4) * var_t31)))) - ((0.10000000000000001 * var_t61) * var_t353)) - (var_t65 * var_t353)) - (((((0.43033148290000001 * (var_t66 * var_t68)) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2) * 8314.4719999999998) * 0.0032129232812012176) * var_t4)) - (((var_t74 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t229)) - ((37631.300272 * var_t327) * _lt_0_row[30])) * 60.960741282614002) * var_t1188));
        rJacobian[5][6] = -(var_chaste_interface__environment__dt * (((((-(((((var_t72 * var_t73) * 8314.4719999999998) * 0.0032129232812012176) * var_t229) * 0.029999999999999999)) + (2.0 * var_t307)) - (2.0 * var_t312)) * 60.960741282614002) * var_t1188));
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = -(var_chaste_interface__environment__dt * (((((_lt_0_row[31] * var_t173) * 2.5) * var_t183) * var_t275) * var_t897));
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (var_chaste_interface__environment__dt * (((((((-(((var_t153 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t239)) - (0.0077469905913117379 * var_t239)) - (3.0 * var_t307)) + (3.0 * var_t312)) - (9.0 * ((((_lt_0_row[32] * var_t161) * mParameters[3]) * var_t183) * var_t275))) * 60.960741282614002) * var_t1188));
    }
    
    void CellTenTusscher2006EpiFromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = rY[10];
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.42e-8
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[13];
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__calcium_dynamics__Ca_ss = rY[15];
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = rY[17];
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = rY[18];
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(mParameters[4] / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = 5.4050000000000002 * (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_transient_outward_current__i_to = mParameters[2] * 0.29399999999999998 * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = mParameters[0] * 0.153 * sqrt(mParameters[4] * 0.18518518518518517) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = mParameters[1] * 0.39200000000000002 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log((mParameters[4] + (0.029999999999999999 * mParameters[5])) / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = (((var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * (var_chaste_interface__membrane__V - 15.0) * 1482059.8429999622) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * _lt_0_row[33]) - mParameters[3])) / _lt_0_row[34]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((((2.7240000000000002 * mParameters[4]) / (mParameters[4] + 1.0)) * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / _lt_0_row[35]; // picoA_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(mParameters[5] / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = 14.837999999999999 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((_lt_0_row[36] * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * mParameters[3]) - (_lt_0_row[37] * pow(mParameters[5], 3.0) * var_chaste_interface__calcium_dynamics__Ca_i * 2.5))) / ((669921.875 + pow(mParameters[5], 3.0)) * (1.3799999999999999 + mParameters[3]) * _lt_0_row[38]); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(mParameters[3] / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / _lt_0_row[39]; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double d_dt_chaste_interface__membrane__V =  -1.0 * (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__membrane__V;
    }
    
    void CellTenTusscher2006EpiFromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[1];
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[2];
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[3];
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[5];
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[6];
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 3.373e-5
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 2.42e-8
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane__V outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellTenTusscher2006EpiFromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        
        rY[7] = (var_chaste_interface__L_type_Ca_current_d_gate__d + (_lt_0_row[0] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[1] * var_chaste_interface__environment__dt));
        rY[9] = (var_chaste_interface__L_type_Ca_current_f2_gate__f2 + (_lt_0_row[2] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[3] * var_chaste_interface__environment__dt));
        rY[8] = (var_chaste_interface__L_type_Ca_current_f_gate__f + (_lt_0_row[4] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[5] * var_chaste_interface__environment__dt));
        rY[5] = (var_chaste_interface__fast_sodium_current_h_gate__h + (_lt_0_row[6] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[7] * var_chaste_interface__environment__dt));
        rY[6] = (var_chaste_interface__fast_sodium_current_j_gate__j + (_lt_0_row[8] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[9] * var_chaste_interface__environment__dt));
        rY[4] = (var_chaste_interface__fast_sodium_current_m_gate__m + (_lt_0_row[10] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[11] * var_chaste_interface__environment__dt));
        rY[1] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + (_lt_0_row[12] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[13] * var_chaste_interface__environment__dt));
        rY[2] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + (_lt_0_row[14] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[15] * var_chaste_interface__environment__dt));
        rY[3] = (var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + (_lt_0_row[16] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[17] * var_chaste_interface__environment__dt));
        rY[12] = (var_chaste_interface__transient_outward_current_r_gate__r + (_lt_0_row[18] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[19] * var_chaste_interface__environment__dt));
        rY[11] = (var_chaste_interface__transient_outward_current_s_gate__s + (_lt_0_row[20] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[21] * var_chaste_interface__environment__dt));
        
        double _guess[7] = {rY[10],rY[14],rY[13],rY[15],rY[16],rY[18],rY[17]};
        CardiacNewtonSolver<7,CellTenTusscher2006EpiFromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<7,CellTenTusscher2006EpiFromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[10] = _guess[0];
        rY[14] = _guess[1];
        rY[13] = _guess[2];
        rY[15] = _guess[3];
        rY[16] = _guess[4];
        rY[18] = _guess[5];
        rY[17] = _guess[6];
    }
    
    std::vector<double> CellTenTusscher2006EpiFromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        
        // Mathematics
        const double var_potassium_dynamics__F = 96485.341499999995; // coulomb_per_millimole
        
        std::vector<double> dqs(1);
        dqs[0] = var_potassium_dynamics__F;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellTenTusscher2006EpiFromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_epi";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane__V");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.23);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00621);

    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4712);

    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0095);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00172);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7444);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7045);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.373e-5);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7888);

    this->mVariableNames.push_back("L_type_Ca_current_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9755);

    this->mVariableNames.push_back("L_type_Ca_current_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999998);

    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.42e-8);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000126);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.64);

    this->mVariableNames.push_back("calcium_dynamics__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9073);

    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.604);

    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(136.89);

    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");
    
    this->mDerivedQuantityNames.push_back("K_F");
    this->mDerivedQuantityUnits.push_back("coulomb_per_millimole");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellTenTusscher2006EpiFromCellMLBackwardEuler)
