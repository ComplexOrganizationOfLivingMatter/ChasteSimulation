//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fox_model_2002
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Thu May  5 09:13:35 2016
//! 
//! <autogenerated>

#include "FoxModel2002Opt.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFoxModel2002FromCellMLOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFoxModel2002FromCellMLOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFoxModel2002FromCellMLOpt_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<33; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFoxModel2002FromCellMLOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellFoxModel2002FromCellMLOpt_LookupTables()
    {
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellFoxModel2002FromCellMLOpt_LookupTables(const CellFoxModel2002FromCellMLOpt_LookupTables&);
    CellFoxModel2002FromCellMLOpt_LookupTables& operator= (const CellFoxModel2002FromCellMLOpt_LookupTables&);
    CellFoxModel2002FromCellMLOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 33;
        mTableMins[0] = -120.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 199.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellFoxModel2002FromCellMLOpt_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][33];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = 1.0 / (1.0 + (2.5 * exp(0.10000000000000001 * (var_chaste_interface__membrane__V + 28.0))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 1500.0 / ((1.0 + (0.20000000000000001 * exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761))) * 11147219297.5);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = exp((var_chaste_interface__membrane__V * 33.774999999999999) * 0.00038799692706433761) * 2000000.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = exp((var_chaste_interface__membrane__V *  -62.725000000000001) * 0.00038799692706433761);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = exp((var_chaste_interface__membrane__V * 193.0) * 0.00038799692706433761) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = (149.40000000000001 * exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761)) - 4.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = exp((var_chaste_interface__membrane__V * 96.5) * 0.00038799692706433761) - 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = 1.0 + (1.6499999999999999 * exp(var_chaste_interface__membrane__V * 0.050000000000000003));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = (((1.0 / (2.0 + exp(0.060655559607967903 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 11.199999999999999) * 0.058823529411764705) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 0.0022160000000000001 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = (((0.69299999999999995 * (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9.6500000000000004) * 0.00038799692706433761)) + (exp(((-var_chaste_interface__membrane__V) * 96.5) * 0.00038799692706433761) * 0.035310840049036757)))) * 0.5) * 4.0) * 0.18181818181818182;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = (((1.0 / (2.0 + exp(0.060655559607967903 * (var_chaste_interface__membrane__V -  -96.692526697705418)))) * 11.199999999999999) * 0.058823529411764705) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 0.0022160000000000001 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -96.692526697705418);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (((0.69299999999999995 * (1.0 / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9.6500000000000004) * 0.00038799692706433761)) + (exp(((-var_chaste_interface__membrane__V) * 96.5) * 0.00038799692706433761) * 0.035310840049036757)))) * 0.5) * 4.0) * 0.18181818181818182;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = (0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = 0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = 0.13500000000000001 * exp((var_chaste_interface__membrane__V + 80.0) *  -0.14705882352941177);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = 7.5 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 11.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = (0.17499999999999999 * exp((var_chaste_interface__membrane__V + 100.0) *  -0.043478260869565216)) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 79.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 0.29999999999999999 / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 1.0 / (1.0 + exp( -2.1819999999999999 - (0.18190000000000001 * var_chaste_interface__membrane__V)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = 43.0 + (1.0 / (exp( -5.4950000000000001 + (0.1691 * var_chaste_interface__membrane__V)) + exp( -7.6769999999999996 - (0.012800000000000001 * var_chaste_interface__membrane__V))));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 16.0) *  -0.073529411764705885));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = 1.0 / (((7.1899999999999999e-05 * (var_chaste_interface__membrane__V - 10.0)) / (1.0 - exp( -0.14799999999999999 * (var_chaste_interface__membrane__V - 10.0)))) + ((0.00013100000000000001 * (var_chaste_interface__membrane__V - 10.0)) / (exp(0.068699999999999997 * (var_chaste_interface__membrane__V - 10.0)) - 1.0)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = 0.045159999999999999 * exp(0.035770000000000003 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 0.098900000000000002 * exp( -0.062370000000000002 * var_chaste_interface__membrane__V);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = (0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) *  -0.20000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = (0.0054149999999999997 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)) / (1.0 + (0.051334999999999999 * exp((var_chaste_interface__membrane__V + 33.5) * 0.20000000000000001)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 12.5) * 0.20000000000000001));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 30.0 + (200.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.10526315789473684)));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][31] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 10.0) *  -0.16025641025641024));
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][32] = 1.0 / (((0.25 * exp( -0.01 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.070000000000000007 * var_chaste_interface__membrane__V))) + ((0.070000000000000007 * exp( -0.050000000000000003 * (var_chaste_interface__membrane__V + 40.0))) / (1.0 + exp(0.050000000000000003 * (var_chaste_interface__membrane__V + 40.0)))));
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellFoxModel2002FromCellMLOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[33];
    
    // Lookup tables
    double (*_lookup_table_0)[33];
    
};

std::auto_ptr<CellFoxModel2002FromCellMLOpt_LookupTables> CellFoxModel2002FromCellMLOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellFoxModel2002FromCellMLOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 50.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellFoxModel2002FromCellMLOpt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[11];
    }
    
    CellFoxModel2002FromCellMLOpt::CellFoxModel2002FromCellMLOpt(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                13,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellFoxModel2002FromCellMLOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    CellFoxModel2002FromCellMLOpt::~CellFoxModel2002FromCellMLOpt()
    {
    }
    
    AbstractLookupTableCollection* CellFoxModel2002FromCellMLOpt::GetLookupTableCollection()
    {
        return CellFoxModel2002FromCellMLOpt_LookupTables::Instance();
    }
    
    double CellFoxModel2002FromCellMLOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[4];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[5];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[6];
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[7];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[9];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[10];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[11];
        // Units: micromolar; Initial value: 0.0472
        
        // Lookup table indexing
        const bool _oob_0 = CellFoxModel2002FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFoxModel2002FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * _lt_0_row[4]) - 682.0)) / _lt_0_row[5]; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * _lt_0_row[6]) / _lt_0_row[7]; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = _lt_0_row[0] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
        const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = _lt_0_row[1] * (_lt_0_row[2] - (_lt_0_row[3] * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + _lt_0_row[12] + _lt_0_row[13] + var_Na_Ca_exchanger__i_NaCa + _lt_0_row[14] + var_sarcolemmal_calcium_pump__i_p_Ca + (0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347)) + var_calcium_background_current__i_Ca_b) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellFoxModel2002FromCellMLOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[4];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[5];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[6];
        // Units: dimensionless; Initial value: 0.00003742
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[7];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[9];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[10];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[11];
        // Units: micromolar; Initial value: 0.0472
        double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
        // Units: micromolar; Initial value: 320
        
        
        // Lookup table indexing
        const bool _oob_0 = CellFoxModel2002FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellFoxModel2002FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_L_type_Ca_current__i_Ca_max = (((var_chaste_interface__membrane__V * 0.46933739999999996) * 0.00038799692706433761) * ((var_chaste_interface__calcium_dynamics__Ca_i * _lt_0_row[4]) - 682.0)) / _lt_0_row[5]; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = _lt_0_row[1] * (_lt_0_row[2] - (_lt_0_row[3] * 2628072.0 * var_chaste_interface__calcium_dynamics__Ca_i)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = (0.050000000000000003 * var_chaste_interface__calcium_dynamics__Ca_i) / (0.050000000000000003 + var_chaste_interface__calcium_dynamics__Ca_i); // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * (var_chaste_interface__membrane__V - (13.354093264248705 * log(2000.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // microA_per_microF
        const double var_calcium_dynamics__J_rel = (6.0 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * (((1.0 / (1.0 + pow(2000.0 / var_chaste_interface__calcium_dynamics__Ca_SR, 3.0))) * var_chaste_interface__calcium_dynamics__Ca_SR) - var_chaste_interface__calcium_dynamics__Ca_i)) / _lt_0_row[8]; // micromolar_per_millisecond
        const double var_calcium_dynamics__J_leak = 9.9999999999999995e-07 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = 0.10000000000000001 / (1.0 + pow(0.32000000000000001 / var_chaste_interface__calcium_dynamics__Ca_i, 2.0)); // micromolar_per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (_lt_0_row[15] * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - (_lt_0_row[16] * var_chaste_interface__fast_sodium_current_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = (_lt_0_row[17] * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (_lt_0_row[18] * var_chaste_interface__fast_sodium_current_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (_lt_0_row[19] * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (_lt_0_row[20] * var_chaste_interface__fast_sodium_current_j_gate__j); // per_millisecond
        const double d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = (_lt_0_row[21] - var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr) / _lt_0_row[22]; // per_millisecond
        const double d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = (_lt_0_row[23] - var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks) / _lt_0_row[24]; // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = (_lt_0_row[25] * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to)) - (_lt_0_row[26] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to); // per_millisecond
        const double d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = (_lt_0_row[27] * (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to)) - (_lt_0_row[28] * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to); // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_gate__f = (_lt_0_row[29] - var_chaste_interface__L_type_Ca_current_f_gate__f) / _lt_0_row[30]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_d_gate__d = (_lt_0_row[31] - var_chaste_interface__L_type_Ca_current_d_gate__d) / _lt_0_row[32]; // per_millisecond
        const double d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = ((1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 5.5555555555555554, 3.0))) - var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) * 0.033333333333333333; // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (20.0 / pow(2.0 + var_chaste_interface__calcium_dynamics__Ca_i, 2.0)))) * (((var_calcium_dynamics__J_rel + var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_up) - (0.03075923579139864 * ((var_L_type_Ca_current__i_Ca + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) - (2.0 * var_Na_Ca_exchanger__i_NaCa)))); // 'micromole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = ((1.0 / (1.0 + (6000000.0 / pow(600.0 + var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)))) * ((var_calcium_dynamics__J_up - var_calcium_dynamics__J_leak) - var_calcium_dynamics__J_rel) * 2.584e-05) * 500000.0; // 'micromole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_fast_sodium_current__i_Na = 12.800000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 70.100138334982347); // microA_per_microF
            const double var_L_type_Ca_current__i_CaK = (((((5.7899999999999998e-07 * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca) / (1.0 + (var_L_type_Ca_current__i_Ca_max *  -3.773584905660377))) * var_chaste_interface__membrane__V * 9312250.0) * 0.00038799692706433761) * _lt_0_row[6]) / _lt_0_row[7]; // microA_per_microF
            const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = _lt_0_row[0] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr * (var_chaste_interface__membrane__V -  -96.692526697705418) * 0.013599999999999999; // microA_per_microF
            const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = 0.024500000000000001 * pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2.0) * (var_chaste_interface__membrane__V -  -83.637138326059628); // microA_per_microF
            const double var_transient_outward_potassium_current__i_to = 0.23815 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * (var_chaste_interface__membrane__V -  -96.692526697705418); // microA_per_microF
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = -(var_fast_sodium_current__i_Na + var_L_type_Ca_current__i_Ca + var_L_type_Ca_current__i_CaK + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr + var_slow_activating_delayed_rectifiyer_K_current__i_Ks + var_transient_outward_potassium_current__i_to + _lt_0_row[9] + _lt_0_row[10] + var_Na_Ca_exchanger__i_NaCa + _lt_0_row[11] + var_sarcolemmal_calcium_pump__i_p_Ca + (0.0030999999999999999 * (var_chaste_interface__membrane__V - 70.100138334982347)) + var_calcium_background_current__i_Ca_b + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        rDY[2] = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        rDY[3] = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        rDY[4] = d_dt_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        rDY[5] = d_dt_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
        rDY[6] = d_dt_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to;
        rDY[7] = d_dt_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
        rDY[8] = d_dt_chaste_interface__L_type_Ca_current_f_gate__f;
        rDY[9] = d_dt_chaste_interface__L_type_Ca_current_d_gate__d;
        rDY[10] = d_dt_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        rDY[11] = d_dt_chaste_interface__calcium_dynamics__Ca_i;
        rDY[12] = d_dt_chaste_interface__calcium_dynamics__Ca_SR;
    }
    
template<>
void OdeSystemInformation<CellFoxModel2002FromCellMLOpt>::Initialise(void)
{
    this->mSystemName = "fox_model_2002";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-94.7);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00024676);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99869);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99887);

    this->mVariableNames.push_back("rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.229);

    this->mVariableNames.push_back("slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("transient_outward_potassium_current_X_to_gate__X_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00003742);

    this->mVariableNames.push_back("transient_outward_potassium_current_Y_to_gate__Y_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.983);

    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mVariableNames.push_back("L_type_Ca_current_f_Ca_gate__f_Ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.942);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0472);

    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(320);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFoxModel2002FromCellMLOpt)
