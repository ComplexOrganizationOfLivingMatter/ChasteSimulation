#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: luo_rudy_1991
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:38:39 2016
//! 
//! <autogenerated>

#include "LuoRudy1991Cvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> CellLuoRudy1991FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 2.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -25.5; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellLuoRudy1991FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 7);
    }
    
    CellLuoRudy1991FromCellMLCvode::CellLuoRudy1991FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                8,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellLuoRudy1991FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        NV_Ith_S(this->mParameters, 0) = 0.09; // (c,slow_inward_current__P_si) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 1) = 23; // (c,fast_sodium_current__g_Na) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 2) = 0.282; // (c,time_dependent_potassium_current__g_Kmax) [milliS_per_cm2]
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    CellLuoRudy1991FromCellMLCvode::~CellLuoRudy1991FromCellMLCvode()
    {
    }
    
    void CellLuoRudy1991FromCellMLCvode::VerifyStateVariables()
    {
        /* We only expect CVODE to keep state variables to within its tolerances,
         * not exactly the bounds prescribed to each variable that are checked here.
         *
         * For 99.99% of paces this->mAbsTol works,
         * For 99.999% of paces 10*this->mAbsTol is fine,
         * but unfortunately 100x seems to be required on rare occasions for upstrokes.
         * This sounds bad, but is probably typically only 1e-5 or 1e-6.
         */
        const double tol = 100*this->mAbsTol;
        N_Vector rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0 - tol)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m > 1 + tol)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
    }
    
    double CellLuoRudy1991FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * ((var_chaste_interface__membrane__V >  -100.0) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 77.0)) - 1.0)) / ((var_chaste_interface__membrane__V + 77.0) * exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 35.0)))) : 1.0) * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_plateau_potassium_current__i_Kp = 0.0183 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003))); // per_millisecond
        const double var_time_independent_potassium_current__i_K1 = 0.60470000000000002 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V + 5.476) -  -87.892901713802502))) + (1.0 * exp(0.061749999999999999 * (var_chaste_interface__membrane__V - 506.41709828619742)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V -  -87.892901713802502) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
        const double var_fast_sodium_current__i_Na = NV_Ith_S(mParameters, 1) * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
        const double var_slow_inward_current__i_si = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - (7.7000000000000002 - (13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai * 1.0)))); // microA_per_cm2
        const double var_background_current__i_b = 0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997); // microA_per_cm2
        const double var_chaste_interface__slow_inward_current__i_si = var_slow_inward_current__i_si; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_fast_sodium_current__i_Na + var_chaste_interface__slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_background_current__i_b; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellLuoRudy1991FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_slow_inward_current__i_si = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - (7.7000000000000002 - (13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai * 1.0)))); // microA_per_cm2
        const double d_dt_chaste_interface__fast_sodium_current_m_gate__m = (((0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m)) - ((0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912)) * var_chaste_interface__fast_sodium_current_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_h_gate__h = (((var_chaste_interface__membrane__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0) * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (((var_chaste_interface__membrane__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))))) * var_chaste_interface__fast_sodium_current_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__fast_sodium_current_j_gate__j = (((var_chaste_interface__membrane__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (((var_chaste_interface__membrane__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))))) * var_chaste_interface__fast_sodium_current_j_gate__j); // per_millisecond
        const double d_dt_chaste_interface__slow_inward_current_d_gate__d = (((0.095000000000000001 * exp( -0.01 * (var_chaste_interface__membrane__V - 5.0))) / (1.0 + exp( -0.071999999999999995 * (var_chaste_interface__membrane__V - 5.0)))) * (1.0 - var_chaste_interface__slow_inward_current_d_gate__d)) - (((0.070000000000000007 * exp( -0.017000000000000001 * (var_chaste_interface__membrane__V + 44.0))) / (1.0 + exp(0.050000000000000003 * (var_chaste_interface__membrane__V + 44.0)))) * var_chaste_interface__slow_inward_current_d_gate__d); // per_millisecond
        const double d_dt_chaste_interface__slow_inward_current_f_gate__f = (((0.012 * exp( -0.0080000000000000002 * (var_chaste_interface__membrane__V + 28.0))) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 28.0)))) * (1.0 - var_chaste_interface__slow_inward_current_f_gate__f)) - (((0.0064999999999999997 * exp( -0.02 * (var_chaste_interface__membrane__V + 30.0))) / (1.0 + exp( -0.20000000000000001 * (var_chaste_interface__membrane__V + 30.0)))) * var_chaste_interface__slow_inward_current_f_gate__f); // per_millisecond
        const double d_dt_chaste_interface__time_dependent_potassium_current_X_gate__X = (((0.00050000000000000001 * exp(0.083000000000000004 * (var_chaste_interface__membrane__V + 50.0))) / (1.0 + exp(0.057000000000000002 * (var_chaste_interface__membrane__V + 50.0)))) * (1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X)) - (((0.0012999999999999999 * exp( -0.059999999999999998 * (var_chaste_interface__membrane__V + 20.0))) / (1.0 + exp( -0.040000000000000001 * (var_chaste_interface__membrane__V + 20.0)))) * var_chaste_interface__time_dependent_potassium_current_X_gate__X); // per_millisecond
        const double d_dt_chaste_interface__intracellular_calcium_concentration__Cai = ( -0.0001 * var_slow_inward_current__i_si) + (0.070000000000000007 * (0.0001 - var_chaste_interface__intracellular_calcium_concentration__Cai)); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * ((var_chaste_interface__membrane__V >  -100.0) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 77.0)) - 1.0)) / ((var_chaste_interface__membrane__V + 77.0) * exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 35.0)))) : 1.0) * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
            const double var_plateau_potassium_current__i_Kp = 0.0183 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
            const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003))); // per_millisecond
            const double var_time_independent_potassium_current__i_K1 = 0.60470000000000002 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V + 5.476) -  -87.892901713802502))) + (1.0 * exp(0.061749999999999999 * (var_chaste_interface__membrane__V - 506.41709828619742)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V -  -87.892901713802502) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
            const double var_membrane__C = 1.0; // microF_per_cm2
            const double var_chaste_interface__membrane__I_stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            const double var_fast_sodium_current__i_Na = NV_Ith_S(mParameters, 1) * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
            const double var_background_current__i_b = 0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997); // microA_per_cm2
            d_dt_chaste_interface__membrane__V = ( -1.0 / var_membrane__C) * (var_chaste_interface__membrane__I_stim + var_fast_sodium_current__i_Na + var_slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp + var_background_current__i_b); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__slow_inward_current_d_gate__d;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__slow_inward_current_f_gate__f;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__time_dependent_potassium_current_X_gate__X;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__intracellular_calcium_concentration__Cai;
    }
    
    void CellLuoRudy1991FromCellMLCvode::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 0.0002
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // millisecond
        const double var_membrane__C = 1.0; // microF_per_cm2
        const double var_t1 = 1.0 / var_membrane__C; // dimensionless
        const double var_t2 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t3 = var_t2 * var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t5 = var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // dimensionless
        const double var_t7 = NV_Ith_S(mParameters, 0) * var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_t8 = var_t7 * var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_t10 = NV_Ith_S(mParameters, 2) * 2.3237900077244502; // dimensionless
        const double var_t14 = 0.040000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t16 = exp(var_t14 + 3.0800000000000001); // dimensionless
        const double var_t17 = var_chaste_interface__membrane__V + 77.0; // dimensionless
        const double var_t18 = 1.0 / var_t17; // dimensionless
        const double var_t22 = 1.0 / exp(var_t14 + 1.3999999999999999); // dimensionless
        const double var_t25 = var_t16 - 1.0; // dimensionless
        const double var_t48 = var_chaste_interface__membrane__V -  -77.567584385319392; // dimensionless
        const double var_t53 = 0.040000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t65 = ( -100.0 < var_chaste_interface__membrane__V) ? (((2.8370000000000002 * (exp(var_t53 + 3.0800000000000001) - 1.0)) / (var_chaste_interface__membrane__V + 77.0)) / exp(var_t53 + 1.3999999999999999)) : 1.0; // dimensionless
        const double var_t77 = exp(((0.23849999999999999 * var_chaste_interface__membrane__V) -  -20.962457058741897) - 14.1227775); // dimensionless
        const double var_t78 = 1.0 + var_t77; // dimensionless
        const double var_t80 = 1.0 / pow(var_t78, 2.0); // dimensionless
        const double var_t82 = 1.0 / var_t78; // dimensionless
        const double var_t87 = exp(((0.080320000000000003 * var_chaste_interface__membrane__V) + 0.43983232) -  -7.059557865652617); // dimensionless
        const double var_t92 = exp(((0.061749999999999999 * var_chaste_interface__membrane__V) -  -5.4273866808273041) - 36.698642499999998); // dimensionless
        const double var_t93 = (0.49124000000000001 * var_t87) + var_t92; // dimensionless
        const double var_t97 = exp((( -0.51429999999999998 * var_chaste_interface__membrane__V) +  -45.203319351408624) - 2.4444678999999998); // dimensionless
        const double var_t98 = 1.0 + var_t97; // dimensionless
        const double var_t99 = 1.0 / var_t98; // dimensionless
        const double var_t101 = (1.02 * var_t82) + (var_t93 * var_t99); // dimensionless
        const double var_t102 = 1.0 / var_t101; // dimensionless
        const double var_t103 = var_chaste_interface__membrane__V -  -87.892901713802502; // dimensionless
        const double var_t108 = 2.3237900077244502 * var_t82; // dimensionless
        const double var_t131 = exp(1.252173913 - (0.16722408029999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t132 = 1.0 + var_t131; // dimensionless
        const double var_t143 = var_t1 * NV_Ith_S(mParameters, 1); // dimensionless
        const double var_t150 = var_chaste_interface__membrane__V - 54.794463935091848; // dimensionless
        const double var_t160 = var_t1 * NV_Ith_S(mParameters, 0); // dimensionless
        const double var_t163 = (var_chaste_interface__membrane__V - 7.7000000000000002) + (13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai)); // dimensionless
        const double var_t174 = 1.0 / var_chaste_interface__intracellular_calcium_concentration__Cai; // dimensionless
        const double var_t178 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t180 = exp((-var_t178) - 4.7130000000000001); // dimensionless
        const double var_t181 = 1.0 - var_t180; // dimensionless
        const double var_t182 = 1.0 / var_t181; // dimensionless
        const double var_t183 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m; // dimensionless
        const double var_t186 = var_chaste_interface__membrane__V + 47.130000000000003; // dimensionless
        const double var_t194 = exp( -0.090909090909090912 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t202 = var_chaste_interface__membrane__V <  -40.0; // dimensionless
        const double var_t205 = exp( -11.764705879999999 - (0.14705882349999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t208 =  -40.0 < var_chaste_interface__membrane__V; // dimensionless
        const double var_t221 = exp(( -0.090090090090000005 * var_chaste_interface__membrane__V) - 0.96036036039999995); // dimensionless
        const double var_t231 = var_chaste_interface__membrane__V <  -40.0; // dimensionless
        const double var_t247 = exp(0.24440000000000001 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t250 = exp( -0.043909999999999998 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t253 = var_chaste_interface__membrane__V + 37.780000000000001; // dimensionless
        const double var_t257 = exp((0.311 * var_chaste_interface__membrane__V) + 24.640530009999999); // dimensionless
        const double var_t258 = 1.0 + var_t257; // dimensionless
        const double var_t259 = 1.0 / var_t258; // dimensionless
        const double var_t263 = ( -127140.0 * var_t247) - (3.4740000000000003e-05 * var_t250); // dimensionless
        const double var_t276 = exp( -0.01052 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t279 = exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919950000001); // dimensionless
        const double var_t280 = 1.0 + var_t279; // dimensionless
        const double var_t291 = exp( -2.5349999990000002e-07 * var_chaste_interface__membrane__V); // dimensionless
        const double var_t294 = exp(( -0.10000000000000001 * var_chaste_interface__membrane__V) - 3.2000000000000002); // dimensionless
        const double var_t295 = 1.0 + var_t294; // dimensionless
        const double var_t345 = exp(( -0.01 * var_chaste_interface__membrane__V) + 0.050000000000000003); // dimensionless
        const double var_t348 = exp(( -0.071999999999999995 * var_chaste_interface__membrane__V) + 0.35999999999999999); // dimensionless
        const double var_t349 = 1.0 + var_t348; // dimensionless
        const double var_t351 = var_t345 / var_t349; // dimensionless
        const double var_t352 = 1.0 - var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_t363 = exp(( -0.017000000000000001 * var_chaste_interface__membrane__V) - 0.748); // dimensionless
        const double var_t366 = exp((0.050000000000000003 * var_chaste_interface__membrane__V) + 2.2000000000000002); // dimensionless
        const double var_t367 = 1.0 + var_t366; // dimensionless
        const double var_t369 = var_t363 / var_t367; // dimensionless
        const double var_t384 = exp(( -0.0080000000000000002 * var_chaste_interface__membrane__V) - 0.224); // dimensionless
        const double var_t387 = exp((0.14999999999999999 * var_chaste_interface__membrane__V) + 4.2000000000000002); // dimensionless
        const double var_t388 = 1.0 + var_t387; // dimensionless
        const double var_t390 = var_t384 / var_t388; // dimensionless
        const double var_t391 = 1.0 - var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_t402 = exp(( -0.02 * var_chaste_interface__membrane__V) - 0.59999999999999998); // dimensionless
        const double var_t405 = exp(( -0.20000000000000001 * var_chaste_interface__membrane__V) - 6.0); // dimensionless
        const double var_t406 = 1.0 + var_t405; // dimensionless
        const double var_t408 = var_t402 / var_t406; // dimensionless
        const double var_t423 = exp((0.083000000000000004 * var_chaste_interface__membrane__V) + 4.1500000000000004); // dimensionless
        const double var_t426 = exp((0.057000000000000002 * var_chaste_interface__membrane__V) + 2.8500000000000001); // dimensionless
        const double var_t427 = 1.0 + var_t426; // dimensionless
        const double var_t429 = var_t423 / var_t427; // dimensionless
        const double var_t430 = 1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X; // dimensionless
        const double var_t441 = exp(( -0.059999999999999998 * var_chaste_interface__membrane__V) - 1.2); // dimensionless
        const double var_t443 = exp((-var_t53) - 0.80000000000000004); // dimensionless
        const double var_t444 = 1.0 + var_t443; // dimensionless
        const double var_t446 = var_t441 / var_t444; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t1) * (((((((((((NV_Ith_S(mParameters, 1) * var_t3) * var_t5) + var_t8) + ((((0.43033148290000001 * var_t10) * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * ((var_chaste_interface__membrane__V <=  -100.0) ? 0.0 : ( -100.0 < var_chaste_interface__membrane__V) ? (((((0.11348 * var_t16) * var_t18) * var_t22) - (((2.8370000000000002 * var_t25) / pow(var_t17, 2.0)) * var_t22)) - (((0.11348 * var_t25) * var_t18) * var_t22)) : NAN)) * var_t48)) + (((0.43033148290000001 * var_t10) * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * var_t65)) - ((((0.14710536900911525 * var_t80) * var_t102) * var_t103) * var_t77)) - ((((0.26542587670000001 * var_t108) / pow(var_t101, 2.0)) * var_t103) * (((( -0.24326999999999999 * var_t80) * var_t77) + (((0.039456396800000001 * var_t87) + (0.061749999999999999 * var_t92)) * var_t99)) + (((0.51429999999999998 * var_t93) / pow(var_t98, 2.0)) * var_t97)))) + ((0.26542587670000001 * var_t108) * var_t102)) + (((0.0030602006694899998 / pow(var_t132, 2.0)) * var_t103) * var_t131)) + (0.0183 / var_t132)) + 0.039210000000000002)));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((((0.32000000000000001 * var_t182) * var_t183) - ((((0.032000000000000001 * var_t186) / pow(var_t181, 2.0)) * var_t183) * var_t180)) + ((0.0072727272729999999 * var_t194) * var_chaste_interface__fast_sodium_current_m_gate__m));
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * (((var_t202 ? ( -0.01985294118 * var_t205) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h)) - (((var_chaste_interface__membrane__V <=  -40.0) ? ((0.28123999999999999 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (108500.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : var_t208 ? ((0.011711711709999999 / pow(0.13 + (0.13 * var_t221), 2.0)) * var_t221) : NAN) * var_chaste_interface__fast_sodium_current_h_gate__h));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * (((var_t202 ? (((((( -31073.016 * var_t247) + (1.5254334000000001e-06 * var_t250)) * var_t253) * var_t259) + (var_t263 * var_t259)) - ((((0.311 * var_t263) * var_t253) / pow(var_t258, 2.0)) * var_t257)) : ( -40.0 <= var_chaste_interface__membrane__V) ? 0.0 : NAN) * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j)) - (((var_chaste_interface__membrane__V <=  -40.0) ? ((( -0.001275024 * var_t276) / var_t280) + (((0.016701359999999998 * var_t276) / pow(var_t280, 2.0)) * var_t279)) : var_t208 ? ((( -7.604999998e-08 * var_t291) / var_t295) + (((0.029999999999999999 * var_t291) / pow(var_t295, 2.0)) * var_t294)) : NAN) * var_chaste_interface__fast_sodium_current_j_gate__j));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((((( -0.00095 * var_t351) * var_t352) + ((((0.0068399999999999997 * var_t345) / pow(var_t349, 2.0)) * var_t352) * var_t348)) + ((0.0011900000000000001 * var_t369) * var_chaste_interface__slow_inward_current_d_gate__d)) + ((((0.0035000000000000001 * var_t363) / pow(var_t367, 2.0)) * var_chaste_interface__slow_inward_current_d_gate__d) * var_t366));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((( -9.6000000000000002e-05 * var_t390) * var_t391) - ((((0.0018 * var_t384) / pow(var_t388, 2.0)) * var_t391) * var_t387)) + ((0.00012999999999999999 * var_t408) * var_chaste_interface__slow_inward_current_f_gate__f)) - ((((0.0012999999999999999 * var_t402) / pow(var_t406, 2.0)) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t405));
        DENSE_ELEM(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * (((((4.1499999999999999e-05 * var_t429) * var_t430) - ((((2.8500000000000002e-05 * var_t423) / pow(var_t427, 2.0)) * var_t430) * var_t426)) + ((7.7999999999999999e-05 * var_t446) * var_chaste_interface__time_dependent_potassium_current_X_gate__X)) - ((((5.1999999999999997e-05 * var_t441) / pow(var_t444, 2.0)) * var_chaste_interface__time_dependent_potassium_current_X_gate__X) * var_t443));
        DENSE_ELEM(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * ( -0.0001 * var_t8);
        DENSE_ELEM(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -3.0 * var_t143) * var_t2) * var_t5) * var_t150));
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * ((( -0.32000000000000001 * var_t186) * var_t182) - (0.080000000000000002 * var_t194));
        DENSE_ELEM(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t143) * var_t3) * var_chaste_interface__fast_sodium_current_j_gate__j) * var_t150));
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * ((-(var_t231 ? (0.13500000000000001 * var_t205) : 0.0)) - (var_t231 ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1.0 / (0.13 + (0.13 * var_t221)))));
        DENSE_ELEM(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t143) * var_t3) * var_chaste_interface__fast_sodium_current_h_gate__h) * var_t150));
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * ((-(var_t231 ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp((0.311 * var_chaste_interface__membrane__V) + 24.640529999999998))) : 0.0)) - (var_t231 ? ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp(( -0.13780000000000001 * var_chaste_interface__membrane__V) - 5.5312919999999997))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp((-var_t178) - 3.2000000000000002)))));
        DENSE_ELEM(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t160) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t163));
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (( -0.095000000000000001 * var_t351) - (0.070000000000000007 * var_t369));
        DENSE_ELEM(rJacobian, 7, 4) = var_chaste_interface__environment__fake_dt * ((( -0.0001 * NV_Ith_S(mParameters, 0)) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t163);
        DENSE_ELEM(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((-var_t160) * var_chaste_interface__slow_inward_current_d_gate__d) * var_t163));
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (( -0.012 * var_t390) - (0.0064999999999999997 * var_t408));
        DENSE_ELEM(rJacobian, 7, 5) = var_chaste_interface__environment__fake_dt * (( -0.0001 * var_t7) * var_t163);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((( -0.43033148290000001 * var_t1) * NV_Ith_S(mParameters, 2)) * 2.3237900077244502) * var_t65) * var_t48));
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (( -0.00050000000000000001 * var_t429) - (0.0012999999999999999 * var_t446));
        DENSE_ELEM(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((( -13.028700000000001 * var_t160) * var_chaste_interface__slow_inward_current_d_gate__d) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t174));
        DENSE_ELEM(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (((( -0.00130287 * var_t7) * var_chaste_interface__slow_inward_current_f_gate__f) * var_t174) - 0.070000000000000007);
    }
    
    N_Vector CellLuoRudy1991FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.16647703
        
        
        // Mathematics
        const double var_membrane__FonRT = 0.037435728309031795; // per_millivolt
        const double var_time_dependent_potassium_current__i_K = (NV_Ith_S(mParameters, 2) * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * ((var_chaste_interface__membrane__V >  -100.0) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 77.0)) - 1.0)) / ((var_chaste_interface__membrane__V + 77.0) * exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 35.0)))) : 1.0) * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_plateau_potassium_current__i_Kp = 0.0183 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003))); // per_millisecond
        const double var_time_independent_potassium_current__i_K1 = 0.60470000000000002 * (var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V + 5.476) -  -87.892901713802502))) + (1.0 * exp(0.061749999999999999 * (var_chaste_interface__membrane__V - 506.41709828619742)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V -  -87.892901713802502) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V -  -87.892901713802502); // microA_per_cm2
        const double var_membrane__potassium_currents = var_time_dependent_potassium_current__i_K + var_time_independent_potassium_current__i_K1 + var_plateau_potassium_current__i_Kp; // microA_per_cm2
        
        N_Vector dqs = N_VNew_Serial(2);
        NV_Ith_S(dqs, 0) = var_membrane__FonRT;
        NV_Ith_S(dqs, 1) = var_membrane__potassium_currents;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellLuoRudy1991FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "luo_rudy_1991";
    this->mFreeVariableName = "environment_time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.853);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00187018);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9804713);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98767124);

    this->mVariableNames.push_back("slow_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00316354);

    this->mVariableNames.push_back("slow_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99427859);

    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.16647703);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mDerivedQuantityNames.push_back("FonRT");
    this->mDerivedQuantityUnits.push_back("per_millivolt");
    
    this->mDerivedQuantityNames.push_back("potassium_currents");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");
    
    this->mAttributes["SuggestedCycleLength"] = 750;
    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.005;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellLuoRudy1991FromCellMLCvode)
#endif // CHASTE_CVODE
