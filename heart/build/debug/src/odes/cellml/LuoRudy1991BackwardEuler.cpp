//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: luo_rudy_1991
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Wed May  4 17:38:45 2016
//! 
//! <autogenerated>

#include "LuoRudy1991BackwardEuler.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellLuoRudy1991FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellLuoRudy1991FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellLuoRudy1991FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }
    
    void FreeMemory()
    {
        if (_lookup_table_1)
        {
            delete[] _lookup_table_1;
            _lookup_table_1 = NULL;
        }
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }
    
    // Row lookup methods
    // using linear-interpolation
    double* _lookup_1_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<1; j++)
        {
            const double y1 = _lookup_table_1[i][j];
            const double y2 = _lookup_table_1[i+1][j];
            _lookup_table_1_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_1_row;
    }
    
    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<15; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }
    
    
    const double * IndexTable1(double var_chaste_interface__intracellular_calcium_concentration__Cai)
    {
        const double _offset_1 = var_chaste_interface__intracellular_calcium_concentration__Cai - mTableMins[1];
        const double _offset_1_over_table_step = _offset_1 * mTableStepInverses[1];
        const unsigned _table_index_1 = (unsigned)(_offset_1_over_table_step);
        const double _factor_1 = _offset_1_over_table_step - _table_index_1;
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_1_row(_table_index_1, _factor_1);
        return _lt_1_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex1(double& var_chaste_interface__intracellular_calcium_concentration__Cai)
    {
        bool _oob_1 = false;
        if (var_chaste_interface__intracellular_calcium_concentration__Cai>mTableMaxs[1] || var_chaste_interface__intracellular_calcium_concentration__Cai<mTableMins[1])
        {
#define COVERAGE_IGNORE
            _oob_1 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_1;
    }
#undef COVERAGE_IGNORE

    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }
    
#define COVERAGE_IGNORE
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
#define COVERAGE_IGNORE
            _oob_0 = true;
#undef COVERAGE_IGNORE
        }
        return _oob_0;
    }
#undef COVERAGE_IGNORE

    ~CellLuoRudy1991FromCellMLBackwardEuler_LookupTables()
    {
        if (_lookup_table_1)
        {
            delete[] _lookup_table_1;
            _lookup_table_1 = NULL;
        }
        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }
    }
    
protected:
    CellLuoRudy1991FromCellMLBackwardEuler_LookupTables(const CellLuoRudy1991FromCellMLBackwardEuler_LookupTables&);
    CellLuoRudy1991FromCellMLBackwardEuler_LookupTables& operator= (const CellLuoRudy1991FromCellMLBackwardEuler_LookupTables&);
    CellLuoRudy1991FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(2);
        mNumberOfTables.resize(2);
        mTableMins.resize(2);
        mTableSteps.resize(2);
        mTableStepInverses.resize(2);
        mTableMaxs.resize(2);
        mNeedsRegeneration.resize(2);
        mKeyingVariableNames[1] = "cytosolic_calcium_concentration";
        mNumberOfTables[1] = 1;
        mTableMins[1] = 0.00001;
        mTableSteps[1] = 0.0001;
        mTableStepInverses[1] = 10000.0;
        mTableMaxs[1] = 30.00001;
        mNeedsRegeneration[1] = true;
        _lookup_table_1 = NULL;
        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 15;
        mTableMins[0] = -150.0001;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mTableMaxs[0] = 199.9999;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;
        CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }
    
    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
        if (mNeedsRegeneration[1])
        {
            if (_lookup_table_1)
            {
                delete[] _lookup_table_1;
                _lookup_table_1 = NULL;
            }
            const unsigned _table_size_1 = 1 + (unsigned)((mTableMaxs[1]-mTableMins[1])/mTableSteps[1]+0.5);
            _lookup_table_1 = new double[_table_size_1][1];
            for (unsigned i=0 ; i<_table_size_1; i++)
            {
                const double var_chaste_interface__intracellular_calcium_concentration__Cai = mTableMins[1] + i*mTableSteps[1];
                _lookup_table_1[i][0] = 7.7000000000000002 - (13.028700000000001 * log(var_chaste_interface__intracellular_calcium_concentration__Cai * 1.0));
            }
            
            mNeedsRegeneration[1] = false;
        }
        
        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][15];
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = ((var_chaste_interface__membrane__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = (((var_chaste_interface__membrane__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__membrane__V) *  -0.14705882352941177)) : 0.0) *  -1.0) - (((var_chaste_interface__membrane__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V))) : (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901))))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = ((var_chaste_interface__membrane__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = (((var_chaste_interface__membrane__V <  -40.0) ? (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) *  -1.0) - (((var_chaste_interface__membrane__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0))))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = ((0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = (((0.32000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 47.130000000000003)))) *  -1.0) - ((0.080000000000000002 * exp((-var_chaste_interface__membrane__V) * 0.090909090909090912)) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = ((0.095000000000000001 * exp( -0.01 * (var_chaste_interface__membrane__V - 5.0))) / (1.0 + exp( -0.071999999999999995 * (var_chaste_interface__membrane__V - 5.0)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = (((0.095000000000000001 * exp( -0.01 * (var_chaste_interface__membrane__V - 5.0))) / (1.0 + exp( -0.071999999999999995 * (var_chaste_interface__membrane__V - 5.0)))) *  -1.0) - (((0.070000000000000007 * exp( -0.017000000000000001 * (var_chaste_interface__membrane__V + 44.0))) / (1.0 + exp(0.050000000000000003 * (var_chaste_interface__membrane__V + 44.0)))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = ((0.012 * exp( -0.0080000000000000002 * (var_chaste_interface__membrane__V + 28.0))) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 28.0)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = (((0.012 * exp( -0.0080000000000000002 * (var_chaste_interface__membrane__V + 28.0))) / (1.0 + exp(0.14999999999999999 * (var_chaste_interface__membrane__V + 28.0)))) *  -1.0) - (((0.0064999999999999997 * exp( -0.02 * (var_chaste_interface__membrane__V + 30.0))) / (1.0 + exp( -0.20000000000000001 * (var_chaste_interface__membrane__V + 30.0)))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = ((0.00050000000000000001 * exp(0.083000000000000004 * (var_chaste_interface__membrane__V + 50.0))) / (1.0 + exp(0.057000000000000002 * (var_chaste_interface__membrane__V + 50.0)))) * 1.0;
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = (((0.00050000000000000001 * exp(0.083000000000000004 * (var_chaste_interface__membrane__V + 50.0))) / (1.0 + exp(0.057000000000000002 * (var_chaste_interface__membrane__V + 50.0)))) *  -1.0) - (((0.0012999999999999999 * exp( -0.059999999999999998 * (var_chaste_interface__membrane__V + 20.0))) / (1.0 + exp( -0.040000000000000001 * (var_chaste_interface__membrane__V + 20.0)))) * 1.0);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = 0.60470000000000002 * ((1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003)))) / ((1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__V -  -87.892901713802502) - 59.215000000000003)))) + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__V + 5.476) -  -87.892901713802502))) + (1.0 * exp(0.061749999999999999 * (var_chaste_interface__membrane__V - 506.41709828619742)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__V -  -87.892901713802502) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__V -  -87.892901713802502);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 0.0183 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__V) * 0.16722408026755853))) * (var_chaste_interface__membrane__V -  -87.892901713802502);
            }
            
            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = (var_chaste_interface__membrane__V >  -100.0) ? ((2.8370000000000002 * (exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 77.0)) - 1.0)) / ((var_chaste_interface__membrane__V + 77.0) * exp(0.040000000000000001 * (var_chaste_interface__membrane__V + 35.0)))) : 1.0;
            }
            
            mNeedsRegeneration[0] = false;
        }
        
        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }
    
private:
    /** The single instance of the class */
    static std::auto_ptr<CellLuoRudy1991FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_1_row[1];
    double _lookup_table_0_row[15];
    
    // Lookup tables
    double (*_lookup_table_1)[1];
    double (*_lookup_table_0)[15];
    
};

std::auto_ptr<CellLuoRudy1991FromCellMLBackwardEuler_LookupTables> CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellLuoRudy1991FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 2.0; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -25.5; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double CellLuoRudy1991FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[7];
    }
    
    CellLuoRudy1991FromCellMLBackwardEuler::CellLuoRudy1991FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<1>(
                8,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<CellLuoRudy1991FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 0.09; // (c,slow_inward_current__P_si) [milliS_per_cm2]
        this->mParameters[1] = 23; // (c,fast_sodium_current__g_Na) [milliS_per_cm2]
        this->mParameters[2] = 0.282; // (c,time_dependent_potassium_current__g_Kmax) [milliS_per_cm2]
    }
    
    CellLuoRudy1991FromCellMLBackwardEuler::~CellLuoRudy1991FromCellMLBackwardEuler()
    {
    }
    
    AbstractLookupTableCollection* CellLuoRudy1991FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    void CellLuoRudy1991FromCellMLBackwardEuler::VerifyStateVariables()
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_m_gate__m > 1)
        {
            EXCEPTION(DumpState("State variable fast_sodium_current_m_gate__m has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
    }
    
    double CellLuoRudy1991FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rY[7];
        // Units: millimolar; Initial value: 0.0002
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        const bool _oob_0 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_time_dependent_potassium_current__i_K = (mParameters[2] * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[14] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_fast_sodium_current__i_Na = mParameters[1] * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
        const double var_slow_inward_current__i_si = mParameters[0] * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - _lt_1_row[0]); // microA_per_cm2
        const double var_chaste_interface__slow_inward_current__i_si = var_slow_inward_current__i_si; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_fast_sodium_current__i_Na + var_chaste_interface__slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + _lt_0_row[12] + _lt_0_row[13] + (0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997)); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void CellLuoRudy1991FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[1], double rResidual[1])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rCurrentGuess[0];
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        
        const double var_slow_inward_current__i_si = mParameters[0] * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - _lt_1_row[0]); // microA_per_cm2
        const double d_dt_chaste_interface__intracellular_calcium_concentration__Cai = ( -0.0001 * var_slow_inward_current__i_si) + (0.070000000000000007 * (0.0001 - var_chaste_interface__intracellular_calcium_concentration__Cai)); // 'millimole per litre per millisecond'
        
        rResidual[0] = rCurrentGuess[0] - rY[7] - mDt*d_dt_chaste_interface__intracellular_calcium_concentration__Cai;
    }
    
    void CellLuoRudy1991FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[1], double rJacobian[1][1])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rCurrentGuess[0];
        
        const double var_chaste_interface__environment__dt = mDt;

        
        const double var_t7 = mParameters[0] * var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__environment__dt * (((( -0.00130287 * var_t7) * var_chaste_interface__slow_inward_current_f_gate__f) * (1.0 / var_chaste_interface__intracellular_calcium_concentration__Cai)) - 0.070000000000000007));
    }
    
    void CellLuoRudy1991FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        double var_chaste_interface__intracellular_calcium_concentration__Cai = rY[7];
        // Units: millimolar; Initial value: 0.0002
        
        // Lookup table indexing
        const bool _oob_1 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex1(var_chaste_interface__intracellular_calcium_concentration__Cai);
#define COVERAGE_IGNORE
        if (_oob_1)
            EXCEPTION(DumpState("cytosolic_calcium_concentration outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_1_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable1(var_chaste_interface__intracellular_calcium_concentration__Cai);
        const bool _oob_0 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        const double var_time_dependent_potassium_current__i_K = (mParameters[2] * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[14] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_membrane__C = 1.0; // microF_per_cm2
        const double var_chaste_interface__membrane__I_stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_fast_sodium_current__i_Na = mParameters[1] * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - 54.794463935091848); // microA_per_cm2
        const double var_slow_inward_current__i_si = mParameters[0] * var_chaste_interface__slow_inward_current_d_gate__d * var_chaste_interface__slow_inward_current_f_gate__f * (var_chaste_interface__membrane__V - _lt_1_row[0]); // microA_per_cm2
        const double d_dt_chaste_interface__membrane__V = ( -1.0 / var_membrane__C) * (var_chaste_interface__membrane__I_stim + var_fast_sodium_current__i_Na + var_slow_inward_current__i_si + var_time_dependent_potassium_current__i_K + _lt_0_row[12] + _lt_0_row[13] + (0.039210000000000002 * (var_chaste_interface__membrane__V -  -59.869999999999997))); // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__membrane__V;
    }
    
    void CellLuoRudy1991FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.00187018
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.9804713
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.98767124
        double var_chaste_interface__slow_inward_current_d_gate__d = rY[4];
        // Units: dimensionless; Initial value: 0.00316354
        double var_chaste_interface__slow_inward_current_f_gate__f = rY[5];
        // Units: dimensionless; Initial value: 0.99427859
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        
        const double var_chaste_interface__environment__dt = mDt;

        // Lookup table indexing
        const bool _oob_0 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        
        rY[2] = (var_chaste_interface__fast_sodium_current_h_gate__h + (_lt_0_row[0] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[1] * var_chaste_interface__environment__dt));
        rY[3] = (var_chaste_interface__fast_sodium_current_j_gate__j + (_lt_0_row[2] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[3] * var_chaste_interface__environment__dt));
        rY[1] = (var_chaste_interface__fast_sodium_current_m_gate__m + (_lt_0_row[4] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[5] * var_chaste_interface__environment__dt));
        rY[4] = (var_chaste_interface__slow_inward_current_d_gate__d + (_lt_0_row[6] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[7] * var_chaste_interface__environment__dt));
        rY[5] = (var_chaste_interface__slow_inward_current_f_gate__f + (_lt_0_row[8] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[9] * var_chaste_interface__environment__dt));
        rY[6] = (var_chaste_interface__time_dependent_potassium_current_X_gate__X + (_lt_0_row[10] * var_chaste_interface__environment__dt)) / (1.0 - (_lt_0_row[11] * var_chaste_interface__environment__dt));
        
        double _guess[1] = {rY[7]};
        CardiacNewtonSolver<1,CellLuoRudy1991FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<1,CellLuoRudy1991FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[7] = _guess[0];
    }
    
    std::vector<double> CellLuoRudy1991FromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.853
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = rY[6];
        // Units: dimensionless; Initial value: 0.16647703
        
        
        // Lookup table indexing
        const bool _oob_0 = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
#define COVERAGE_IGNORE
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY, var_chaste_interface__environment__time));
#undef COVERAGE_IGNORE
        const double* const _lt_0_row = CellLuoRudy1991FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
        
        // Mathematics
        const double var_membrane__FonRT = 0.037435728309031795; // per_millivolt
        const double var_time_dependent_potassium_current__i_K = (mParameters[2] * 1.0) * var_chaste_interface__time_dependent_potassium_current_X_gate__X * _lt_0_row[14] * (var_chaste_interface__membrane__V -  -77.567584385319392); // microA_per_cm2
        const double var_membrane__potassium_currents = var_time_dependent_potassium_current__i_K + _lt_0_row[12] + _lt_0_row[13]; // microA_per_cm2
        
        std::vector<double> dqs(2);
        dqs[0] = var_membrane__FonRT;
        dqs[1] = var_membrane__potassium_currents;
        return dqs;
    }
    
template<>
void OdeSystemInformation<CellLuoRudy1991FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "luo_rudy_1991";
    this->mFreeVariableName = "environment_time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.853);

    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00187018);

    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9804713);

    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98767124);

    this->mVariableNames.push_back("slow_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00316354);

    this->mVariableNames.push_back("slow_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99427859);

    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.16647703);

    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");
    
    this->mDerivedQuantityNames.push_back("FonRT");
    this->mDerivedQuantityUnits.push_back("per_millivolt");
    
    this->mDerivedQuantityNames.push_back("potassium_currents");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");
    
    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.005;
    this->mAttributes["SuggestedCycleLength"] = 750;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellLuoRudy1991FromCellMLBackwardEuler)
